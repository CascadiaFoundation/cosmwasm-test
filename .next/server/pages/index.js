/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./node_modules/next/dist/client/add-base-path.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/client/add-base-path.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addBasePath\", ({\n    enumerable: true,\n    get: function() {\n        return addBasePath;\n    }\n}));\nconst _addpathprefix = __webpack_require__(/*! ../shared/lib/router/utils/add-path-prefix */ \"../shared/lib/router/utils/add-path-prefix\");\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst basePath =  false || \"\";\nfunction addBasePath(path, required) {\n    if (false) {}\n    return (0, _normalizetrailingslash.normalizePathTrailingSlash)((0, _addpathprefix.addPathPrefix)(path, basePath));\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=add-base-path.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9hZGQtYmFzZS1wYXRoLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZILCtDQUE4QztJQUMxQ0ksWUFBWSxJQUFJO0lBQ2hCQyxLQUFLLFdBQVc7UUFDWixPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsaUJBQWlCQyxtQkFBT0EsQ0FBQyw4RkFBNEM7QUFDM0UsTUFBTUMsMEJBQTBCRCxtQkFBT0EsQ0FBQywrRkFBNEI7QUFDcEUsTUFBTUUsV0FBV0MsTUFBa0MsSUFBSTtBQUN2RCxTQUFTTCxZQUFZUSxJQUFJLEVBQUVDLFFBQVEsRUFBRTtJQUNqQyxJQUFJSixLQUEwQyxFQUFFLEVBSS9DO0lBQ0QsT0FBTyxDQUFDLEdBQUdGLHdCQUF3QlEsMEJBQTBCLEVBQUUsQ0FBQyxHQUFHVixlQUFlVyxhQUFhLEVBQUVKLE1BQU1KO0FBQzNHO0FBRUEsSUFBSSxDQUFDLE9BQU9SLFFBQVFpQixPQUFPLEtBQUssY0FBZSxPQUFPakIsUUFBUWlCLE9BQU8sS0FBSyxZQUFZakIsUUFBUWlCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2pCLFFBQVFpQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLcEIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRaUIsT0FBTyxFQUFFLGNBQWM7UUFBRWhCLE9BQU8sSUFBSTtJQUFDO0lBQ25FSCxPQUFPcUIsTUFBTSxDQUFDbkIsUUFBUWlCLE9BQU8sRUFBRWpCO0lBQy9Cb0IsT0FBT3BCLE9BQU8sR0FBR0EsUUFBUWlCLE9BQU87QUFDbEMsQ0FBQyxDQUVELHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvYWRkLWJhc2UtcGF0aC5qcz82MTMxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkQmFzZVBhdGhcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGFkZEJhc2VQYXRoO1xuICAgIH1cbn0pO1xuY29uc3QgX2FkZHBhdGhwcmVmaXggPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvYWRkLXBhdGgtcHJlZml4XCIpO1xuY29uc3QgX25vcm1hbGl6ZXRyYWlsaW5nc2xhc2ggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2hcIik7XG5jb25zdCBiYXNlUGF0aCA9IHByb2Nlc3MuZW52Ll9fTkVYVF9ST1VURVJfQkFTRVBBVEggfHwgXCJcIjtcbmZ1bmN0aW9uIGFkZEJhc2VQYXRoKHBhdGgsIHJlcXVpcmVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9NQU5VQUxfQ0xJRU5UX0JBU0VfUEFUSCkge1xuICAgICAgICBpZiAoIXJlcXVpcmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKDAsIF9ub3JtYWxpemV0cmFpbGluZ3NsYXNoLm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoKSgoMCwgX2FkZHBhdGhwcmVmaXguYWRkUGF0aFByZWZpeCkocGF0aCwgYmFzZVBhdGgpKTtcbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkLWJhc2UtcGF0aC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiYWRkQmFzZVBhdGgiLCJfYWRkcGF0aHByZWZpeCIsInJlcXVpcmUiLCJfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCIsImJhc2VQYXRoIiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9ST1VURVJfQkFTRVBBVEgiLCJwYXRoIiwicmVxdWlyZWQiLCJfX05FWFRfTUFOVUFMX0NMSUVOVF9CQVNFX1BBVEgiLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsImFkZFBhdGhQcmVmaXgiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiIsIm1vZHVsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/add-base-path.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/add-locale.js":
/*!*****************************************************!*\
  !*** ./node_modules/next/dist/client/add-locale.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"addLocale\", ({\n    enumerable: true,\n    get: function() {\n        return addLocale;\n    }\n}));\nconst _normalizetrailingslash = __webpack_require__(/*! ./normalize-trailing-slash */ \"./node_modules/next/dist/client/normalize-trailing-slash.js\");\nconst addLocale = function(path) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    if (false) {}\n    return path;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=add-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9hZGQtbG9jYWxlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0ZILDZDQUE0QztJQUN4Q0ksWUFBWSxJQUFJO0lBQ2hCQyxLQUFLLFdBQVc7UUFDWixPQUFPQztJQUNYO0FBQ0osQ0FBQyxFQUFDO0FBQ0YsTUFBTUMsMEJBQTBCQyxtQkFBT0EsQ0FBQywrRkFBNEI7QUFDcEUsTUFBTUYsWUFBWSxTQUFTRyxJQUFJLEVBQUU7SUFDN0IsSUFBSSxJQUFJQyxPQUFPQyxVQUFVQyxNQUFNLEVBQUVDLE9BQU8sSUFBSUMsTUFBTUosT0FBTyxJQUFJQSxPQUFPLElBQUksQ0FBQyxHQUFHSyxPQUFPLEdBQUdBLE9BQU9MLE1BQU1LLE9BQU87UUFDdEdGLElBQUksQ0FBQ0UsT0FBTyxFQUFFLEdBQUdKLFNBQVMsQ0FBQ0ksS0FBSztJQUNwQztJQUNBLElBQUlDLEtBQStCLEVBQUUsRUFFcEM7SUFDRCxPQUFPUDtBQUNYO0FBRUEsSUFBSSxDQUFDLE9BQU9QLFFBQVFrQixPQUFPLEtBQUssY0FBZSxPQUFPbEIsUUFBUWtCLE9BQU8sS0FBSyxZQUFZbEIsUUFBUWtCLE9BQU8sS0FBSyxJQUFJLEtBQU0sT0FBT2xCLFFBQVFrQixPQUFPLENBQUNDLFVBQVUsS0FBSyxhQUFhO0lBQ3JLckIsT0FBT0MsY0FBYyxDQUFDQyxRQUFRa0IsT0FBTyxFQUFFLGNBQWM7UUFBRWpCLE9BQU8sSUFBSTtJQUFDO0lBQ25FSCxPQUFPc0IsTUFBTSxDQUFDcEIsUUFBUWtCLE9BQU8sRUFBRWxCO0lBQy9CcUIsT0FBT3JCLE9BQU8sR0FBR0EsUUFBUWtCLE9BQU87QUFDbEMsQ0FBQyxDQUVELHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvYWRkLWxvY2FsZS5qcz9lMmQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkTG9jYWxlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBhZGRMb2NhbGU7XG4gICAgfVxufSk7XG5jb25zdCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCA9IHJlcXVpcmUoXCIuL25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaFwiKTtcbmNvbnN0IGFkZExvY2FsZSA9IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICBmb3IodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5Kyspe1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9JMThOX1NVUFBPUlQpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfbm9ybWFsaXpldHJhaWxpbmdzbGFzaC5ub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCkocmVxdWlyZShcIi4uL3NoYXJlZC9saWIvcm91dGVyL3V0aWxzL2FkZC1sb2NhbGVcIikuYWRkTG9jYWxlKHBhdGgsIC4uLmFyZ3MpKTtcbiAgICB9XG4gICAgcmV0dXJuIHBhdGg7XG59O1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hZGQtbG9jYWxlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJhZGRMb2NhbGUiLCJfbm9ybWFsaXpldHJhaWxpbmdzbGFzaCIsInJlcXVpcmUiLCJwYXRoIiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJwcm9jZXNzIiwiZW52IiwiX19ORVhUX0kxOE5fU1VQUE9SVCIsIm5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/add-locale.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/components/router-reducer/router-reducer-types.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/dist/client/components/router-reducer/router-reducer-types.js ***!
  \*****************************************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    PrefetchKind: function() {\n        return PrefetchKind;\n    },\n    ACTION_REFRESH: function() {\n        return ACTION_REFRESH;\n    },\n    ACTION_NAVIGATE: function() {\n        return ACTION_NAVIGATE;\n    },\n    ACTION_RESTORE: function() {\n        return ACTION_RESTORE;\n    },\n    ACTION_SERVER_PATCH: function() {\n        return ACTION_SERVER_PATCH;\n    },\n    ACTION_PREFETCH: function() {\n        return ACTION_PREFETCH;\n    },\n    ACTION_FAST_REFRESH: function() {\n        return ACTION_FAST_REFRESH;\n    },\n    ACTION_SERVER_ACTION: function() {\n        return ACTION_SERVER_ACTION;\n    }\n});\nconst ACTION_REFRESH = \"refresh\";\nconst ACTION_NAVIGATE = \"navigate\";\nconst ACTION_RESTORE = \"restore\";\nconst ACTION_SERVER_PATCH = \"server-patch\";\nconst ACTION_PREFETCH = \"prefetch\";\nconst ACTION_FAST_REFRESH = \"fast-refresh\";\nconst ACTION_SERVER_ACTION = \"server-action\";\nvar PrefetchKind;\n(function(PrefetchKind) {\n    PrefetchKind[\"AUTO\"] = \"auto\";\n    PrefetchKind[\"FULL\"] = \"full\";\n    PrefetchKind[\"TEMPORARY\"] = \"temporary\";\n})(PrefetchKind || (PrefetchKind = {}));\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=router-reducer-types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JvdXRlci1yZWR1Y2VyL3JvdXRlci1yZWR1Y2VyLXR5cGVzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUN6Q0csT0FBTyxJQUFJO0FBQ2YsQ0FBQyxFQUFDO0FBQ0YsS0FBTUMsQ0FBQUEsQ0FTTjtBQUNBLFNBQVNTLFFBQVFDLE1BQU0sRUFBRUMsR0FBRyxFQUFFO0lBQzFCLElBQUksSUFBSUMsUUFBUUQsSUFBSWYsT0FBT0MsY0FBYyxDQUFDYSxRQUFRRSxNQUFNO1FBQ3BEQyxZQUFZLElBQUk7UUFDaEJDLEtBQUtILEdBQUcsQ0FBQ0MsS0FBSztJQUNsQjtBQUNKO0FBQ0FILFFBQVFYLFNBQVM7SUFDYkcsY0FBYyxXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQUMsZ0JBQWdCLFdBQVc7UUFDdkIsT0FBT0E7SUFDWDtJQUNBQyxpQkFBaUIsV0FBVztRQUN4QixPQUFPQTtJQUNYO0lBQ0FDLGdCQUFnQixXQUFXO1FBQ3ZCLE9BQU9BO0lBQ1g7SUFDQUMscUJBQXFCLFdBQVc7UUFDNUIsT0FBT0E7SUFDWDtJQUNBQyxpQkFBaUIsV0FBVztRQUN4QixPQUFPQTtJQUNYO0lBQ0FDLHFCQUFxQixXQUFXO1FBQzVCLE9BQU9BO0lBQ1g7SUFDQUMsc0JBQXNCLFdBQVc7UUFDN0IsT0FBT0E7SUFDWDtBQUNKO0FBQ0EsTUFBTU4saUJBQWlCO0FBQ3ZCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxpQkFBaUI7QUFDdkIsTUFBTUMsc0JBQXNCO0FBQzVCLE1BQU1DLGtCQUFrQjtBQUN4QixNQUFNQyxzQkFBc0I7QUFDNUIsTUFBTUMsdUJBQXVCO0FBQzdCLElBQUlQO0FBQ0gsVUFBU0EsWUFBWSxFQUFFO0lBQ3BCQSxZQUFZLENBQUMsT0FBTyxHQUFHO0lBQ3ZCQSxZQUFZLENBQUMsT0FBTyxHQUFHO0lBQ3ZCQSxZQUFZLENBQUMsWUFBWSxHQUFHO0FBQ2hDLEdBQUdBLGdCQUFpQkEsQ0FBQUEsZUFBZSxDQUFDO0FBRXBDLElBQUksQ0FBQyxPQUFPSCxRQUFRaUIsT0FBTyxLQUFLLGNBQWUsT0FBT2pCLFFBQVFpQixPQUFPLEtBQUssWUFBWWpCLFFBQVFpQixPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9qQixRQUFRaUIsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS3BCLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUWlCLE9BQU8sRUFBRSxjQUFjO1FBQUVoQixPQUFPLElBQUk7SUFBQztJQUNuRUgsT0FBT3FCLE1BQU0sQ0FBQ25CLFFBQVFpQixPQUFPLEVBQUVqQjtJQUMvQkUsT0FBT0YsT0FBTyxHQUFHQSxRQUFRaUIsT0FBTztBQUNsQyxDQUFDLENBRUQsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9jb21wb25lbnRzL3JvdXRlci1yZWR1Y2VyL3JvdXRlci1yZWR1Y2VyLXR5cGVzLmpzPzY1N2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBQcmVmZXRjaEtpbmQ6IG51bGwsXG4gICAgQUNUSU9OX1JFRlJFU0g6IG51bGwsXG4gICAgQUNUSU9OX05BVklHQVRFOiBudWxsLFxuICAgIEFDVElPTl9SRVNUT1JFOiBudWxsLFxuICAgIEFDVElPTl9TRVJWRVJfUEFUQ0g6IG51bGwsXG4gICAgQUNUSU9OX1BSRUZFVENIOiBudWxsLFxuICAgIEFDVElPTl9GQVNUX1JFRlJFU0g6IG51bGwsXG4gICAgQUNUSU9OX1NFUlZFUl9BQ1RJT046IG51bGxcbn0pO1xuZnVuY3Rpb24gX2V4cG9ydCh0YXJnZXQsIGFsbCkge1xuICAgIGZvcih2YXIgbmFtZSBpbiBhbGwpT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgbmFtZSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGFsbFtuYW1lXVxuICAgIH0pO1xufVxuX2V4cG9ydChleHBvcnRzLCB7XG4gICAgUHJlZmV0Y2hLaW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFByZWZldGNoS2luZDtcbiAgICB9LFxuICAgIEFDVElPTl9SRUZSRVNIOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTl9SRUZSRVNIO1xuICAgIH0sXG4gICAgQUNUSU9OX05BVklHQVRFOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTl9OQVZJR0FURTtcbiAgICB9LFxuICAgIEFDVElPTl9SRVNUT1JFOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTl9SRVNUT1JFO1xuICAgIH0sXG4gICAgQUNUSU9OX1NFUlZFUl9QQVRDSDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBBQ1RJT05fU0VSVkVSX1BBVENIO1xuICAgIH0sXG4gICAgQUNUSU9OX1BSRUZFVENIOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTl9QUkVGRVRDSDtcbiAgICB9LFxuICAgIEFDVElPTl9GQVNUX1JFRlJFU0g6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gQUNUSU9OX0ZBU1RfUkVGUkVTSDtcbiAgICB9LFxuICAgIEFDVElPTl9TRVJWRVJfQUNUSU9OOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEFDVElPTl9TRVJWRVJfQUNUSU9OO1xuICAgIH1cbn0pO1xuY29uc3QgQUNUSU9OX1JFRlJFU0ggPSBcInJlZnJlc2hcIjtcbmNvbnN0IEFDVElPTl9OQVZJR0FURSA9IFwibmF2aWdhdGVcIjtcbmNvbnN0IEFDVElPTl9SRVNUT1JFID0gXCJyZXN0b3JlXCI7XG5jb25zdCBBQ1RJT05fU0VSVkVSX1BBVENIID0gXCJzZXJ2ZXItcGF0Y2hcIjtcbmNvbnN0IEFDVElPTl9QUkVGRVRDSCA9IFwicHJlZmV0Y2hcIjtcbmNvbnN0IEFDVElPTl9GQVNUX1JFRlJFU0ggPSBcImZhc3QtcmVmcmVzaFwiO1xuY29uc3QgQUNUSU9OX1NFUlZFUl9BQ1RJT04gPSBcInNlcnZlci1hY3Rpb25cIjtcbnZhciBQcmVmZXRjaEtpbmQ7XG4oZnVuY3Rpb24oUHJlZmV0Y2hLaW5kKSB7XG4gICAgUHJlZmV0Y2hLaW5kW1wiQVVUT1wiXSA9IFwiYXV0b1wiO1xuICAgIFByZWZldGNoS2luZFtcIkZVTExcIl0gPSBcImZ1bGxcIjtcbiAgICBQcmVmZXRjaEtpbmRbXCJURU1QT1JBUllcIl0gPSBcInRlbXBvcmFyeVwiO1xufSkoUHJlZmV0Y2hLaW5kIHx8IChQcmVmZXRjaEtpbmQgPSB7fSkpO1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZXItcmVkdWNlci10eXBlcy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJtb2R1bGUiLCJQcmVmZXRjaEtpbmQiLCJBQ1RJT05fUkVGUkVTSCIsIkFDVElPTl9OQVZJR0FURSIsIkFDVElPTl9SRVNUT1JFIiwiQUNUSU9OX1NFUlZFUl9QQVRDSCIsIkFDVElPTl9QUkVGRVRDSCIsIkFDVElPTl9GQVNUX1JFRlJFU0giLCJBQ1RJT05fU0VSVkVSX0FDVElPTiIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/components/router-reducer/router-reducer-types.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/get-domain-locale.js":
/*!************************************************************!*\
  !*** ./node_modules/next/dist/client/get-domain-locale.js ***!
  \************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"getDomainLocale\", ({\n    enumerable: true,\n    get: function() {\n        return getDomainLocale;\n    }\n}));\nconst basePath =  false || \"\";\nfunction getDomainLocale(path, locale, locales, domainLocales) {\n    if (false) {} else {\n        return false;\n    }\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=get-domain-locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9nZXQtZG9tYWluLWxvY2FsZS5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFDekNHLE9BQU8sSUFBSTtBQUNmLENBQUMsRUFBQztBQUNGSCxtREFBa0Q7SUFDOUNJLFlBQVksSUFBSTtJQUNoQkMsS0FBSyxXQUFXO1FBQ1osT0FBT0M7SUFDWDtBQUNKLENBQUMsRUFBQztBQUNGLE1BQU1DLFdBQVdDLE1BQWtDLElBQUk7QUFDdkQsU0FBU0YsZ0JBQWdCSyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxhQUFhLEVBQUU7SUFDM0QsSUFBSU4sS0FBK0IsRUFBRSxFQVdwQyxNQUFNO1FBQ0gsT0FBTyxLQUFLO0lBQ2hCLENBQUM7QUFDTDtBQUVBLElBQUksQ0FBQyxPQUFPTixRQUFReUIsT0FBTyxLQUFLLGNBQWUsT0FBT3pCLFFBQVF5QixPQUFPLEtBQUssWUFBWXpCLFFBQVF5QixPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU96QixRQUFReUIsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNySzVCLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUXlCLE9BQU8sRUFBRSxjQUFjO1FBQUV4QixPQUFPLElBQUk7SUFBQztJQUNuRUgsT0FBTzZCLE1BQU0sQ0FBQzNCLFFBQVF5QixPQUFPLEVBQUV6QjtJQUMvQjRCLE9BQU81QixPQUFPLEdBQUdBLFFBQVF5QixPQUFPO0FBQ2xDLENBQUMsQ0FFRCw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L2dldC1kb21haW4tbG9jYWxlLmpzPzVjMjciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXREb21haW5Mb2NhbGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldERvbWFpbkxvY2FsZTtcbiAgICB9XG59KTtcbmNvbnN0IGJhc2VQYXRoID0gcHJvY2Vzcy5lbnYuX19ORVhUX1JPVVRFUl9CQVNFUEFUSCB8fCBcIlwiO1xuZnVuY3Rpb24gZ2V0RG9tYWluTG9jYWxlKHBhdGgsIGxvY2FsZSwgbG9jYWxlcywgZG9tYWluTG9jYWxlcykge1xuICAgIGlmIChwcm9jZXNzLmVudi5fX05FWFRfSTE4Tl9TVVBQT1JUKSB7XG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZUxvY2FsZVBhdGggPSByZXF1aXJlKFwiLi9ub3JtYWxpemUtbG9jYWxlLXBhdGhcIikubm9ybWFsaXplTG9jYWxlUGF0aDtcbiAgICAgICAgY29uc3QgZGV0ZWN0RG9tYWluTG9jYWxlID0gcmVxdWlyZShcIi4vZGV0ZWN0LWRvbWFpbi1sb2NhbGVcIikuZGV0ZWN0RG9tYWluTG9jYWxlO1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBsb2NhbGUgfHwgbm9ybWFsaXplTG9jYWxlUGF0aChwYXRoLCBsb2NhbGVzKS5kZXRlY3RlZExvY2FsZTtcbiAgICAgICAgY29uc3QgZG9tYWluID0gZGV0ZWN0RG9tYWluTG9jYWxlKGRvbWFpbkxvY2FsZXMsIHVuZGVmaW5lZCwgdGFyZ2V0KTtcbiAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgY29uc3QgcHJvdG8gPSBcImh0dHBcIiArIChkb21haW4uaHR0cCA/IFwiXCIgOiBcInNcIikgKyBcIjovL1wiO1xuICAgICAgICAgICAgY29uc3QgZmluYWxMb2NhbGUgPSB0YXJnZXQgPT09IGRvbWFpbi5kZWZhdWx0TG9jYWxlID8gXCJcIiA6IFwiL1wiICsgdGFyZ2V0O1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIgKyBwcm90byArIGRvbWFpbi5kb21haW4gKyBiYXNlUGF0aCArIGZpbmFsTG9jYWxlICsgcGF0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0LWRvbWFpbi1sb2NhbGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsImdldERvbWFpbkxvY2FsZSIsImJhc2VQYXRoIiwicHJvY2VzcyIsImVudiIsIl9fTkVYVF9ST1VURVJfQkFTRVBBVEgiLCJwYXRoIiwibG9jYWxlIiwibG9jYWxlcyIsImRvbWFpbkxvY2FsZXMiLCJfX05FWFRfSTE4Tl9TVVBQT1JUIiwibm9ybWFsaXplTG9jYWxlUGF0aCIsInJlcXVpcmUiLCJkZXRlY3REb21haW5Mb2NhbGUiLCJ0YXJnZXQiLCJkZXRlY3RlZExvY2FsZSIsImRvbWFpbiIsInVuZGVmaW5lZCIsInByb3RvIiwiaHR0cCIsImZpbmFsTG9jYWxlIiwiZGVmYXVsdExvY2FsZSIsImRlZmF1bHQiLCJfX2VzTW9kdWxlIiwiYXNzaWduIiwibW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/get-domain-locale.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/link.js":
/*!***********************************************!*\
  !*** ./node_modules/next/dist/client/link.js ***!
  \***********************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\n\"use client\";\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"default\", ({\n    enumerable: true,\n    get: function() {\n        return _default;\n    }\n}));\nconst _interop_require_default = __webpack_require__(/*! @swc/helpers/_/_interop_require_default */ \"./node_modules/@swc/helpers/cjs/_interop_require_default.cjs\");\nconst _react = /*#__PURE__*/ _interop_require_default._(__webpack_require__(/*! react */ \"react\"));\nconst _resolvehref = __webpack_require__(/*! ../shared/lib/router/utils/resolve-href */ \"../shared/lib/router/utils/resolve-href\");\nconst _islocalurl = __webpack_require__(/*! ../shared/lib/router/utils/is-local-url */ \"../shared/lib/router/utils/is-local-url\");\nconst _formaturl = __webpack_require__(/*! ../shared/lib/router/utils/format-url */ \"../shared/lib/router/utils/format-url\");\nconst _utils = __webpack_require__(/*! ../shared/lib/utils */ \"../shared/lib/utils\");\nconst _addlocale = __webpack_require__(/*! ./add-locale */ \"./node_modules/next/dist/client/add-locale.js\");\nconst _routercontext = __webpack_require__(/*! ../shared/lib/router-context */ \"../shared/lib/router-context\");\nconst _approutercontext = __webpack_require__(/*! ../shared/lib/app-router-context */ \"../shared/lib/app-router-context\");\nconst _useintersection = __webpack_require__(/*! ./use-intersection */ \"./node_modules/next/dist/client/use-intersection.js\");\nconst _getdomainlocale = __webpack_require__(/*! ./get-domain-locale */ \"./node_modules/next/dist/client/get-domain-locale.js\");\nconst _addbasepath = __webpack_require__(/*! ./add-base-path */ \"./node_modules/next/dist/client/add-base-path.js\");\nconst _routerreducertypes = __webpack_require__(/*! ./components/router-reducer/router-reducer-types */ \"./node_modules/next/dist/client/components/router-reducer/router-reducer-types.js\");\nconst prefetched = new Set();\nfunction prefetch(router, href, as, options, appOptions, isAppRouter) {\n    if (true) {\n        return;\n    }\n    // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    if (!isAppRouter && !(0, _islocalurl.isLocalURL)(href)) {\n        return;\n    }\n    // We should only dedupe requests when experimental.optimisticClientCache is\n    // disabled.\n    if (!options.bypassPrefetchedCheck) {\n        const locale = typeof options.locale !== \"undefined\" ? options.locale : \"locale\" in router ? router.locale : undefined;\n        const prefetchedKey = href + \"%\" + as + \"%\" + locale;\n        // If we've already fetched the key, then don't prefetch it again!\n        if (prefetched.has(prefetchedKey)) {\n            return;\n        }\n        // Mark this URL as prefetched.\n        prefetched.add(prefetchedKey);\n    }\n    const prefetchPromise = isAppRouter ? router.prefetch(href, appOptions) : router.prefetch(href, as, options);\n    // Prefetch the JSON page if asked (only in the client)\n    // We need to handle a prefetch error here since we may be\n    // loading with priority which can reject but we don't\n    // want to force navigation since this is only a prefetch\n    Promise.resolve(prefetchPromise).catch((err)=>{\n        if (true) {\n            // rethrow to show invalid URL errors\n            throw err;\n        }\n    });\n}\nfunction isModifiedEvent(event) {\n    const eventTarget = event.currentTarget;\n    const target = eventTarget.getAttribute(\"target\");\n    return target && target !== \"_self\" || event.metaKey || event.ctrlKey || event.shiftKey || event.altKey || // triggers resource download\n    event.nativeEvent && event.nativeEvent.which === 2;\n}\nfunction linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter, prefetchEnabled) {\n    const { nodeName  } = e.currentTarget;\n    // anchors inside an svg have a lowercase nodeName\n    const isAnchorNodeName = nodeName.toUpperCase() === \"A\";\n    if (isAnchorNodeName && (isModifiedEvent(e) || // app-router supports external urls out of the box so it shouldn't short-circuit here as support for e.g. `replace` is added in the app-router.\n    !isAppRouter && !(0, _islocalurl.isLocalURL)(href))) {\n        // ignore click for browser’s default behavior\n        return;\n    }\n    e.preventDefault();\n    const navigate = ()=>{\n        // If the router is an NextRouter instance it will have `beforePopState`\n        if (\"beforePopState\" in router) {\n            router[replace ? \"replace\" : \"push\"](href, as, {\n                shallow,\n                locale,\n                scroll\n            });\n        } else {\n            router[replace ? \"replace\" : \"push\"](as || href, {\n                forceOptimisticNavigation: !prefetchEnabled\n            });\n        }\n    };\n    if (isAppRouter) {\n        _react.default.startTransition(navigate);\n    } else {\n        navigate();\n    }\n}\nfunction formatStringOrUrl(urlObjOrString) {\n    if (typeof urlObjOrString === \"string\") {\n        return urlObjOrString;\n    }\n    return (0, _formaturl.formatUrl)(urlObjOrString);\n}\n/**\n * React Component that enables client-side transitions between routes.\n */ const Link = /*#__PURE__*/ _react.default.forwardRef(function LinkComponent(props, forwardedRef) {\n    let children;\n    const { href: hrefProp , as: asProp , children: childrenProp , prefetch: prefetchProp = null , passHref , replace , shallow , scroll , locale , onClick , onMouseEnter: onMouseEnterProp , onTouchStart: onTouchStartProp , legacyBehavior =true === false , ...restProps } = props;\n    children = childrenProp;\n    if (legacyBehavior && (typeof children === \"string\" || typeof children === \"number\")) {\n        children = /*#__PURE__*/ _react.default.createElement(\"a\", null, children);\n    }\n    const prefetchEnabled = prefetchProp !== false;\n    /**\n     * The possible states for prefetch are:\n     * - null: this is the default \"auto\" mode, where we will prefetch partially if the link is in the viewport\n     * - true: we will prefetch if the link is visible and prefetch the full page, not just partially\n     * - false: we will not prefetch if in the viewport at all\n     */ const appPrefetchKind = prefetchProp === null ? _routerreducertypes.PrefetchKind.AUTO : _routerreducertypes.PrefetchKind.FULL;\n    const pagesRouter = _react.default.useContext(_routercontext.RouterContext);\n    const appRouter = _react.default.useContext(_approutercontext.AppRouterContext);\n    const router = pagesRouter != null ? pagesRouter : appRouter;\n    // We're in the app directory if there is no pages router.\n    const isAppRouter = !pagesRouter;\n    if (true) {\n        function createPropError(args) {\n            return new Error(\"Failed prop type: The prop `\" + args.key + \"` expects a \" + args.expected + \" in `<Link>`, but got `\" + args.actual + \"` instead.\" + ( false ? 0 : \"\"));\n        }\n        // TypeScript trick for type-guarding:\n        const requiredPropsGuard = {\n            href: true\n        };\n        const requiredProps = Object.keys(requiredPropsGuard);\n        requiredProps.forEach((key)=>{\n            if (key === \"href\") {\n                if (props[key] == null || typeof props[key] !== \"string\" && typeof props[key] !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: props[key] === null ? \"null\" : typeof props[key]\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // TypeScript trick for type-guarding:\n        const optionalPropsGuard = {\n            as: true,\n            replace: true,\n            scroll: true,\n            shallow: true,\n            passHref: true,\n            prefetch: true,\n            locale: true,\n            onClick: true,\n            onMouseEnter: true,\n            onTouchStart: true,\n            legacyBehavior: true\n        };\n        const optionalProps = Object.keys(optionalPropsGuard);\n        optionalProps.forEach((key)=>{\n            const valType = typeof props[key];\n            if (key === \"as\") {\n                if (props[key] && valType !== \"string\" && valType !== \"object\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string` or `object`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"locale\") {\n                if (props[key] && valType !== \"string\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`string`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"onClick\" || key === \"onMouseEnter\" || key === \"onTouchStart\") {\n                if (props[key] && valType !== \"function\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`function`\",\n                        actual: valType\n                    });\n                }\n            } else if (key === \"replace\" || key === \"scroll\" || key === \"shallow\" || key === \"passHref\" || key === \"prefetch\" || key === \"legacyBehavior\") {\n                if (props[key] != null && valType !== \"boolean\") {\n                    throw createPropError({\n                        key,\n                        expected: \"`boolean`\",\n                        actual: valType\n                    });\n                }\n            } else {\n                // TypeScript trick for type-guarding:\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                const _ = key;\n            }\n        });\n        // This hook is in a conditional but that is ok because `process.env.NODE_ENV` never changes\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const hasWarned = _react.default.useRef(false);\n        if (props.prefetch && !hasWarned.current && !isAppRouter) {\n            hasWarned.current = true;\n            console.warn(\"Next.js auto-prefetches automatically based on viewport. The prefetch attribute is no longer needed. More: https://nextjs.org/docs/messages/prefetch-true-deprecated\");\n        }\n    }\n    if (true) {\n        if (isAppRouter && !asProp) {\n            let href;\n            if (typeof hrefProp === \"string\") {\n                href = hrefProp;\n            } else if (typeof hrefProp === \"object\" && typeof hrefProp.pathname === \"string\") {\n                href = hrefProp.pathname;\n            }\n            if (href) {\n                const hasDynamicSegment = href.split(\"/\").some((segment)=>segment.startsWith(\"[\") && segment.endsWith(\"]\"));\n                if (hasDynamicSegment) {\n                    throw new Error(\"Dynamic href `\" + href + \"` found in <Link> while using the `/app` router, this is not supported. Read more: https://nextjs.org/docs/messages/app-dir-dynamic-href\");\n                }\n            }\n        }\n    }\n    const { href , as  } = _react.default.useMemo(()=>{\n        if (!pagesRouter) {\n            const resolvedHref = formatStringOrUrl(hrefProp);\n            return {\n                href: resolvedHref,\n                as: asProp ? formatStringOrUrl(asProp) : resolvedHref\n            };\n        }\n        const [resolvedHref, resolvedAs] = (0, _resolvehref.resolveHref)(pagesRouter, hrefProp, true);\n        return {\n            href: resolvedHref,\n            as: asProp ? (0, _resolvehref.resolveHref)(pagesRouter, asProp) : resolvedAs || resolvedHref\n        };\n    }, [\n        pagesRouter,\n        hrefProp,\n        asProp\n    ]);\n    const previousHref = _react.default.useRef(href);\n    const previousAs = _react.default.useRef(as);\n    // This will return the first child, if multiple are provided it will throw an error\n    let child;\n    if (legacyBehavior) {\n        if (true) {\n            if (onClick) {\n                console.warn('\"onClick\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onClick be set on the child of next/link');\n            }\n            if (onMouseEnterProp) {\n                console.warn('\"onMouseEnter\" was passed to <Link> with `href` of `' + hrefProp + '` but \"legacyBehavior\" was set. The legacy behavior requires onMouseEnter be set on the child of next/link');\n            }\n            try {\n                child = _react.default.Children.only(children);\n            } catch (err) {\n                if (!children) {\n                    throw new Error(\"No children were passed to <Link> with `href` of `\" + hrefProp + \"` but one child is required https://nextjs.org/docs/messages/link-no-children\");\n                }\n                throw new Error(\"Multiple children were passed to <Link> with `href` of `\" + hrefProp + \"` but only one child is supported https://nextjs.org/docs/messages/link-multiple-children\" + ( false ? 0 : \"\"));\n            }\n        } else {}\n    } else {\n        if (true) {\n            if ((children == null ? void 0 : children.type) === \"a\") {\n                throw new Error(\"Invalid <Link> with <a> child. Please remove <a> or use <Link legacyBehavior>.\\nLearn more: https://nextjs.org/docs/messages/invalid-new-link-with-extra-anchor\");\n            }\n        }\n    }\n    const childRef = legacyBehavior ? child && typeof child === \"object\" && child.ref : forwardedRef;\n    const [setIntersectionRef, isVisible, resetVisible] = (0, _useintersection.useIntersection)({\n        rootMargin: \"200px\"\n    });\n    const setRef = _react.default.useCallback((el)=>{\n        // Before the link getting observed, check if visible state need to be reset\n        if (previousAs.current !== as || previousHref.current !== href) {\n            resetVisible();\n            previousAs.current = as;\n            previousHref.current = href;\n        }\n        setIntersectionRef(el);\n        if (childRef) {\n            if (typeof childRef === \"function\") childRef(el);\n            else if (typeof childRef === \"object\") {\n                childRef.current = el;\n            }\n        }\n    }, [\n        as,\n        childRef,\n        href,\n        resetVisible,\n        setIntersectionRef\n    ]);\n    // Prefetch the URL if we haven't already and it's visible.\n    _react.default.useEffect(()=>{\n        // in dev, we only prefetch on hover to avoid wasting resources as the prefetch will trigger compiling the page.\n        if (true) {\n            return;\n        }\n        if (!router) {\n            return;\n        }\n        // If we don't need to prefetch the URL, don't do prefetch.\n        if (!isVisible || !prefetchEnabled) {\n            return;\n        }\n        // Prefetch the URL.\n        prefetch(router, href, as, {\n            locale\n        }, {\n            kind: appPrefetchKind\n        }, isAppRouter);\n    }, [\n        as,\n        href,\n        isVisible,\n        locale,\n        prefetchEnabled,\n        pagesRouter == null ? void 0 : pagesRouter.locale,\n        router,\n        isAppRouter,\n        appPrefetchKind\n    ]);\n    const childProps = {\n        ref: setRef,\n        onClick (e) {\n            if (true) {\n                if (!e) {\n                    throw new Error('Component rendered inside next/link has to pass click event to \"onClick\" prop.');\n                }\n            }\n            if (!legacyBehavior && typeof onClick === \"function\") {\n                onClick(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onClick === \"function\") {\n                child.props.onClick(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (e.defaultPrevented) {\n                return;\n            }\n            linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAppRouter, prefetchEnabled);\n        },\n        onMouseEnter (e) {\n            if (!legacyBehavior && typeof onMouseEnterProp === \"function\") {\n                onMouseEnterProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onMouseEnter === \"function\") {\n                child.props.onMouseEnter(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, {\n                kind: appPrefetchKind\n            }, isAppRouter);\n        },\n        onTouchStart (e) {\n            if (!legacyBehavior && typeof onTouchStartProp === \"function\") {\n                onTouchStartProp(e);\n            }\n            if (legacyBehavior && child.props && typeof child.props.onTouchStart === \"function\") {\n                child.props.onTouchStart(e);\n            }\n            if (!router) {\n                return;\n            }\n            if (!prefetchEnabled && isAppRouter) {\n                return;\n            }\n            prefetch(router, href, as, {\n                locale,\n                priority: true,\n                // @see {https://github.com/vercel/next.js/discussions/40268?sort=top#discussioncomment-3572642}\n                bypassPrefetchedCheck: true\n            }, {\n                kind: appPrefetchKind\n            }, isAppRouter);\n        }\n    };\n    // If child is an <a> tag and doesn't have a href attribute, or if the 'passHref' property is\n    // defined, we specify the current 'href', so that repetition is not needed by the user.\n    // If the url is absolute, we can bypass the logic to prepend the domain and locale.\n    if ((0, _utils.isAbsoluteUrl)(as)) {\n        childProps.href = as;\n    } else if (!legacyBehavior || passHref || child.type === \"a\" && !(\"href\" in child.props)) {\n        const curLocale = typeof locale !== \"undefined\" ? locale : pagesRouter == null ? void 0 : pagesRouter.locale;\n        // we only render domain locales if we are currently on a domain locale\n        // so that locale links are still visitable in development/preview envs\n        const localeDomain = (pagesRouter == null ? void 0 : pagesRouter.isLocaleDomain) && (0, _getdomainlocale.getDomainLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.locales, pagesRouter == null ? void 0 : pagesRouter.domainLocales);\n        childProps.href = localeDomain || (0, _addbasepath.addBasePath)((0, _addlocale.addLocale)(as, curLocale, pagesRouter == null ? void 0 : pagesRouter.defaultLocale));\n    }\n    return legacyBehavior ? /*#__PURE__*/ _react.default.cloneElement(child, childProps) : /*#__PURE__*/ _react.default.createElement(\"a\", {\n        ...restProps,\n        ...childProps\n    }, children);\n});\nconst _default = Link;\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=link.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/link.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"normalizePathTrailingSlash\", ({\n    enumerable: true,\n    get: function() {\n        return normalizePathTrailingSlash;\n    }\n}));\nconst _removetrailingslash = __webpack_require__(/*! ../shared/lib/router/utils/remove-trailing-slash */ \"../shared/lib/router/utils/remove-trailing-slash\");\nconst _parsepath = __webpack_require__(/*! ../shared/lib/router/utils/parse-path */ \"../shared/lib/router/utils/parse-path\");\nconst normalizePathTrailingSlash = (path)=>{\n    if (!path.startsWith(\"/\") || undefined) {\n        return path;\n    }\n    const { pathname , query , hash  } = (0, _parsepath.parsePath)(path);\n    if (true) {\n        if (/\\.[^/]+\\/?$/.test(pathname)) {\n            return \"\" + (0, _removetrailingslash.removeTrailingSlash)(pathname) + query + hash;\n        } else if (pathname.endsWith(\"/\")) {\n            return \"\" + pathname + query + hash;\n        } else {\n            return pathname + \"/\" + query + hash;\n        }\n    }\n    return \"\" + (0, _removetrailingslash.removeTrailingSlash)(pathname) + query + hash;\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=normalize-trailing-slash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9ub3JtYWxpemUtdHJhaWxpbmctc2xhc2guanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPLElBQUk7QUFDZixDQUFDLEVBQUM7QUFDRkgsOERBQTZEO0lBQ3pESSxZQUFZLElBQUk7SUFDaEJDLEtBQUssV0FBVztRQUNaLE9BQU9DO0lBQ1g7QUFDSixDQUFDLEVBQUM7QUFDRixNQUFNQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDBHQUFrRDtBQUN2RixNQUFNQyxhQUFhRCxtQkFBT0EsQ0FBQyxvRkFBdUM7QUFDbEUsTUFBTUYsNkJBQTZCLENBQUNJLE9BQU87SUFDdkMsSUFBSSxDQUFDQSxLQUFLQyxVQUFVLENBQUMsUUFBUUMsU0FBd0MsRUFBRTtRQUNuRSxPQUFPRjtJQUNYLENBQUM7SUFDRCxNQUFNLEVBQUVLLFNBQVEsRUFBR0MsTUFBSyxFQUFHQyxLQUFJLEVBQUcsR0FBRyxDQUFDLEdBQUdSLFdBQVdTLFNBQVMsRUFBRVI7SUFDL0QsSUFBSUUsSUFBaUMsRUFBRTtRQUNuQyxJQUFJLGNBQWNRLElBQUksQ0FBQ0wsV0FBVztZQUM5QixPQUFPLEtBQUssQ0FBQyxHQUFHUixxQkFBcUJjLG1CQUFtQixFQUFFTixZQUFZQyxRQUFRQztRQUNsRixPQUFPLElBQUlGLFNBQVNPLFFBQVEsQ0FBQyxNQUFNO1lBQy9CLE9BQU8sS0FBS1AsV0FBV0MsUUFBUUM7UUFDbkMsT0FBTztZQUNILE9BQU9GLFdBQVcsTUFBTUMsUUFBUUM7UUFDcEMsQ0FBQztJQUNMLENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQyxHQUFHVixxQkFBcUJjLG1CQUFtQixFQUFFTixZQUFZQyxRQUFRQztBQUNsRjtBQUVBLElBQUksQ0FBQyxPQUFPZixRQUFRcUIsT0FBTyxLQUFLLGNBQWUsT0FBT3JCLFFBQVFxQixPQUFPLEtBQUssWUFBWXJCLFFBQVFxQixPQUFPLEtBQUssSUFBSSxLQUFNLE9BQU9yQixRQUFRcUIsT0FBTyxDQUFDQyxVQUFVLEtBQUssYUFBYTtJQUNyS3hCLE9BQU9DLGNBQWMsQ0FBQ0MsUUFBUXFCLE9BQU8sRUFBRSxjQUFjO1FBQUVwQixPQUFPLElBQUk7SUFBQztJQUNuRUgsT0FBT3lCLE1BQU0sQ0FBQ3ZCLFFBQVFxQixPQUFPLEVBQUVyQjtJQUMvQndCLE9BQU94QixPQUFPLEdBQUdBLFFBQVFxQixPQUFPO0FBQ2xDLENBQUMsQ0FFRCxvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY2xpZW50L25vcm1hbGl6ZS10cmFpbGluZy1zbGFzaC5qcz80YzJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2hcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZVBhdGhUcmFpbGluZ1NsYXNoO1xuICAgIH1cbn0pO1xuY29uc3QgX3JlbW92ZXRyYWlsaW5nc2xhc2ggPSByZXF1aXJlKFwiLi4vc2hhcmVkL2xpYi9yb3V0ZXIvdXRpbHMvcmVtb3ZlLXRyYWlsaW5nLXNsYXNoXCIpO1xuY29uc3QgX3BhcnNlcGF0aCA9IHJlcXVpcmUoXCIuLi9zaGFyZWQvbGliL3JvdXRlci91dGlscy9wYXJzZS1wYXRoXCIpO1xuY29uc3Qgbm9ybWFsaXplUGF0aFRyYWlsaW5nU2xhc2ggPSAocGF0aCk9PntcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcIi9cIikgfHwgcHJvY2Vzcy5lbnYuX19ORVhUX01BTlVBTF9UUkFJTElOR19TTEFTSCkge1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG4gICAgY29uc3QgeyBwYXRobmFtZSAsIHF1ZXJ5ICwgaGFzaCAgfSA9ICgwLCBfcGFyc2VwYXRoLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgaWYgKHByb2Nlc3MuZW52Ll9fTkVYVF9UUkFJTElOR19TTEFTSCkge1xuICAgICAgICBpZiAoL1xcLlteL10rXFwvPyQvLnRlc3QocGF0aG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIiArICgwLCBfcmVtb3ZldHJhaWxpbmdzbGFzaC5yZW1vdmVUcmFpbGluZ1NsYXNoKShwYXRobmFtZSkgKyBxdWVyeSArIGhhc2g7XG4gICAgICAgIH0gZWxzZSBpZiAocGF0aG5hbWUuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIHBhdGhuYW1lICsgcXVlcnkgKyBoYXNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHBhdGhuYW1lICsgXCIvXCIgKyBxdWVyeSArIGhhc2g7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFwiXCIgKyAoMCwgX3JlbW92ZXRyYWlsaW5nc2xhc2gucmVtb3ZlVHJhaWxpbmdTbGFzaCkocGF0aG5hbWUpICsgcXVlcnkgKyBoYXNoO1xufTtcblxuaWYgKCh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnZnVuY3Rpb24nIHx8ICh0eXBlb2YgZXhwb3J0cy5kZWZhdWx0ID09PSAnb2JqZWN0JyAmJiBleHBvcnRzLmRlZmF1bHQgIT09IG51bGwpKSAmJiB0eXBlb2YgZXhwb3J0cy5kZWZhdWx0Ll9fZXNNb2R1bGUgPT09ICd1bmRlZmluZWQnKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLmRlZmF1bHQsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiAgT2JqZWN0LmFzc2lnbihleHBvcnRzLmRlZmF1bHQsIGV4cG9ydHMpO1xuICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn1cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplLXRyYWlsaW5nLXNsYXNoLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJnZXQiLCJub3JtYWxpemVQYXRoVHJhaWxpbmdTbGFzaCIsIl9yZW1vdmV0cmFpbGluZ3NsYXNoIiwicmVxdWlyZSIsIl9wYXJzZXBhdGgiLCJwYXRoIiwic3RhcnRzV2l0aCIsInByb2Nlc3MiLCJlbnYiLCJfX05FWFRfTUFOVUFMX1RSQUlMSU5HX1NMQVNIIiwicGF0aG5hbWUiLCJxdWVyeSIsImhhc2giLCJwYXJzZVBhdGgiLCJfX05FWFRfVFJBSUxJTkdfU0xBU0giLCJ0ZXN0IiwicmVtb3ZlVHJhaWxpbmdTbGFzaCIsImVuZHNXaXRoIiwiZGVmYXVsdCIsIl9fZXNNb2R1bGUiLCJhc3NpZ24iLCJtb2R1bGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/normalize-trailing-slash.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/***/ ((module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\n0 && (0);\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    requestIdleCallback: function() {\n        return requestIdleCallback;\n    },\n    cancelIdleCallback: function() {\n        return cancelIdleCallback;\n    }\n});\nconst requestIdleCallback = typeof self !== \"undefined\" && self.requestIdleCallback && self.requestIdleCallback.bind(window) || function(cb) {\n    let start = Date.now();\n    return self.setTimeout(function() {\n        cb({\n            didTimeout: false,\n            timeRemaining: function() {\n                return Math.max(0, 50 - (Date.now() - start));\n            }\n        });\n    }, 1);\n};\nconst cancelIdleCallback = typeof self !== \"undefined\" && self.cancelIdleCallback && self.cancelIdleCallback.bind(window) || function(id) {\n    return clearTimeout(id);\n};\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=request-idle-callback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NsaWVudC9yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQ3pDRyxPQUFPLElBQUk7QUFDZixDQUFDLEVBQUM7QUFDRixLQUFNQyxDQUFBQSxDQUdOO0FBQ0EsU0FBU0csUUFBUUMsTUFBTSxFQUFFQyxHQUFHLEVBQUU7SUFDMUIsSUFBSSxJQUFJQyxRQUFRRCxJQUFJVCxPQUFPQyxjQUFjLENBQUNPLFFBQVFFLE1BQU07UUFDcERDLFlBQVksSUFBSTtRQUNoQkMsS0FBS0gsR0FBRyxDQUFDQyxLQUFLO0lBQ2xCO0FBQ0o7QUFDQUgsUUFBUUwsU0FBUztJQUNiRyxxQkFBcUIsV0FBVztRQUM1QixPQUFPQTtJQUNYO0lBQ0FDLG9CQUFvQixXQUFXO1FBQzNCLE9BQU9BO0lBQ1g7QUFDSjtBQUNBLE1BQU1ELHNCQUFzQixPQUFPUSxTQUFTLGVBQWVBLEtBQUtSLG1CQUFtQixJQUFJUSxLQUFLUixtQkFBbUIsQ0FBQ1MsSUFBSSxDQUFDQyxXQUFXLFNBQVNDLEVBQUUsRUFBRTtJQUN6SSxJQUFJQyxRQUFRQyxLQUFLQyxHQUFHO0lBQ3BCLE9BQU9OLEtBQUtPLFVBQVUsQ0FBQyxXQUFXO1FBQzlCSixHQUFHO1lBQ0NLLFlBQVksS0FBSztZQUNqQkMsZUFBZSxXQUFXO2dCQUN0QixPQUFPQyxLQUFLQyxHQUFHLENBQUMsR0FBRyxLQUFNTixDQUFBQSxLQUFLQyxHQUFHLEtBQUtGLEtBQUk7WUFDOUM7UUFDSjtJQUNKLEdBQUc7QUFDUDtBQUNBLE1BQU1YLHFCQUFxQixPQUFPTyxTQUFTLGVBQWVBLEtBQUtQLGtCQUFrQixJQUFJTyxLQUFLUCxrQkFBa0IsQ0FBQ1EsSUFBSSxDQUFDQyxXQUFXLFNBQVNVLEVBQUUsRUFBRTtJQUN0SSxPQUFPQyxhQUFhRDtBQUN4QjtBQUVBLElBQUksQ0FBQyxPQUFPdkIsUUFBUXlCLE9BQU8sS0FBSyxjQUFlLE9BQU96QixRQUFReUIsT0FBTyxLQUFLLFlBQVl6QixRQUFReUIsT0FBTyxLQUFLLElBQUksS0FBTSxPQUFPekIsUUFBUXlCLE9BQU8sQ0FBQ0MsVUFBVSxLQUFLLGFBQWE7SUFDcks1QixPQUFPQyxjQUFjLENBQUNDLFFBQVF5QixPQUFPLEVBQUUsY0FBYztRQUFFeEIsT0FBTyxJQUFJO0lBQUM7SUFDbkVILE9BQU82QixNQUFNLENBQUMzQixRQUFReUIsT0FBTyxFQUFFekI7SUFDL0JFLE9BQU9GLE9BQU8sR0FBR0EsUUFBUXlCLE9BQU87QUFDbEMsQ0FBQyxDQUVELGlEQUFpRCIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jbGllbnQvcmVxdWVzdC1pZGxlLWNhbGxiYWNrLmpzPzFlMjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG4wICYmIChtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICByZXF1ZXN0SWRsZUNhbGxiYWNrOiBudWxsLFxuICAgIGNhbmNlbElkbGVDYWxsYmFjazogbnVsbFxufSk7XG5mdW5jdGlvbiBfZXhwb3J0KHRhcmdldCwgYWxsKSB7XG4gICAgZm9yKHZhciBuYW1lIGluIGFsbClPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBuYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGdldDogYWxsW25hbWVdXG4gICAgfSk7XG59XG5fZXhwb3J0KGV4cG9ydHMsIHtcbiAgICByZXF1ZXN0SWRsZUNhbGxiYWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RJZGxlQ2FsbGJhY2s7XG4gICAgfSxcbiAgICBjYW5jZWxJZGxlQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY2FuY2VsSWRsZUNhbGxiYWNrO1xuICAgIH1cbn0pO1xuY29uc3QgcmVxdWVzdElkbGVDYWxsYmFjayA9IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYucmVxdWVzdElkbGVDYWxsYmFjayAmJiBzZWxmLnJlcXVlc3RJZGxlQ2FsbGJhY2suYmluZCh3aW5kb3cpIHx8IGZ1bmN0aW9uKGNiKSB7XG4gICAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTtcbiAgICByZXR1cm4gc2VsZi5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBjYih7XG4gICAgICAgICAgICBkaWRUaW1lb3V0OiBmYWxzZSxcbiAgICAgICAgICAgIHRpbWVSZW1haW5pbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCgwLCA1MCAtIChEYXRlLm5vdygpIC0gc3RhcnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSwgMSk7XG59O1xuY29uc3QgY2FuY2VsSWRsZUNhbGxiYWNrID0gdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2sgJiYgc2VsZi5jYW5jZWxJZGxlQ2FsbGJhY2suYmluZCh3aW5kb3cpIHx8IGZ1bmN0aW9uKGlkKSB7XG4gICAgcmV0dXJuIGNsZWFyVGltZW91dChpZCk7XG59O1xuXG5pZiAoKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdmdW5jdGlvbicgfHwgKHR5cGVvZiBleHBvcnRzLmRlZmF1bHQgPT09ICdvYmplY3QnICYmIGV4cG9ydHMuZGVmYXVsdCAhPT0gbnVsbCkpICYmIHR5cGVvZiBleHBvcnRzLmRlZmF1bHQuX19lc01vZHVsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMuZGVmYXVsdCwgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuICBPYmplY3QuYXNzaWduKGV4cG9ydHMuZGVmYXVsdCwgZXhwb3J0cyk7XG4gIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXF1ZXN0LWlkbGUtY2FsbGJhY2suanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwibW9kdWxlIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsIl9leHBvcnQiLCJ0YXJnZXQiLCJhbGwiLCJuYW1lIiwiZW51bWVyYWJsZSIsImdldCIsInNlbGYiLCJiaW5kIiwid2luZG93IiwiY2IiLCJzdGFydCIsIkRhdGUiLCJub3ciLCJzZXRUaW1lb3V0IiwiZGlkVGltZW91dCIsInRpbWVSZW1haW5pbmciLCJNYXRoIiwibWF4IiwiaWQiLCJjbGVhclRpbWVvdXQiLCJkZWZhdWx0IiwiX19lc01vZHVsZSIsImFzc2lnbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/request-idle-callback.js\n");

/***/ }),

/***/ "./node_modules/next/dist/client/use-intersection.js":
/*!***********************************************************!*\
  !*** ./node_modules/next/dist/client/use-intersection.js ***!
  \***********************************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"useIntersection\", ({\n    enumerable: true,\n    get: function() {\n        return useIntersection;\n    }\n}));\nconst _react = __webpack_require__(/*! react */ \"react\");\nconst _requestidlecallback = __webpack_require__(/*! ./request-idle-callback */ \"./node_modules/next/dist/client/request-idle-callback.js\");\nconst hasIntersectionObserver = typeof IntersectionObserver === \"function\";\nconst observers = new Map();\nconst idList = [];\nfunction createObserver(options) {\n    const id = {\n        root: options.root || null,\n        margin: options.rootMargin || \"\"\n    };\n    const existing = idList.find((obj)=>obj.root === id.root && obj.margin === id.margin);\n    let instance;\n    if (existing) {\n        instance = observers.get(existing);\n        if (instance) {\n            return instance;\n        }\n    }\n    const elements = new Map();\n    const observer = new IntersectionObserver((entries)=>{\n        entries.forEach((entry)=>{\n            const callback = elements.get(entry.target);\n            const isVisible = entry.isIntersecting || entry.intersectionRatio > 0;\n            if (callback && isVisible) {\n                callback(isVisible);\n            }\n        });\n    }, options);\n    instance = {\n        id,\n        observer,\n        elements\n    };\n    idList.push(id);\n    observers.set(id, instance);\n    return instance;\n}\nfunction observe(element, callback, options) {\n    const { id , observer , elements  } = createObserver(options);\n    elements.set(element, callback);\n    observer.observe(element);\n    return function unobserve() {\n        elements.delete(element);\n        observer.unobserve(element);\n        // Destroy observer when there's nothing left to watch:\n        if (elements.size === 0) {\n            observer.disconnect();\n            observers.delete(id);\n            const index = idList.findIndex((obj)=>obj.root === id.root && obj.margin === id.margin);\n            if (index > -1) {\n                idList.splice(index, 1);\n            }\n        }\n    };\n}\nfunction useIntersection(param) {\n    let { rootRef , rootMargin , disabled  } = param;\n    const isDisabled = disabled || !hasIntersectionObserver;\n    const [visible, setVisible] = (0, _react.useState)(false);\n    const elementRef = (0, _react.useRef)(null);\n    const setElement = (0, _react.useCallback)((element)=>{\n        elementRef.current = element;\n    }, []);\n    (0, _react.useEffect)(()=>{\n        if (hasIntersectionObserver) {\n            if (isDisabled || visible) return;\n            const element = elementRef.current;\n            if (element && element.tagName) {\n                const unobserve = observe(element, (isVisible)=>isVisible && setVisible(isVisible), {\n                    root: rootRef == null ? void 0 : rootRef.current,\n                    rootMargin\n                });\n                return unobserve;\n            }\n        } else {\n            if (!visible) {\n                const idleCallback = (0, _requestidlecallback.requestIdleCallback)(()=>setVisible(true));\n                return ()=>(0, _requestidlecallback.cancelIdleCallback)(idleCallback);\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        isDisabled,\n        rootMargin,\n        rootRef,\n        visible,\n        elementRef.current\n    ]);\n    const resetVisible = (0, _react.useCallback)(()=>{\n        setVisible(false);\n    }, []);\n    return [\n        setElement,\n        visible,\n        resetVisible\n    ];\n}\nif ((typeof exports.default === \"function\" || typeof exports.default === \"object\" && exports.default !== null) && typeof exports.default.__esModule === \"undefined\") {\n    Object.defineProperty(exports.default, \"__esModule\", {\n        value: true\n    });\n    Object.assign(exports.default, exports);\n    module.exports = exports.default;\n} //# sourceMappingURL=use-intersection.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/next/dist/client/use-intersection.js\n");

/***/ }),

/***/ "./src/codegen/confio/proofs.ts":
/*!**************************************!*\
  !*** ./src/codegen/confio/proofs.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BatchEntry\": () => (/* binding */ BatchEntry),\n/* harmony export */   \"BatchProof\": () => (/* binding */ BatchProof),\n/* harmony export */   \"CommitmentProof\": () => (/* binding */ CommitmentProof),\n/* harmony export */   \"CompressedBatchEntry\": () => (/* binding */ CompressedBatchEntry),\n/* harmony export */   \"CompressedBatchProof\": () => (/* binding */ CompressedBatchProof),\n/* harmony export */   \"CompressedExistenceProof\": () => (/* binding */ CompressedExistenceProof),\n/* harmony export */   \"CompressedNonExistenceProof\": () => (/* binding */ CompressedNonExistenceProof),\n/* harmony export */   \"ExistenceProof\": () => (/* binding */ ExistenceProof),\n/* harmony export */   \"HashOp\": () => (/* binding */ HashOp),\n/* harmony export */   \"HashOpSDKType\": () => (/* binding */ HashOpSDKType),\n/* harmony export */   \"InnerOp\": () => (/* binding */ InnerOp),\n/* harmony export */   \"InnerSpec\": () => (/* binding */ InnerSpec),\n/* harmony export */   \"LeafOp\": () => (/* binding */ LeafOp),\n/* harmony export */   \"LengthOp\": () => (/* binding */ LengthOp),\n/* harmony export */   \"LengthOpSDKType\": () => (/* binding */ LengthOpSDKType),\n/* harmony export */   \"NonExistenceProof\": () => (/* binding */ NonExistenceProof),\n/* harmony export */   \"ProofSpec\": () => (/* binding */ ProofSpec),\n/* harmony export */   \"hashOpFromJSON\": () => (/* binding */ hashOpFromJSON),\n/* harmony export */   \"hashOpToJSON\": () => (/* binding */ hashOpToJSON),\n/* harmony export */   \"lengthOpFromJSON\": () => (/* binding */ lengthOpFromJSON),\n/* harmony export */   \"lengthOpToJSON\": () => (/* binding */ lengthOpToJSON)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n\nvar HashOp;\n(function(HashOp) {\n    HashOp[HashOp[/** NO_HASH - NO_HASH is the default if no data passed. Note this is an illegal argument some places. */ \"NO_HASH\"] = 0] = \"NO_HASH\";\n    HashOp[HashOp[\"SHA256\"] = 1] = \"SHA256\";\n    HashOp[HashOp[\"SHA512\"] = 2] = \"SHA512\";\n    HashOp[HashOp[\"KECCAK\"] = 3] = \"KECCAK\";\n    HashOp[HashOp[\"RIPEMD160\"] = 4] = \"RIPEMD160\";\n    HashOp[HashOp[/** BITCOIN - ripemd160(sha256(x)) */ \"BITCOIN\"] = 5] = \"BITCOIN\";\n    HashOp[HashOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(HashOp || (HashOp = {}));\nconst HashOpSDKType = HashOp;\nfunction hashOpFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"NO_HASH\":\n            return HashOp.NO_HASH;\n        case 1:\n        case \"SHA256\":\n            return HashOp.SHA256;\n        case 2:\n        case \"SHA512\":\n            return HashOp.SHA512;\n        case 3:\n        case \"KECCAK\":\n            return HashOp.KECCAK;\n        case 4:\n        case \"RIPEMD160\":\n            return HashOp.RIPEMD160;\n        case 5:\n        case \"BITCOIN\":\n            return HashOp.BITCOIN;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return HashOp.UNRECOGNIZED;\n    }\n}\nfunction hashOpToJSON(object) {\n    switch(object){\n        case HashOp.NO_HASH:\n            return \"NO_HASH\";\n        case HashOp.SHA256:\n            return \"SHA256\";\n        case HashOp.SHA512:\n            return \"SHA512\";\n        case HashOp.KECCAK:\n            return \"KECCAK\";\n        case HashOp.RIPEMD160:\n            return \"RIPEMD160\";\n        case HashOp.BITCOIN:\n            return \"BITCOIN\";\n        case HashOp.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nvar LengthOp;\n(function(LengthOp) {\n    LengthOp[LengthOp[/** NO_PREFIX - NO_PREFIX don't include any length info */ \"NO_PREFIX\"] = 0] = \"NO_PREFIX\";\n    LengthOp[LengthOp[/** VAR_PROTO - VAR_PROTO uses protobuf (and go-amino) varint encoding of the length */ \"VAR_PROTO\"] = 1] = \"VAR_PROTO\";\n    LengthOp[LengthOp[/** VAR_RLP - VAR_RLP uses rlp int encoding of the length */ \"VAR_RLP\"] = 2] = \"VAR_RLP\";\n    LengthOp[LengthOp[/** FIXED32_BIG - FIXED32_BIG uses big-endian encoding of the length as a 32 bit integer */ \"FIXED32_BIG\"] = 3] = \"FIXED32_BIG\";\n    LengthOp[LengthOp[/** FIXED32_LITTLE - FIXED32_LITTLE uses little-endian encoding of the length as a 32 bit integer */ \"FIXED32_LITTLE\"] = 4] = \"FIXED32_LITTLE\";\n    LengthOp[LengthOp[/** FIXED64_BIG - FIXED64_BIG uses big-endian encoding of the length as a 64 bit integer */ \"FIXED64_BIG\"] = 5] = \"FIXED64_BIG\";\n    LengthOp[LengthOp[/** FIXED64_LITTLE - FIXED64_LITTLE uses little-endian encoding of the length as a 64 bit integer */ \"FIXED64_LITTLE\"] = 6] = \"FIXED64_LITTLE\";\n    LengthOp[LengthOp[/** REQUIRE_32_BYTES - REQUIRE_32_BYTES is like NONE, but will fail if the input is not exactly 32 bytes (sha256 output) */ \"REQUIRE_32_BYTES\"] = 7] = \"REQUIRE_32_BYTES\";\n    LengthOp[LengthOp[/** REQUIRE_64_BYTES - REQUIRE_64_BYTES is like NONE, but will fail if the input is not exactly 64 bytes (sha512 output) */ \"REQUIRE_64_BYTES\"] = 8] = \"REQUIRE_64_BYTES\";\n    LengthOp[LengthOp[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(LengthOp || (LengthOp = {}));\nconst LengthOpSDKType = LengthOp;\nfunction lengthOpFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"NO_PREFIX\":\n            return LengthOp.NO_PREFIX;\n        case 1:\n        case \"VAR_PROTO\":\n            return LengthOp.VAR_PROTO;\n        case 2:\n        case \"VAR_RLP\":\n            return LengthOp.VAR_RLP;\n        case 3:\n        case \"FIXED32_BIG\":\n            return LengthOp.FIXED32_BIG;\n        case 4:\n        case \"FIXED32_LITTLE\":\n            return LengthOp.FIXED32_LITTLE;\n        case 5:\n        case \"FIXED64_BIG\":\n            return LengthOp.FIXED64_BIG;\n        case 6:\n        case \"FIXED64_LITTLE\":\n            return LengthOp.FIXED64_LITTLE;\n        case 7:\n        case \"REQUIRE_32_BYTES\":\n            return LengthOp.REQUIRE_32_BYTES;\n        case 8:\n        case \"REQUIRE_64_BYTES\":\n            return LengthOp.REQUIRE_64_BYTES;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return LengthOp.UNRECOGNIZED;\n    }\n}\nfunction lengthOpToJSON(object) {\n    switch(object){\n        case LengthOp.NO_PREFIX:\n            return \"NO_PREFIX\";\n        case LengthOp.VAR_PROTO:\n            return \"VAR_PROTO\";\n        case LengthOp.VAR_RLP:\n            return \"VAR_RLP\";\n        case LengthOp.FIXED32_BIG:\n            return \"FIXED32_BIG\";\n        case LengthOp.FIXED32_LITTLE:\n            return \"FIXED32_LITTLE\";\n        case LengthOp.FIXED64_BIG:\n            return \"FIXED64_BIG\";\n        case LengthOp.FIXED64_LITTLE:\n            return \"FIXED64_LITTLE\";\n        case LengthOp.REQUIRE_32_BYTES:\n            return \"REQUIRE_32_BYTES\";\n        case LengthOp.REQUIRE_64_BYTES:\n            return \"REQUIRE_64_BYTES\";\n        case LengthOp.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseExistenceProof() {\n    return {\n        key: new Uint8Array(),\n        value: new Uint8Array(),\n        leaf: undefined,\n        path: []\n    };\n}\nconst ExistenceProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        if (message.leaf !== undefined) {\n            LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.path){\n            InnerOp.encode(v, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseExistenceProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.path.push(InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseExistenceProof();\n        message.key = object.key ?? new Uint8Array();\n        message.value = object.value ?? new Uint8Array();\n        message.leaf = object.leaf !== undefined && object.leaf !== null ? LeafOp.fromPartial(object.leaf) : undefined;\n        message.path = object.path?.map((e)=>InnerOp.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseNonExistenceProof() {\n    return {\n        key: new Uint8Array(),\n        left: undefined,\n        right: undefined\n    };\n}\nconst NonExistenceProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.left !== undefined) {\n            ExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.right !== undefined) {\n            ExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseNonExistenceProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseNonExistenceProof();\n        message.key = object.key ?? new Uint8Array();\n        message.left = object.left !== undefined && object.left !== null ? ExistenceProof.fromPartial(object.left) : undefined;\n        message.right = object.right !== undefined && object.right !== null ? ExistenceProof.fromPartial(object.right) : undefined;\n        return message;\n    }\n};\nfunction createBaseCommitmentProof() {\n    return {\n        exist: undefined,\n        nonexist: undefined,\n        batch: undefined,\n        compressed: undefined\n    };\n}\nconst CommitmentProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.exist !== undefined) {\n            ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.nonexist !== undefined) {\n            NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.batch !== undefined) {\n            BatchProof.encode(message.batch, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.compressed !== undefined) {\n            CompressedBatchProof.encode(message.compressed, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCommitmentProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.exist = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.batch = BatchProof.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.compressed = CompressedBatchProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCommitmentProof();\n        message.exist = object.exist !== undefined && object.exist !== null ? ExistenceProof.fromPartial(object.exist) : undefined;\n        message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? NonExistenceProof.fromPartial(object.nonexist) : undefined;\n        message.batch = object.batch !== undefined && object.batch !== null ? BatchProof.fromPartial(object.batch) : undefined;\n        message.compressed = object.compressed !== undefined && object.compressed !== null ? CompressedBatchProof.fromPartial(object.compressed) : undefined;\n        return message;\n    }\n};\nfunction createBaseLeafOp() {\n    return {\n        hash: 0,\n        prehashKey: 0,\n        prehashValue: 0,\n        length: 0,\n        prefix: new Uint8Array()\n    };\n}\nconst LeafOp = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.hash !== 0) {\n            writer.uint32(8).int32(message.hash);\n        }\n        if (message.prehashKey !== 0) {\n            writer.uint32(16).int32(message.prehashKey);\n        }\n        if (message.prehashValue !== 0) {\n            writer.uint32(24).int32(message.prehashValue);\n        }\n        if (message.length !== 0) {\n            writer.uint32(32).int32(message.length);\n        }\n        if (message.prefix.length !== 0) {\n            writer.uint32(42).bytes(message.prefix);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseLeafOp();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prehashKey = reader.int32();\n                    break;\n                case 3:\n                    message.prehashValue = reader.int32();\n                    break;\n                case 4:\n                    message.length = reader.int32();\n                    break;\n                case 5:\n                    message.prefix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseLeafOp();\n        message.hash = object.hash ?? 0;\n        message.prehashKey = object.prehashKey ?? 0;\n        message.prehashValue = object.prehashValue ?? 0;\n        message.length = object.length ?? 0;\n        message.prefix = object.prefix ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseInnerOp() {\n    return {\n        hash: 0,\n        prefix: new Uint8Array(),\n        suffix: new Uint8Array()\n    };\n}\nconst InnerOp = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.hash !== 0) {\n            writer.uint32(8).int32(message.hash);\n        }\n        if (message.prefix.length !== 0) {\n            writer.uint32(18).bytes(message.prefix);\n        }\n        if (message.suffix.length !== 0) {\n            writer.uint32(26).bytes(message.suffix);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInnerOp();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.hash = reader.int32();\n                    break;\n                case 2:\n                    message.prefix = reader.bytes();\n                    break;\n                case 3:\n                    message.suffix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseInnerOp();\n        message.hash = object.hash ?? 0;\n        message.prefix = object.prefix ?? new Uint8Array();\n        message.suffix = object.suffix ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseProofSpec() {\n    return {\n        leafSpec: undefined,\n        innerSpec: undefined,\n        maxDepth: 0,\n        minDepth: 0\n    };\n}\nconst ProofSpec = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.leafSpec !== undefined) {\n            LeafOp.encode(message.leafSpec, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.innerSpec !== undefined) {\n            InnerSpec.encode(message.innerSpec, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.maxDepth !== 0) {\n            writer.uint32(24).int32(message.maxDepth);\n        }\n        if (message.minDepth !== 0) {\n            writer.uint32(32).int32(message.minDepth);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseProofSpec();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.leafSpec = LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.innerSpec = InnerSpec.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.maxDepth = reader.int32();\n                    break;\n                case 4:\n                    message.minDepth = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseProofSpec();\n        message.leafSpec = object.leafSpec !== undefined && object.leafSpec !== null ? LeafOp.fromPartial(object.leafSpec) : undefined;\n        message.innerSpec = object.innerSpec !== undefined && object.innerSpec !== null ? InnerSpec.fromPartial(object.innerSpec) : undefined;\n        message.maxDepth = object.maxDepth ?? 0;\n        message.minDepth = object.minDepth ?? 0;\n        return message;\n    }\n};\nfunction createBaseInnerSpec() {\n    return {\n        childOrder: [],\n        childSize: 0,\n        minPrefixLength: 0,\n        maxPrefixLength: 0,\n        emptyChild: new Uint8Array(),\n        hash: 0\n    };\n}\nconst InnerSpec = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        writer.uint32(10).fork();\n        for (const v of message.childOrder){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        if (message.childSize !== 0) {\n            writer.uint32(16).int32(message.childSize);\n        }\n        if (message.minPrefixLength !== 0) {\n            writer.uint32(24).int32(message.minPrefixLength);\n        }\n        if (message.maxPrefixLength !== 0) {\n            writer.uint32(32).int32(message.maxPrefixLength);\n        }\n        if (message.emptyChild.length !== 0) {\n            writer.uint32(42).bytes(message.emptyChild);\n        }\n        if (message.hash !== 0) {\n            writer.uint32(48).int32(message.hash);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseInnerSpec();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.childOrder.push(reader.int32());\n                        }\n                    } else {\n                        message.childOrder.push(reader.int32());\n                    }\n                    break;\n                case 2:\n                    message.childSize = reader.int32();\n                    break;\n                case 3:\n                    message.minPrefixLength = reader.int32();\n                    break;\n                case 4:\n                    message.maxPrefixLength = reader.int32();\n                    break;\n                case 5:\n                    message.emptyChild = reader.bytes();\n                    break;\n                case 6:\n                    message.hash = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseInnerSpec();\n        message.childOrder = object.childOrder?.map((e)=>e) || [];\n        message.childSize = object.childSize ?? 0;\n        message.minPrefixLength = object.minPrefixLength ?? 0;\n        message.maxPrefixLength = object.maxPrefixLength ?? 0;\n        message.emptyChild = object.emptyChild ?? new Uint8Array();\n        message.hash = object.hash ?? 0;\n        return message;\n    }\n};\nfunction createBaseBatchProof() {\n    return {\n        entries: []\n    };\n}\nconst BatchProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        for (const v of message.entries){\n            BatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseBatchProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.entries.push(BatchEntry.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseBatchProof();\n        message.entries = object.entries?.map((e)=>BatchEntry.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseBatchEntry() {\n    return {\n        exist: undefined,\n        nonexist: undefined\n    };\n}\nconst BatchEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.exist !== undefined) {\n            ExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.nonexist !== undefined) {\n            NonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseBatchEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.exist = ExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = NonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseBatchEntry();\n        message.exist = object.exist !== undefined && object.exist !== null ? ExistenceProof.fromPartial(object.exist) : undefined;\n        message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? NonExistenceProof.fromPartial(object.nonexist) : undefined;\n        return message;\n    }\n};\nfunction createBaseCompressedBatchProof() {\n    return {\n        entries: [],\n        lookupInners: []\n    };\n}\nconst CompressedBatchProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        for (const v of message.entries){\n            CompressedBatchEntry.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        for (const v of message.lookupInners){\n            InnerOp.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompressedBatchProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.entries.push(CompressedBatchEntry.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.lookupInners.push(InnerOp.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCompressedBatchProof();\n        message.entries = object.entries?.map((e)=>CompressedBatchEntry.fromPartial(e)) || [];\n        message.lookupInners = object.lookupInners?.map((e)=>InnerOp.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseCompressedBatchEntry() {\n    return {\n        exist: undefined,\n        nonexist: undefined\n    };\n}\nconst CompressedBatchEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.exist !== undefined) {\n            CompressedExistenceProof.encode(message.exist, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.nonexist !== undefined) {\n            CompressedNonExistenceProof.encode(message.nonexist, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompressedBatchEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.exist = CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.nonexist = CompressedNonExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCompressedBatchEntry();\n        message.exist = object.exist !== undefined && object.exist !== null ? CompressedExistenceProof.fromPartial(object.exist) : undefined;\n        message.nonexist = object.nonexist !== undefined && object.nonexist !== null ? CompressedNonExistenceProof.fromPartial(object.nonexist) : undefined;\n        return message;\n    }\n};\nfunction createBaseCompressedExistenceProof() {\n    return {\n        key: new Uint8Array(),\n        value: new Uint8Array(),\n        leaf: undefined,\n        path: []\n    };\n}\nconst CompressedExistenceProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        if (message.leaf !== undefined) {\n            LeafOp.encode(message.leaf, writer.uint32(26).fork()).ldelim();\n        }\n        writer.uint32(34).fork();\n        for (const v of message.path){\n            writer.int32(v);\n        }\n        writer.ldelim();\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompressedExistenceProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                case 3:\n                    message.leaf = LeafOp.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if ((tag & 7) === 2) {\n                        const end2 = reader.uint32() + reader.pos;\n                        while(reader.pos < end2){\n                            message.path.push(reader.int32());\n                        }\n                    } else {\n                        message.path.push(reader.int32());\n                    }\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCompressedExistenceProof();\n        message.key = object.key ?? new Uint8Array();\n        message.value = object.value ?? new Uint8Array();\n        message.leaf = object.leaf !== undefined && object.leaf !== null ? LeafOp.fromPartial(object.leaf) : undefined;\n        message.path = object.path?.map((e)=>e) || [];\n        return message;\n    }\n};\nfunction createBaseCompressedNonExistenceProof() {\n    return {\n        key: new Uint8Array(),\n        left: undefined,\n        right: undefined\n    };\n}\nconst CompressedNonExistenceProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.left !== undefined) {\n            CompressedExistenceProof.encode(message.left, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.right !== undefined) {\n            CompressedExistenceProof.encode(message.right, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCompressedNonExistenceProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.left = CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.right = CompressedExistenceProof.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCompressedNonExistenceProof();\n        message.key = object.key ?? new Uint8Array();\n        message.left = object.left !== undefined && object.left !== null ? CompressedExistenceProof.fromPartial(object.left) : undefined;\n        message.right = object.right !== undefined && object.right !== null ? CompressedExistenceProof.fromPartial(object.right) : undefined;\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LHlCQUF5QnZELE1BQU0sQ0FBQ0UsUUFBUUEsT0FBT1QsTUFBTTtvQkFDckUsS0FBTTtnQkFDUjtvQkFDRVMsT0FBT08sUUFBUSxDQUFDRixNQUFNO29CQUN0QixLQUFNO1lBQ1Y7UUFDRjtRQUNBLE9BQU9uQjtJQUNUO0lBQ0FzQixhQUFZOUMsTUFBZ0QsRUFBK0I7UUFDekYsTUFBTXdCLFVBQVVzRTtRQUNoQnRFLFFBQVFSLEdBQUcsR0FBR2hCLE9BQU9nQixHQUFHLElBQUksSUFBSUM7UUFDaENPLFFBQVEwQixJQUFJLEdBQUdsRCxPQUFPa0QsSUFBSSxLQUFLOUIsYUFBYXBCLE9BQU9rRCxJQUFJLEtBQUssSUFBSSxHQUFHeUMseUJBQXlCN0MsV0FBVyxDQUFDOUMsT0FBT2tELElBQUksSUFBSTlCLFNBQVM7UUFDaElJLFFBQVEyQixLQUFLLEdBQUduRCxPQUFPbUQsS0FBSyxLQUFLL0IsYUFBYXBCLE9BQU9tRCxLQUFLLEtBQUssSUFBSSxHQUFHd0MseUJBQXlCN0MsV0FBVyxDQUFDOUMsT0FBT21ELEtBQUssSUFBSS9CLFNBQVM7UUFDcEksT0FBT0k7SUFDVDtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL3NyYy9jb2RlZ2VuL2NvbmZpby9wcm9vZnMudHM/ZDVmZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBfbTAgZnJvbSBcInByb3RvYnVmanMvbWluaW1hbFwiO1xuaW1wb3J0IHsgRGVlcFBhcnRpYWwgfSBmcm9tIFwiLi4vaGVscGVyc1wiO1xuZXhwb3J0IGVudW0gSGFzaE9wIHtcbiAgLyoqIE5PX0hBU0ggLSBOT19IQVNIIGlzIHRoZSBkZWZhdWx0IGlmIG5vIGRhdGEgcGFzc2VkLiBOb3RlIHRoaXMgaXMgYW4gaWxsZWdhbCBhcmd1bWVudCBzb21lIHBsYWNlcy4gKi9cbiAgTk9fSEFTSCA9IDAsXG4gIFNIQTI1NiA9IDEsXG4gIFNIQTUxMiA9IDIsXG4gIEtFQ0NBSyA9IDMsXG4gIFJJUEVNRDE2MCA9IDQsXG4gIC8qKiBCSVRDT0lOIC0gcmlwZW1kMTYwKHNoYTI1Nih4KSkgKi9cbiAgQklUQ09JTiA9IDUsXG4gIFVOUkVDT0dOSVpFRCA9IC0xLFxufVxuZXhwb3J0IGNvbnN0IEhhc2hPcFNES1R5cGUgPSBIYXNoT3A7XG5leHBvcnQgZnVuY3Rpb24gaGFzaE9wRnJvbUpTT04ob2JqZWN0OiBhbnkpOiBIYXNoT3Age1xuICBzd2l0Y2ggKG9iamVjdCkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIFwiTk9fSEFTSFwiOlxuICAgICAgcmV0dXJuIEhhc2hPcC5OT19IQVNIO1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIFwiU0hBMjU2XCI6XG4gICAgICByZXR1cm4gSGFzaE9wLlNIQTI1NjtcbiAgICBjYXNlIDI6XG4gICAgY2FzZSBcIlNIQTUxMlwiOlxuICAgICAgcmV0dXJuIEhhc2hPcC5TSEE1MTI7XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgXCJLRUNDQUtcIjpcbiAgICAgIHJldHVybiBIYXNoT3AuS0VDQ0FLO1xuICAgIGNhc2UgNDpcbiAgICBjYXNlIFwiUklQRU1EMTYwXCI6XG4gICAgICByZXR1cm4gSGFzaE9wLlJJUEVNRDE2MDtcbiAgICBjYXNlIDU6XG4gICAgY2FzZSBcIkJJVENPSU5cIjpcbiAgICAgIHJldHVybiBIYXNoT3AuQklUQ09JTjtcbiAgICBjYXNlIC0xOlxuICAgIGNhc2UgXCJVTlJFQ09HTklaRURcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIEhhc2hPcC5VTlJFQ09HTklaRUQ7XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBoYXNoT3BUb0pTT04ob2JqZWN0OiBIYXNoT3ApOiBzdHJpbmcge1xuICBzd2l0Y2ggKG9iamVjdCkge1xuICAgIGNhc2UgSGFzaE9wLk5PX0hBU0g6XG4gICAgICByZXR1cm4gXCJOT19IQVNIXCI7XG4gICAgY2FzZSBIYXNoT3AuU0hBMjU2OlxuICAgICAgcmV0dXJuIFwiU0hBMjU2XCI7XG4gICAgY2FzZSBIYXNoT3AuU0hBNTEyOlxuICAgICAgcmV0dXJuIFwiU0hBNTEyXCI7XG4gICAgY2FzZSBIYXNoT3AuS0VDQ0FLOlxuICAgICAgcmV0dXJuIFwiS0VDQ0FLXCI7XG4gICAgY2FzZSBIYXNoT3AuUklQRU1EMTYwOlxuICAgICAgcmV0dXJuIFwiUklQRU1EMTYwXCI7XG4gICAgY2FzZSBIYXNoT3AuQklUQ09JTjpcbiAgICAgIHJldHVybiBcIkJJVENPSU5cIjtcbiAgICBjYXNlIEhhc2hPcC5VTlJFQ09HTklaRUQ6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBcIlVOUkVDT0dOSVpFRFwiO1xuICB9XG59XG4vKipcbiAqIExlbmd0aE9wIGRlZmluZXMgaG93IHRvIHByb2Nlc3MgdGhlIGtleSBhbmQgdmFsdWUgb2YgdGhlIExlYWZPcFxuICogdG8gaW5jbHVkZSBsZW5ndGggaW5mb3JtYXRpb24uIEFmdGVyIGVuY29kaW5nIHRoZSBsZW5ndGggd2l0aCB0aGUgZ2l2ZW5cbiAqIGFsZ29yaXRobSwgdGhlIGxlbmd0aCB3aWxsIGJlIHByZXBlbmRlZCB0byB0aGUga2V5IGFuZCB2YWx1ZSBieXRlcy5cbiAqIChFYWNoIG9uZSB3aXRoIGl0J3Mgb3duIGVuY29kZWQgbGVuZ3RoKVxuICovXG5leHBvcnQgZW51bSBMZW5ndGhPcCB7XG4gIC8qKiBOT19QUkVGSVggLSBOT19QUkVGSVggZG9uJ3QgaW5jbHVkZSBhbnkgbGVuZ3RoIGluZm8gKi9cbiAgTk9fUFJFRklYID0gMCxcbiAgLyoqIFZBUl9QUk9UTyAtIFZBUl9QUk9UTyB1c2VzIHByb3RvYnVmIChhbmQgZ28tYW1pbm8pIHZhcmludCBlbmNvZGluZyBvZiB0aGUgbGVuZ3RoICovXG4gIFZBUl9QUk9UTyA9IDEsXG4gIC8qKiBWQVJfUkxQIC0gVkFSX1JMUCB1c2VzIHJscCBpbnQgZW5jb2Rpbmcgb2YgdGhlIGxlbmd0aCAqL1xuICBWQVJfUkxQID0gMixcbiAgLyoqIEZJWEVEMzJfQklHIC0gRklYRUQzMl9CSUcgdXNlcyBiaWctZW5kaWFuIGVuY29kaW5nIG9mIHRoZSBsZW5ndGggYXMgYSAzMiBiaXQgaW50ZWdlciAqL1xuICBGSVhFRDMyX0JJRyA9IDMsXG4gIC8qKiBGSVhFRDMyX0xJVFRMRSAtIEZJWEVEMzJfTElUVExFIHVzZXMgbGl0dGxlLWVuZGlhbiBlbmNvZGluZyBvZiB0aGUgbGVuZ3RoIGFzIGEgMzIgYml0IGludGVnZXIgKi9cbiAgRklYRUQzMl9MSVRUTEUgPSA0LFxuICAvKiogRklYRUQ2NF9CSUcgLSBGSVhFRDY0X0JJRyB1c2VzIGJpZy1lbmRpYW4gZW5jb2Rpbmcgb2YgdGhlIGxlbmd0aCBhcyBhIDY0IGJpdCBpbnRlZ2VyICovXG4gIEZJWEVENjRfQklHID0gNSxcbiAgLyoqIEZJWEVENjRfTElUVExFIC0gRklYRUQ2NF9MSVRUTEUgdXNlcyBsaXR0bGUtZW5kaWFuIGVuY29kaW5nIG9mIHRoZSBsZW5ndGggYXMgYSA2NCBiaXQgaW50ZWdlciAqL1xuICBGSVhFRDY0X0xJVFRMRSA9IDYsXG4gIC8qKiBSRVFVSVJFXzMyX0JZVEVTIC0gUkVRVUlSRV8zMl9CWVRFUyBpcyBsaWtlIE5PTkUsIGJ1dCB3aWxsIGZhaWwgaWYgdGhlIGlucHV0IGlzIG5vdCBleGFjdGx5IDMyIGJ5dGVzIChzaGEyNTYgb3V0cHV0KSAqL1xuICBSRVFVSVJFXzMyX0JZVEVTID0gNyxcbiAgLyoqIFJFUVVJUkVfNjRfQllURVMgLSBSRVFVSVJFXzY0X0JZVEVTIGlzIGxpa2UgTk9ORSwgYnV0IHdpbGwgZmFpbCBpZiB0aGUgaW5wdXQgaXMgbm90IGV4YWN0bHkgNjQgYnl0ZXMgKHNoYTUxMiBvdXRwdXQpICovXG4gIFJFUVVJUkVfNjRfQllURVMgPSA4LFxuICBVTlJFQ09HTklaRUQgPSAtMSxcbn1cbmV4cG9ydCBjb25zdCBMZW5ndGhPcFNES1R5cGUgPSBMZW5ndGhPcDtcbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGhPcEZyb21KU09OKG9iamVjdDogYW55KTogTGVuZ3RoT3Age1xuICBzd2l0Y2ggKG9iamVjdCkge1xuICAgIGNhc2UgMDpcbiAgICBjYXNlIFwiTk9fUFJFRklYXCI6XG4gICAgICByZXR1cm4gTGVuZ3RoT3AuTk9fUFJFRklYO1xuICAgIGNhc2UgMTpcbiAgICBjYXNlIFwiVkFSX1BST1RPXCI6XG4gICAgICByZXR1cm4gTGVuZ3RoT3AuVkFSX1BST1RPO1xuICAgIGNhc2UgMjpcbiAgICBjYXNlIFwiVkFSX1JMUFwiOlxuICAgICAgcmV0dXJuIExlbmd0aE9wLlZBUl9STFA7XG4gICAgY2FzZSAzOlxuICAgIGNhc2UgXCJGSVhFRDMyX0JJR1wiOlxuICAgICAgcmV0dXJuIExlbmd0aE9wLkZJWEVEMzJfQklHO1xuICAgIGNhc2UgNDpcbiAgICBjYXNlIFwiRklYRUQzMl9MSVRUTEVcIjpcbiAgICAgIHJldHVybiBMZW5ndGhPcC5GSVhFRDMyX0xJVFRMRTtcbiAgICBjYXNlIDU6XG4gICAgY2FzZSBcIkZJWEVENjRfQklHXCI6XG4gICAgICByZXR1cm4gTGVuZ3RoT3AuRklYRUQ2NF9CSUc7XG4gICAgY2FzZSA2OlxuICAgIGNhc2UgXCJGSVhFRDY0X0xJVFRMRVwiOlxuICAgICAgcmV0dXJuIExlbmd0aE9wLkZJWEVENjRfTElUVExFO1xuICAgIGNhc2UgNzpcbiAgICBjYXNlIFwiUkVRVUlSRV8zMl9CWVRFU1wiOlxuICAgICAgcmV0dXJuIExlbmd0aE9wLlJFUVVJUkVfMzJfQllURVM7XG4gICAgY2FzZSA4OlxuICAgIGNhc2UgXCJSRVFVSVJFXzY0X0JZVEVTXCI6XG4gICAgICByZXR1cm4gTGVuZ3RoT3AuUkVRVUlSRV82NF9CWVRFUztcbiAgICBjYXNlIC0xOlxuICAgIGNhc2UgXCJVTlJFQ09HTklaRURcIjpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIExlbmd0aE9wLlVOUkVDT0dOSVpFRDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGxlbmd0aE9wVG9KU09OKG9iamVjdDogTGVuZ3RoT3ApOiBzdHJpbmcge1xuICBzd2l0Y2ggKG9iamVjdCkge1xuICAgIGNhc2UgTGVuZ3RoT3AuTk9fUFJFRklYOlxuICAgICAgcmV0dXJuIFwiTk9fUFJFRklYXCI7XG4gICAgY2FzZSBMZW5ndGhPcC5WQVJfUFJPVE86XG4gICAgICByZXR1cm4gXCJWQVJfUFJPVE9cIjtcbiAgICBjYXNlIExlbmd0aE9wLlZBUl9STFA6XG4gICAgICByZXR1cm4gXCJWQVJfUkxQXCI7XG4gICAgY2FzZSBMZW5ndGhPcC5GSVhFRDMyX0JJRzpcbiAgICAgIHJldHVybiBcIkZJWEVEMzJfQklHXCI7XG4gICAgY2FzZSBMZW5ndGhPcC5GSVhFRDMyX0xJVFRMRTpcbiAgICAgIHJldHVybiBcIkZJWEVEMzJfTElUVExFXCI7XG4gICAgY2FzZSBMZW5ndGhPcC5GSVhFRDY0X0JJRzpcbiAgICAgIHJldHVybiBcIkZJWEVENjRfQklHXCI7XG4gICAgY2FzZSBMZW5ndGhPcC5GSVhFRDY0X0xJVFRMRTpcbiAgICAgIHJldHVybiBcIkZJWEVENjRfTElUVExFXCI7XG4gICAgY2FzZSBMZW5ndGhPcC5SRVFVSVJFXzMyX0JZVEVTOlxuICAgICAgcmV0dXJuIFwiUkVRVUlSRV8zMl9CWVRFU1wiO1xuICAgIGNhc2UgTGVuZ3RoT3AuUkVRVUlSRV82NF9CWVRFUzpcbiAgICAgIHJldHVybiBcIlJFUVVJUkVfNjRfQllURVNcIjtcbiAgICBjYXNlIExlbmd0aE9wLlVOUkVDT0dOSVpFRDpcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiVU5SRUNPR05JWkVEXCI7XG4gIH1cbn1cbi8qKlxuICogRXhpc3RlbmNlUHJvb2YgdGFrZXMgYSBrZXkgYW5kIGEgdmFsdWUgYW5kIGEgc2V0IG9mIHN0ZXBzIHRvIHBlcmZvcm0gb24gaXQuXG4gKiBUaGUgcmVzdWx0IG9mIHBlZm9ybWluZyBhbGwgdGhlc2Ugc3RlcHMgd2lsbCBwcm92aWRlIGEgXCJyb290IGhhc2hcIiwgd2hpY2ggY2FuXG4gKiBiZSBjb21wYXJlZCB0byB0aGUgdmFsdWUgaW4gYSBoZWFkZXIuXG4gKiBcbiAqIFNpbmNlIGl0IGlzIGNvbXB1dGF0aW9uYWxseSBpbmZlYXNpYmxlIHRvIHByb2R1Y2UgYSBoYXNoIGNvbGxpc3Npb24gZm9yIGFueSBvZiB0aGUgdXNlZFxuICogY3J5cHRvZ3JhcGhpYyBoYXNoIGZ1bmN0aW9ucywgaWYgc29tZW9uZSBjYW4gcHJvdmlkZSBhIHNlcmllcyBvZiBvcGVyYXRpb25zIHRvIHRyYW5zZm9ybVxuICogYSBnaXZlbiBrZXkgYW5kIHZhbHVlIGludG8gYSByb290IGhhc2ggdGhhdCBtYXRjaGVzIHNvbWUgdHJ1c3RlZCByb290LCB0aGVzZSBrZXkgYW5kIHZhbHVlc1xuICogbXVzdCBiZSBpbiB0aGUgcmVmZXJlbmNlZCBtZXJrbGUgdHJlZS5cbiAqIFxuICogVGhlIG9ubHkgcG9zc2libGUgaXNzdWUgaXMgbWFsaWFibGl0eSBpbiBMZWFmT3AsIHN1Y2ggYXMgcHJvdmlkaW5nIGV4dHJhIHByZWZpeCBkYXRhLFxuICogd2hpY2ggc2hvdWxkIGJlIGNvbnRyb2xsZWQgYnkgYSBzcGVjLiBFZy4gd2l0aCBsZW5ndGhPcCBhcyBOT05FLFxuICogcHJlZml4ID0gRk9PLCBrZXkgPSBCQVIsIHZhbHVlID0gQ0hPSUNFXG4gKiBhbmRcbiAqIHByZWZpeCA9IEYsIGtleSA9IE9PQkFSLCB2YWx1ZSA9IENIT0lDRVxuICogd291bGQgcHJvZHVjZSB0aGUgc2FtZSB2YWx1ZS5cbiAqIFxuICogV2l0aCBMZW5ndGhPcCB0aGlzIGlzIHRyaWNrZXIgYnV0IG5vdCBpbXBvc3NpYmxlLiBXaGljaCBpcyB3aHkgdGhlIFwibGVhZlByZWZpeEVxdWFsXCIgZmllbGRcbiAqIGluIHRoZSBQcm9vZlNwZWMgaXMgdmFsdWFibGUgdG8gcHJldmVudCB0aGlzIG11dGFiaWxpdHkuIEFuZCB3aHkgYWxsIHRyZWVzIHNob3VsZFxuICogbGVuZ3RoLXByZWZpeCB0aGUgZGF0YSBiZWZvcmUgaGFzaGluZyBpdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeGlzdGVuY2VQcm9vZiB7XG4gIGtleTogVWludDhBcnJheTtcbiAgdmFsdWU6IFVpbnQ4QXJyYXk7XG4gIGxlYWY/OiBMZWFmT3A7XG4gIHBhdGg6IElubmVyT3BbXTtcbn1cbi8qKlxuICogRXhpc3RlbmNlUHJvb2YgdGFrZXMgYSBrZXkgYW5kIGEgdmFsdWUgYW5kIGEgc2V0IG9mIHN0ZXBzIHRvIHBlcmZvcm0gb24gaXQuXG4gKiBUaGUgcmVzdWx0IG9mIHBlZm9ybWluZyBhbGwgdGhlc2Ugc3RlcHMgd2lsbCBwcm92aWRlIGEgXCJyb290IGhhc2hcIiwgd2hpY2ggY2FuXG4gKiBiZSBjb21wYXJlZCB0byB0aGUgdmFsdWUgaW4gYSBoZWFkZXIuXG4gKiBcbiAqIFNpbmNlIGl0IGlzIGNvbXB1dGF0aW9uYWxseSBpbmZlYXNpYmxlIHRvIHByb2R1Y2UgYSBoYXNoIGNvbGxpc3Npb24gZm9yIGFueSBvZiB0aGUgdXNlZFxuICogY3J5cHRvZ3JhcGhpYyBoYXNoIGZ1bmN0aW9ucywgaWYgc29tZW9uZSBjYW4gcHJvdmlkZSBhIHNlcmllcyBvZiBvcGVyYXRpb25zIHRvIHRyYW5zZm9ybVxuICogYSBnaXZlbiBrZXkgYW5kIHZhbHVlIGludG8gYSByb290IGhhc2ggdGhhdCBtYXRjaGVzIHNvbWUgdHJ1c3RlZCByb290LCB0aGVzZSBrZXkgYW5kIHZhbHVlc1xuICogbXVzdCBiZSBpbiB0aGUgcmVmZXJlbmNlZCBtZXJrbGUgdHJlZS5cbiAqIFxuICogVGhlIG9ubHkgcG9zc2libGUgaXNzdWUgaXMgbWFsaWFibGl0eSBpbiBMZWFmT3AsIHN1Y2ggYXMgcHJvdmlkaW5nIGV4dHJhIHByZWZpeCBkYXRhLFxuICogd2hpY2ggc2hvdWxkIGJlIGNvbnRyb2xsZWQgYnkgYSBzcGVjLiBFZy4gd2l0aCBsZW5ndGhPcCBhcyBOT05FLFxuICogcHJlZml4ID0gRk9PLCBrZXkgPSBCQVIsIHZhbHVlID0gQ0hPSUNFXG4gKiBhbmRcbiAqIHByZWZpeCA9IEYsIGtleSA9IE9PQkFSLCB2YWx1ZSA9IENIT0lDRVxuICogd291bGQgcHJvZHVjZSB0aGUgc2FtZSB2YWx1ZS5cbiAqIFxuICogV2l0aCBMZW5ndGhPcCB0aGlzIGlzIHRyaWNrZXIgYnV0IG5vdCBpbXBvc3NpYmxlLiBXaGljaCBpcyB3aHkgdGhlIFwibGVhZlByZWZpeEVxdWFsXCIgZmllbGRcbiAqIGluIHRoZSBQcm9vZlNwZWMgaXMgdmFsdWFibGUgdG8gcHJldmVudCB0aGlzIG11dGFiaWxpdHkuIEFuZCB3aHkgYWxsIHRyZWVzIHNob3VsZFxuICogbGVuZ3RoLXByZWZpeCB0aGUgZGF0YSBiZWZvcmUgaGFzaGluZyBpdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeGlzdGVuY2VQcm9vZlNES1R5cGUge1xuICBrZXk6IFVpbnQ4QXJyYXk7XG4gIHZhbHVlOiBVaW50OEFycmF5O1xuICBsZWFmPzogTGVhZk9wU0RLVHlwZTtcbiAgcGF0aDogSW5uZXJPcFNES1R5cGVbXTtcbn1cbi8qKlxuICogTm9uRXhpc3RlbmNlUHJvb2YgdGFrZXMgYSBwcm9vZiBvZiB0d28gbmVpZ2hib3JzLCBvbmUgbGVmdCBvZiB0aGUgZGVzaXJlZCBrZXksXG4gKiBvbmUgcmlnaHQgb2YgdGhlIGRlc2lyZWQga2V5LiBJZiBib3RoIHByb29mcyBhcmUgdmFsaWQgQU5EIHRoZXkgYXJlIG5laWdoYm9ycyxcbiAqIHRoZW4gdGhlcmUgaXMgbm8gdmFsaWQgcHJvb2YgZm9yIHRoZSBnaXZlbiBrZXkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm9uRXhpc3RlbmNlUHJvb2Yge1xuICAvKiogVE9ETzogcmVtb3ZlIHRoaXMgYXMgdW5uZWNlc3Nhcnk/Pz8gd2UgcHJvdmUgYSByYW5nZSAqL1xuICBrZXk6IFVpbnQ4QXJyYXk7XG4gIGxlZnQ/OiBFeGlzdGVuY2VQcm9vZjtcbiAgcmlnaHQ/OiBFeGlzdGVuY2VQcm9vZjtcbn1cbi8qKlxuICogTm9uRXhpc3RlbmNlUHJvb2YgdGFrZXMgYSBwcm9vZiBvZiB0d28gbmVpZ2hib3JzLCBvbmUgbGVmdCBvZiB0aGUgZGVzaXJlZCBrZXksXG4gKiBvbmUgcmlnaHQgb2YgdGhlIGRlc2lyZWQga2V5LiBJZiBib3RoIHByb29mcyBhcmUgdmFsaWQgQU5EIHRoZXkgYXJlIG5laWdoYm9ycyxcbiAqIHRoZW4gdGhlcmUgaXMgbm8gdmFsaWQgcHJvb2YgZm9yIHRoZSBnaXZlbiBrZXkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm9uRXhpc3RlbmNlUHJvb2ZTREtUeXBlIHtcbiAga2V5OiBVaW50OEFycmF5O1xuICBsZWZ0PzogRXhpc3RlbmNlUHJvb2ZTREtUeXBlO1xuICByaWdodD86IEV4aXN0ZW5jZVByb29mU0RLVHlwZTtcbn1cbi8qKiBDb21taXRtZW50UHJvb2YgaXMgZWl0aGVyIGFuIEV4aXN0ZW5jZVByb29mIG9yIGEgTm9uRXhpc3RlbmNlUHJvb2YsIG9yIGEgQmF0Y2ggb2Ygc3VjaCBtZXNzYWdlcyAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21taXRtZW50UHJvb2Yge1xuICBleGlzdD86IEV4aXN0ZW5jZVByb29mO1xuICBub25leGlzdD86IE5vbkV4aXN0ZW5jZVByb29mO1xuICBiYXRjaD86IEJhdGNoUHJvb2Y7XG4gIGNvbXByZXNzZWQ/OiBDb21wcmVzc2VkQmF0Y2hQcm9vZjtcbn1cbi8qKiBDb21taXRtZW50UHJvb2YgaXMgZWl0aGVyIGFuIEV4aXN0ZW5jZVByb29mIG9yIGEgTm9uRXhpc3RlbmNlUHJvb2YsIG9yIGEgQmF0Y2ggb2Ygc3VjaCBtZXNzYWdlcyAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21taXRtZW50UHJvb2ZTREtUeXBlIHtcbiAgZXhpc3Q/OiBFeGlzdGVuY2VQcm9vZlNES1R5cGU7XG4gIG5vbmV4aXN0PzogTm9uRXhpc3RlbmNlUHJvb2ZTREtUeXBlO1xuICBiYXRjaD86IEJhdGNoUHJvb2ZTREtUeXBlO1xuICBjb21wcmVzc2VkPzogQ29tcHJlc3NlZEJhdGNoUHJvb2ZTREtUeXBlO1xufVxuLyoqXG4gKiBMZWFmT3AgcmVwcmVzZW50cyB0aGUgcmF3IGtleS12YWx1ZSBkYXRhIHdlIHdpc2ggdG8gcHJvdmUsIGFuZFxuICogbXVzdCBiZSBmbGV4aWJsZSB0byByZXByZXNlbnQgdGhlIGludGVybmFsIHRyYW5zZm9ybWF0aW9uIGZyb21cbiAqIHRoZSBvcmlnaW5hbCBrZXktdmFsdWUgcGFpcnMgaW50byB0aGUgYmFzaXMgaGFzaCwgZm9yIG1hbnkgZXhpc3RpbmdcbiAqIG1lcmtsZSB0cmVlcy5cbiAqIFxuICoga2V5IGFuZCB2YWx1ZSBhcmUgcGFzc2VkIGluLiBTbyB0aGF0IHRoZSBzaWduYXR1cmUgb2YgdGhpcyBvcGVyYXRpb24gaXM6XG4gKiBsZWFmT3Aoa2V5LCB2YWx1ZSkgLT4gb3V0cHV0XG4gKiBcbiAqIFRvIHByb2Nlc3MgdGhpcywgZmlyc3QgcHJlaGFzaCB0aGUga2V5cyBhbmQgdmFsdWVzIGlmIG5lZWRlZCAoQU5ZIG1lYW5zIG5vIGhhc2ggaW4gdGhpcyBjYXNlKTpcbiAqIGhrZXkgPSBwcmVoYXNoS2V5KGtleSlcbiAqIGh2YWx1ZSA9IHByZWhhc2hWYWx1ZSh2YWx1ZSlcbiAqIFxuICogVGhlbiBjb21iaW5lIHRoZSBieXRlcywgYW5kIGhhc2ggaXRcbiAqIG91dHB1dCA9IGhhc2gocHJlZml4IHx8IGxlbmd0aChoa2V5KSB8fCBoa2V5IHx8IGxlbmd0aChodmFsdWUpIHx8IGh2YWx1ZSlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMZWFmT3Age1xuICBoYXNoOiBIYXNoT3A7XG4gIHByZWhhc2hLZXk6IEhhc2hPcDtcbiAgcHJlaGFzaFZhbHVlOiBIYXNoT3A7XG4gIGxlbmd0aDogTGVuZ3RoT3A7XG4gIC8qKlxuICAgKiBwcmVmaXggaXMgYSBmaXhlZCBieXRlcyB0aGF0IG1heSBvcHRpb25hbGx5IGJlIGluY2x1ZGVkIGF0IHRoZSBiZWdpbm5pbmcgdG8gZGlmZmVyZW50aWF0ZVxuICAgKiBhIGxlYWYgbm9kZSBmcm9tIGFuIGlubmVyIG5vZGUuXG4gICAqL1xuICBwcmVmaXg6IFVpbnQ4QXJyYXk7XG59XG4vKipcbiAqIExlYWZPcCByZXByZXNlbnRzIHRoZSByYXcga2V5LXZhbHVlIGRhdGEgd2Ugd2lzaCB0byBwcm92ZSwgYW5kXG4gKiBtdXN0IGJlIGZsZXhpYmxlIHRvIHJlcHJlc2VudCB0aGUgaW50ZXJuYWwgdHJhbnNmb3JtYXRpb24gZnJvbVxuICogdGhlIG9yaWdpbmFsIGtleS12YWx1ZSBwYWlycyBpbnRvIHRoZSBiYXNpcyBoYXNoLCBmb3IgbWFueSBleGlzdGluZ1xuICogbWVya2xlIHRyZWVzLlxuICogXG4gKiBrZXkgYW5kIHZhbHVlIGFyZSBwYXNzZWQgaW4uIFNvIHRoYXQgdGhlIHNpZ25hdHVyZSBvZiB0aGlzIG9wZXJhdGlvbiBpczpcbiAqIGxlYWZPcChrZXksIHZhbHVlKSAtPiBvdXRwdXRcbiAqIFxuICogVG8gcHJvY2VzcyB0aGlzLCBmaXJzdCBwcmVoYXNoIHRoZSBrZXlzIGFuZCB2YWx1ZXMgaWYgbmVlZGVkIChBTlkgbWVhbnMgbm8gaGFzaCBpbiB0aGlzIGNhc2UpOlxuICogaGtleSA9IHByZWhhc2hLZXkoa2V5KVxuICogaHZhbHVlID0gcHJlaGFzaFZhbHVlKHZhbHVlKVxuICogXG4gKiBUaGVuIGNvbWJpbmUgdGhlIGJ5dGVzLCBhbmQgaGFzaCBpdFxuICogb3V0cHV0ID0gaGFzaChwcmVmaXggfHwgbGVuZ3RoKGhrZXkpIHx8IGhrZXkgfHwgbGVuZ3RoKGh2YWx1ZSkgfHwgaHZhbHVlKVxuICovXG5leHBvcnQgaW50ZXJmYWNlIExlYWZPcFNES1R5cGUge1xuICBoYXNoOiBIYXNoT3A7XG4gIHByZWhhc2hfa2V5OiBIYXNoT3A7XG4gIHByZWhhc2hfdmFsdWU6IEhhc2hPcDtcbiAgbGVuZ3RoOiBMZW5ndGhPcDtcbiAgcHJlZml4OiBVaW50OEFycmF5O1xufVxuLyoqXG4gKiBJbm5lck9wIHJlcHJlc2VudHMgYSBtZXJrbGUtcHJvb2Ygc3RlcCB0aGF0IGlzIG5vdCBhIGxlYWYuXG4gKiBJdCByZXByZXNlbnRzIGNvbmNhdGVuYXRpbmcgdHdvIGNoaWxkcmVuIGFuZCBoYXNoaW5nIHRoZW0gdG8gcHJvdmlkZSB0aGUgbmV4dCByZXN1bHQuXG4gKiBcbiAqIFRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgaXMgcGFzc2VkIGluLCBzbyB0aGUgc2lnbmF0dXJlIG9mIHRoaXMgb3AgaXM6XG4gKiBpbm5lck9wKGNoaWxkKSAtPiBvdXRwdXRcbiAqIFxuICogVGhlIHJlc3VsdCBvZiBhcHBseWluZyBJbm5lck9wIHNob3VsZCBiZTpcbiAqIG91dHB1dCA9IG9wLmhhc2gob3AucHJlZml4IHx8IGNoaWxkIHx8IG9wLnN1ZmZpeClcbiAqIFxuICogd2hlcmUgdGhlIHx8IG9wZXJhdG9yIGlzIGNvbmNhdGVuYXRpb24gb2YgYmluYXJ5IGRhdGEsXG4gKiBhbmQgY2hpbGQgaXMgdGhlIHJlc3VsdCBvZiBoYXNoaW5nIGFsbCB0aGUgdHJlZSBiZWxvdyB0aGlzIHN0ZXAuXG4gKiBcbiAqIEFueSBzcGVjaWFsIGRhdGEsIGxpa2UgcHJlcGVuZGluZyBjaGlsZCB3aXRoIHRoZSBsZW5ndGgsIG9yIHByZXBlbmRpbmcgdGhlIGVudGlyZSBvcGVyYXRpb24gd2l0aFxuICogc29tZSB2YWx1ZSB0byBkaWZmZXJlbnRpYXRlIGZyb20gbGVhZiBub2Rlcywgc2hvdWxkIGJlIGluY2x1ZGVkIGluIHByZWZpeCBhbmQgc3VmZml4LlxuICogSWYgZWl0aGVyIG9mIHByZWZpeCBvciBzdWZmaXggaXMgZW1wdHksIHdlIGp1c3QgdHJlYXQgaXQgYXMgYW4gZW1wdHkgc3RyaW5nXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5uZXJPcCB7XG4gIGhhc2g6IEhhc2hPcDtcbiAgcHJlZml4OiBVaW50OEFycmF5O1xuICBzdWZmaXg6IFVpbnQ4QXJyYXk7XG59XG4vKipcbiAqIElubmVyT3AgcmVwcmVzZW50cyBhIG1lcmtsZS1wcm9vZiBzdGVwIHRoYXQgaXMgbm90IGEgbGVhZi5cbiAqIEl0IHJlcHJlc2VudHMgY29uY2F0ZW5hdGluZyB0d28gY2hpbGRyZW4gYW5kIGhhc2hpbmcgdGhlbSB0byBwcm92aWRlIHRoZSBuZXh0IHJlc3VsdC5cbiAqIFxuICogVGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBpcyBwYXNzZWQgaW4sIHNvIHRoZSBzaWduYXR1cmUgb2YgdGhpcyBvcCBpczpcbiAqIGlubmVyT3AoY2hpbGQpIC0+IG91dHB1dFxuICogXG4gKiBUaGUgcmVzdWx0IG9mIGFwcGx5aW5nIElubmVyT3Agc2hvdWxkIGJlOlxuICogb3V0cHV0ID0gb3AuaGFzaChvcC5wcmVmaXggfHwgY2hpbGQgfHwgb3Auc3VmZml4KVxuICogXG4gKiB3aGVyZSB0aGUgfHwgb3BlcmF0b3IgaXMgY29uY2F0ZW5hdGlvbiBvZiBiaW5hcnkgZGF0YSxcbiAqIGFuZCBjaGlsZCBpcyB0aGUgcmVzdWx0IG9mIGhhc2hpbmcgYWxsIHRoZSB0cmVlIGJlbG93IHRoaXMgc3RlcC5cbiAqIFxuICogQW55IHNwZWNpYWwgZGF0YSwgbGlrZSBwcmVwZW5kaW5nIGNoaWxkIHdpdGggdGhlIGxlbmd0aCwgb3IgcHJlcGVuZGluZyB0aGUgZW50aXJlIG9wZXJhdGlvbiB3aXRoXG4gKiBzb21lIHZhbHVlIHRvIGRpZmZlcmVudGlhdGUgZnJvbSBsZWFmIG5vZGVzLCBzaG91bGQgYmUgaW5jbHVkZWQgaW4gcHJlZml4IGFuZCBzdWZmaXguXG4gKiBJZiBlaXRoZXIgb2YgcHJlZml4IG9yIHN1ZmZpeCBpcyBlbXB0eSwgd2UganVzdCB0cmVhdCBpdCBhcyBhbiBlbXB0eSBzdHJpbmdcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbm5lck9wU0RLVHlwZSB7XG4gIGhhc2g6IEhhc2hPcDtcbiAgcHJlZml4OiBVaW50OEFycmF5O1xuICBzdWZmaXg6IFVpbnQ4QXJyYXk7XG59XG4vKipcbiAqIFByb29mU3BlYyBkZWZpbmVzIHdoYXQgdGhlIGV4cGVjdGVkIHBhcmFtZXRlcnMgYXJlIGZvciBhIGdpdmVuIHByb29mIHR5cGUuXG4gKiBUaGlzIGNhbiBiZSBzdG9yZWQgaW4gdGhlIGNsaWVudCBhbmQgdXNlZCB0byB2YWxpZGF0ZSBhbnkgaW5jb21pbmcgcHJvb2ZzLlxuICogXG4gKiB2ZXJpZnkoUHJvb2ZTcGVjLCBQcm9vZikgLT4gUHJvb2YgfCBFcnJvclxuICogXG4gKiBBcyBkZW1vbnN0cmF0ZWQgaW4gdGVzdHMsIGlmIHdlIGRvbid0IGZpeCB0aGUgYWxnb3JpdGhtIHVzZWQgdG8gY2FsY3VsYXRlIHRoZVxuICogTGVhZkhhc2ggZm9yIGEgZ2l2ZW4gdHJlZSwgdGhlcmUgYXJlIG1hbnkgcG9zc2libGUga2V5LXZhbHVlIHBhaXJzIHRoYXQgY2FuXG4gKiBnZW5lcmF0ZSBhIGdpdmVuIGhhc2ggKGJ5IGludGVycHJldHRpbmcgdGhlIHByZWltYWdlIGRpZmZlcmVudGx5KS5cbiAqIFdlIG5lZWQgdGhpcyBmb3IgcHJvcGVyIHNlY3VyaXR5LCByZXF1aXJlcyBjbGllbnQga25vd3MgYSBwcmlvcmkgd2hhdFxuICogdHJlZSBmb3JtYXQgc2VydmVyIHVzZXMuIEJ1dCBub3QgaW4gY29kZSwgcmF0aGVyIGEgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvb2ZTcGVjIHtcbiAgLyoqXG4gICAqIGFueSBmaWVsZCBpbiB0aGUgRXhpc3RlbmNlUHJvb2YgbXVzdCBiZSB0aGUgc2FtZSBhcyBpbiB0aGlzIHNwZWMuXG4gICAqIGV4Y2VwdCBQcmVmaXgsIHdoaWNoIGlzIGp1c3QgdGhlIGZpcnN0IGJ5dGVzIG9mIHByZWZpeCAoc3BlYyBjYW4gYmUgbG9uZ2VyKVxuICAgKi9cbiAgbGVhZlNwZWM/OiBMZWFmT3A7XG4gIGlubmVyU3BlYz86IElubmVyU3BlYztcbiAgLyoqIG1heF9kZXB0aCAoaWYgPiAwKSBpcyB0aGUgbWF4aW11bSBudW1iZXIgb2YgSW5uZXJPcHMgYWxsb3dlZCAobWFpbmx5IGZvciBmaXhlZC1kZXB0aCB0cmllcykgKi9cbiAgbWF4RGVwdGg6IG51bWJlcjtcbiAgLyoqIG1pbl9kZXB0aCAoaWYgPiAwKSBpcyB0aGUgbWluaW11bSBudW1iZXIgb2YgSW5uZXJPcHMgYWxsb3dlZCAobWFpbmx5IGZvciBmaXhlZC1kZXB0aCB0cmllcykgKi9cbiAgbWluRGVwdGg6IG51bWJlcjtcbn1cbi8qKlxuICogUHJvb2ZTcGVjIGRlZmluZXMgd2hhdCB0aGUgZXhwZWN0ZWQgcGFyYW1ldGVycyBhcmUgZm9yIGEgZ2l2ZW4gcHJvb2YgdHlwZS5cbiAqIFRoaXMgY2FuIGJlIHN0b3JlZCBpbiB0aGUgY2xpZW50IGFuZCB1c2VkIHRvIHZhbGlkYXRlIGFueSBpbmNvbWluZyBwcm9vZnMuXG4gKiBcbiAqIHZlcmlmeShQcm9vZlNwZWMsIFByb29mKSAtPiBQcm9vZiB8IEVycm9yXG4gKiBcbiAqIEFzIGRlbW9uc3RyYXRlZCBpbiB0ZXN0cywgaWYgd2UgZG9uJ3QgZml4IHRoZSBhbGdvcml0aG0gdXNlZCB0byBjYWxjdWxhdGUgdGhlXG4gKiBMZWFmSGFzaCBmb3IgYSBnaXZlbiB0cmVlLCB0aGVyZSBhcmUgbWFueSBwb3NzaWJsZSBrZXktdmFsdWUgcGFpcnMgdGhhdCBjYW5cbiAqIGdlbmVyYXRlIGEgZ2l2ZW4gaGFzaCAoYnkgaW50ZXJwcmV0dGluZyB0aGUgcHJlaW1hZ2UgZGlmZmVyZW50bHkpLlxuICogV2UgbmVlZCB0aGlzIGZvciBwcm9wZXIgc2VjdXJpdHksIHJlcXVpcmVzIGNsaWVudCBrbm93cyBhIHByaW9yaSB3aGF0XG4gKiB0cmVlIGZvcm1hdCBzZXJ2ZXIgdXNlcy4gQnV0IG5vdCBpbiBjb2RlLCByYXRoZXIgYSBjb25maWd1cmF0aW9uIG9iamVjdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9vZlNwZWNTREtUeXBlIHtcbiAgbGVhZl9zcGVjPzogTGVhZk9wU0RLVHlwZTtcbiAgaW5uZXJfc3BlYz86IElubmVyU3BlY1NES1R5cGU7XG4gIG1heF9kZXB0aDogbnVtYmVyO1xuICBtaW5fZGVwdGg6IG51bWJlcjtcbn1cbi8qKlxuICogSW5uZXJTcGVjIGNvbnRhaW5zIGFsbCBzdG9yZS1zcGVjaWZpYyBzdHJ1Y3R1cmUgaW5mbyB0byBkZXRlcm1pbmUgaWYgdHdvIHByb29mcyBmcm9tIGFcbiAqIGdpdmVuIHN0b3JlIGFyZSBuZWlnaGJvcnMuXG4gKiBcbiAqIFRoaXMgZW5hYmxlczpcbiAqIFxuICogaXNMZWZ0TW9zdChzcGVjOiBJbm5lclNwZWMsIG9wOiBJbm5lck9wKVxuICogaXNSaWdodE1vc3Qoc3BlYzogSW5uZXJTcGVjLCBvcDogSW5uZXJPcClcbiAqIGlzTGVmdE5laWdoYm9yKHNwZWM6IElubmVyU3BlYywgbGVmdDogSW5uZXJPcCwgcmlnaHQ6IElubmVyT3ApXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSW5uZXJTcGVjIHtcbiAgLyoqXG4gICAqIENoaWxkIG9yZGVyIGlzIHRoZSBvcmRlcmluZyBvZiB0aGUgY2hpbGRyZW4gbm9kZSwgbXVzdCBjb3VudCBmcm9tIDBcbiAgICogaWF2bCB0cmVlIGlzIFswLCAxXSAobGVmdCB0aGVuIHJpZ2h0KVxuICAgKiBtZXJrIGlzIFswLCAyLCAxXSAobGVmdCwgcmlnaHQsIGhlcmUpXG4gICAqL1xuICBjaGlsZE9yZGVyOiBudW1iZXJbXTtcbiAgY2hpbGRTaXplOiBudW1iZXI7XG4gIG1pblByZWZpeExlbmd0aDogbnVtYmVyO1xuICBtYXhQcmVmaXhMZW5ndGg6IG51bWJlcjtcbiAgLyoqIGVtcHR5IGNoaWxkIGlzIHRoZSBwcmVoYXNoIGltYWdlIHRoYXQgaXMgdXNlZCB3aGVuIG9uZSBjaGlsZCBpcyBuaWwgKGVnLiAyMCBieXRlcyBvZiAwKSAqL1xuICBlbXB0eUNoaWxkOiBVaW50OEFycmF5O1xuICAvKiogaGFzaCBpcyB0aGUgYWxnb3JpdGhtIHRoYXQgbXVzdCBiZSB1c2VkIGZvciBlYWNoIElubmVyT3AgKi9cbiAgaGFzaDogSGFzaE9wO1xufVxuLyoqXG4gKiBJbm5lclNwZWMgY29udGFpbnMgYWxsIHN0b3JlLXNwZWNpZmljIHN0cnVjdHVyZSBpbmZvIHRvIGRldGVybWluZSBpZiB0d28gcHJvb2ZzIGZyb20gYVxuICogZ2l2ZW4gc3RvcmUgYXJlIG5laWdoYm9ycy5cbiAqIFxuICogVGhpcyBlbmFibGVzOlxuICogXG4gKiBpc0xlZnRNb3N0KHNwZWM6IElubmVyU3BlYywgb3A6IElubmVyT3ApXG4gKiBpc1JpZ2h0TW9zdChzcGVjOiBJbm5lclNwZWMsIG9wOiBJbm5lck9wKVxuICogaXNMZWZ0TmVpZ2hib3Ioc3BlYzogSW5uZXJTcGVjLCBsZWZ0OiBJbm5lck9wLCByaWdodDogSW5uZXJPcClcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJbm5lclNwZWNTREtUeXBlIHtcbiAgY2hpbGRfb3JkZXI6IG51bWJlcltdO1xuICBjaGlsZF9zaXplOiBudW1iZXI7XG4gIG1pbl9wcmVmaXhfbGVuZ3RoOiBudW1iZXI7XG4gIG1heF9wcmVmaXhfbGVuZ3RoOiBudW1iZXI7XG4gIGVtcHR5X2NoaWxkOiBVaW50OEFycmF5O1xuICBoYXNoOiBIYXNoT3A7XG59XG4vKiogQmF0Y2hQcm9vZiBpcyBhIGdyb3VwIG9mIG11bHRpcGxlIHByb29mIHR5cGVzIHRoYW4gY2FuIGJlIGNvbXByZXNzZWQgKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmF0Y2hQcm9vZiB7XG4gIGVudHJpZXM6IEJhdGNoRW50cnlbXTtcbn1cbi8qKiBCYXRjaFByb29mIGlzIGEgZ3JvdXAgb2YgbXVsdGlwbGUgcHJvb2YgdHlwZXMgdGhhbiBjYW4gYmUgY29tcHJlc3NlZCAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXRjaFByb29mU0RLVHlwZSB7XG4gIGVudHJpZXM6IEJhdGNoRW50cnlTREtUeXBlW107XG59XG4vKiogVXNlIEJhdGNoRW50cnkgbm90IENvbW1pdG1lbnRQcm9vZiwgdG8gYXZvaWQgcmVjdXJzaW9uICovXG5leHBvcnQgaW50ZXJmYWNlIEJhdGNoRW50cnkge1xuICBleGlzdD86IEV4aXN0ZW5jZVByb29mO1xuICBub25leGlzdD86IE5vbkV4aXN0ZW5jZVByb29mO1xufVxuLyoqIFVzZSBCYXRjaEVudHJ5IG5vdCBDb21taXRtZW50UHJvb2YsIHRvIGF2b2lkIHJlY3Vyc2lvbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCYXRjaEVudHJ5U0RLVHlwZSB7XG4gIGV4aXN0PzogRXhpc3RlbmNlUHJvb2ZTREtUeXBlO1xuICBub25leGlzdD86IE5vbkV4aXN0ZW5jZVByb29mU0RLVHlwZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHJlc3NlZEJhdGNoUHJvb2Yge1xuICBlbnRyaWVzOiBDb21wcmVzc2VkQmF0Y2hFbnRyeVtdO1xuICBsb29rdXBJbm5lcnM6IElubmVyT3BbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHJlc3NlZEJhdGNoUHJvb2ZTREtUeXBlIHtcbiAgZW50cmllczogQ29tcHJlc3NlZEJhdGNoRW50cnlTREtUeXBlW107XG4gIGxvb2t1cF9pbm5lcnM6IElubmVyT3BTREtUeXBlW107XG59XG4vKiogVXNlIEJhdGNoRW50cnkgbm90IENvbW1pdG1lbnRQcm9vZiwgdG8gYXZvaWQgcmVjdXJzaW9uICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXByZXNzZWRCYXRjaEVudHJ5IHtcbiAgZXhpc3Q/OiBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2Y7XG4gIG5vbmV4aXN0PzogQ29tcHJlc3NlZE5vbkV4aXN0ZW5jZVByb29mO1xufVxuLyoqIFVzZSBCYXRjaEVudHJ5IG5vdCBDb21taXRtZW50UHJvb2YsIHRvIGF2b2lkIHJlY3Vyc2lvbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wcmVzc2VkQmF0Y2hFbnRyeVNES1R5cGUge1xuICBleGlzdD86IENvbXByZXNzZWRFeGlzdGVuY2VQcm9vZlNES1R5cGU7XG4gIG5vbmV4aXN0PzogQ29tcHJlc3NlZE5vbkV4aXN0ZW5jZVByb29mU0RLVHlwZTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mIHtcbiAga2V5OiBVaW50OEFycmF5O1xuICB2YWx1ZTogVWludDhBcnJheTtcbiAgbGVhZj86IExlYWZPcDtcbiAgLyoqIHRoZXNlIGFyZSBpbmRleGVzIGludG8gdGhlIGxvb2t1cF9pbm5lcnMgdGFibGUgaW4gQ29tcHJlc3NlZEJhdGNoUHJvb2YgKi9cbiAgcGF0aDogbnVtYmVyW107XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbXByZXNzZWRFeGlzdGVuY2VQcm9vZlNES1R5cGUge1xuICBrZXk6IFVpbnQ4QXJyYXk7XG4gIHZhbHVlOiBVaW50OEFycmF5O1xuICBsZWFmPzogTGVhZk9wU0RLVHlwZTtcbiAgcGF0aDogbnVtYmVyW107XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbXByZXNzZWROb25FeGlzdGVuY2VQcm9vZiB7XG4gIC8qKiBUT0RPOiByZW1vdmUgdGhpcyBhcyB1bm5lY2Vzc2FyeT8/PyB3ZSBwcm92ZSBhIHJhbmdlICovXG4gIGtleTogVWludDhBcnJheTtcbiAgbGVmdD86IENvbXByZXNzZWRFeGlzdGVuY2VQcm9vZjtcbiAgcmlnaHQ/OiBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2Y7XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbXByZXNzZWROb25FeGlzdGVuY2VQcm9vZlNES1R5cGUge1xuICBrZXk6IFVpbnQ4QXJyYXk7XG4gIGxlZnQ/OiBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2ZTREtUeXBlO1xuICByaWdodD86IENvbXByZXNzZWRFeGlzdGVuY2VQcm9vZlNES1R5cGU7XG59XG5mdW5jdGlvbiBjcmVhdGVCYXNlRXhpc3RlbmNlUHJvb2YoKTogRXhpc3RlbmNlUHJvb2Yge1xuICByZXR1cm4ge1xuICAgIGtleTogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICB2YWx1ZTogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICBsZWFmOiB1bmRlZmluZWQsXG4gICAgcGF0aDogW11cbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBFeGlzdGVuY2VQcm9vZiA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IEV4aXN0ZW5jZVByb29mLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2Uua2V5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5rZXkpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS52YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UudmFsdWUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5sZWFmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIExlYWZPcC5lbmNvZGUobWVzc2FnZS5sZWFmLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHYgb2YgbWVzc2FnZS5wYXRoKSB7XG4gICAgICBJbm5lck9wLmVuY29kZSh2ISwgd3JpdGVyLnVpbnQzMigzNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogRXhpc3RlbmNlUHJvb2Yge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlRXhpc3RlbmNlUHJvb2YoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2Uua2V5ID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gcmVhZGVyLmJ5dGVzKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLmxlYWYgPSBMZWFmT3AuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2UucGF0aC5wdXNoKElubmVyT3AuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbiAgZnJvbVBhcnRpYWwob2JqZWN0OiBEZWVwUGFydGlhbDxFeGlzdGVuY2VQcm9vZj4pOiBFeGlzdGVuY2VQcm9vZiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VFeGlzdGVuY2VQcm9vZigpO1xuICAgIG1lc3NhZ2Uua2V5ID0gb2JqZWN0LmtleSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgIG1lc3NhZ2UudmFsdWUgPSBvYmplY3QudmFsdWUgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICBtZXNzYWdlLmxlYWYgPSBvYmplY3QubGVhZiAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5sZWFmICE9PSBudWxsID8gTGVhZk9wLmZyb21QYXJ0aWFsKG9iamVjdC5sZWFmKSA6IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLnBhdGggPSBvYmplY3QucGF0aD8ubWFwKGUgPT4gSW5uZXJPcC5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlTm9uRXhpc3RlbmNlUHJvb2YoKTogTm9uRXhpc3RlbmNlUHJvb2Yge1xuICByZXR1cm4ge1xuICAgIGtleTogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICBsZWZ0OiB1bmRlZmluZWQsXG4gICAgcmlnaHQ6IHVuZGVmaW5lZFxuICB9O1xufVxuZXhwb3J0IGNvbnN0IE5vbkV4aXN0ZW5jZVByb29mID0ge1xuICBlbmNvZGUobWVzc2FnZTogTm9uRXhpc3RlbmNlUHJvb2YsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5rZXkubGVuZ3RoICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDEwKS5ieXRlcyhtZXNzYWdlLmtleSk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmxlZnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgRXhpc3RlbmNlUHJvb2YuZW5jb2RlKG1lc3NhZ2UubGVmdCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgRXhpc3RlbmNlUHJvb2YuZW5jb2RlKG1lc3NhZ2UucmlnaHQsIHdyaXRlci51aW50MzIoMjYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IE5vbkV4aXN0ZW5jZVByb29mIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZU5vbkV4aXN0ZW5jZVByb29mKCk7XG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5sZWZ0ID0gRXhpc3RlbmNlUHJvb2YuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIG1lc3NhZ2UucmlnaHQgPSBFeGlzdGVuY2VQcm9vZi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG4gIGZyb21QYXJ0aWFsKG9iamVjdDogRGVlcFBhcnRpYWw8Tm9uRXhpc3RlbmNlUHJvb2Y+KTogTm9uRXhpc3RlbmNlUHJvb2Yge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTm9uRXhpc3RlbmNlUHJvb2YoKTtcbiAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICBtZXNzYWdlLmxlZnQgPSBvYmplY3QubGVmdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5sZWZ0ICE9PSBudWxsID8gRXhpc3RlbmNlUHJvb2YuZnJvbVBhcnRpYWwob2JqZWN0LmxlZnQpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UucmlnaHQgPSBvYmplY3QucmlnaHQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucmlnaHQgIT09IG51bGwgPyBFeGlzdGVuY2VQcm9vZi5mcm9tUGFydGlhbChvYmplY3QucmlnaHQpIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbW1pdG1lbnRQcm9vZigpOiBDb21taXRtZW50UHJvb2Yge1xuICByZXR1cm4ge1xuICAgIGV4aXN0OiB1bmRlZmluZWQsXG4gICAgbm9uZXhpc3Q6IHVuZGVmaW5lZCxcbiAgICBiYXRjaDogdW5kZWZpbmVkLFxuICAgIGNvbXByZXNzZWQ6IHVuZGVmaW5lZFxuICB9O1xufVxuZXhwb3J0IGNvbnN0IENvbW1pdG1lbnRQcm9vZiA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IENvbW1pdG1lbnRQcm9vZiwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLmV4aXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIEV4aXN0ZW5jZVByb29mLmVuY29kZShtZXNzYWdlLmV4aXN0LCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5ub25leGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBOb25FeGlzdGVuY2VQcm9vZi5lbmNvZGUobWVzc2FnZS5ub25leGlzdCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuYmF0Y2ggIT09IHVuZGVmaW5lZCkge1xuICAgICAgQmF0Y2hQcm9vZi5lbmNvZGUobWVzc2FnZS5iYXRjaCwgd3JpdGVyLnVpbnQzMigyNikuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UuY29tcHJlc3NlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBDb21wcmVzc2VkQmF0Y2hQcm9vZi5lbmNvZGUobWVzc2FnZS5jb21wcmVzc2VkLCB3cml0ZXIudWludDMyKDM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBDb21taXRtZW50UHJvb2Yge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tbWl0bWVudFByb29mKCk7XG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmV4aXN0ID0gRXhpc3RlbmNlUHJvb2YuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2Uubm9uZXhpc3QgPSBOb25FeGlzdGVuY2VQcm9vZi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5iYXRjaCA9IEJhdGNoUHJvb2YuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2UuY29tcHJlc3NlZCA9IENvbXByZXNzZWRCYXRjaFByb29mLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbiAgZnJvbVBhcnRpYWwob2JqZWN0OiBEZWVwUGFydGlhbDxDb21taXRtZW50UHJvb2Y+KTogQ29tbWl0bWVudFByb29mIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbW1pdG1lbnRQcm9vZigpO1xuICAgIG1lc3NhZ2UuZXhpc3QgPSBvYmplY3QuZXhpc3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZXhpc3QgIT09IG51bGwgPyBFeGlzdGVuY2VQcm9vZi5mcm9tUGFydGlhbChvYmplY3QuZXhpc3QpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2Uubm9uZXhpc3QgPSBvYmplY3Qubm9uZXhpc3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Qubm9uZXhpc3QgIT09IG51bGwgPyBOb25FeGlzdGVuY2VQcm9vZi5mcm9tUGFydGlhbChvYmplY3Qubm9uZXhpc3QpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UuYmF0Y2ggPSBvYmplY3QuYmF0Y2ggIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuYmF0Y2ggIT09IG51bGwgPyBCYXRjaFByb29mLmZyb21QYXJ0aWFsKG9iamVjdC5iYXRjaCkgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS5jb21wcmVzc2VkID0gb2JqZWN0LmNvbXByZXNzZWQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuY29tcHJlc3NlZCAhPT0gbnVsbCA/IENvbXByZXNzZWRCYXRjaFByb29mLmZyb21QYXJ0aWFsKG9iamVjdC5jb21wcmVzc2VkKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VMZWFmT3AoKTogTGVhZk9wIHtcbiAgcmV0dXJuIHtcbiAgICBoYXNoOiAwLFxuICAgIHByZWhhc2hLZXk6IDAsXG4gICAgcHJlaGFzaFZhbHVlOiAwLFxuICAgIGxlbmd0aDogMCxcbiAgICBwcmVmaXg6IG5ldyBVaW50OEFycmF5KClcbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBMZWFmT3AgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBMZWFmT3AsIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5oYXNoICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDgpLmludDMyKG1lc3NhZ2UuaGFzaCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnByZWhhc2hLZXkgIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTYpLmludDMyKG1lc3NhZ2UucHJlaGFzaEtleSk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLnByZWhhc2hWYWx1ZSAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigyNCkuaW50MzIobWVzc2FnZS5wcmVoYXNoVmFsdWUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMzIpLmludDMyKG1lc3NhZ2UubGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucHJlZml4Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMig0MikuYnl0ZXMobWVzc2FnZS5wcmVmaXgpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBMZWFmT3Age1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlTGVhZk9wKCk7XG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmhhc2ggPSAocmVhZGVyLmludDMyKCkgYXMgYW55KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UucHJlaGFzaEtleSA9IChyZWFkZXIuaW50MzIoKSBhcyBhbnkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5wcmVoYXNoVmFsdWUgPSAocmVhZGVyLmludDMyKCkgYXMgYW55KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2UubGVuZ3RoID0gKHJlYWRlci5pbnQzMigpIGFzIGFueSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBtZXNzYWdlLnByZWZpeCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG4gIGZyb21QYXJ0aWFsKG9iamVjdDogRGVlcFBhcnRpYWw8TGVhZk9wPik6IExlYWZPcCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VMZWFmT3AoKTtcbiAgICBtZXNzYWdlLmhhc2ggPSBvYmplY3QuaGFzaCA/PyAwO1xuICAgIG1lc3NhZ2UucHJlaGFzaEtleSA9IG9iamVjdC5wcmVoYXNoS2V5ID8/IDA7XG4gICAgbWVzc2FnZS5wcmVoYXNoVmFsdWUgPSBvYmplY3QucHJlaGFzaFZhbHVlID8/IDA7XG4gICAgbWVzc2FnZS5sZW5ndGggPSBvYmplY3QubGVuZ3RoID8/IDA7XG4gICAgbWVzc2FnZS5wcmVmaXggPSBvYmplY3QucHJlZml4ID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlSW5uZXJPcCgpOiBJbm5lck9wIHtcbiAgcmV0dXJuIHtcbiAgICBoYXNoOiAwLFxuICAgIHByZWZpeDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICBzdWZmaXg6IG5ldyBVaW50OEFycmF5KClcbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBJbm5lck9wID0ge1xuICBlbmNvZGUobWVzc2FnZTogSW5uZXJPcCwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLmhhc2ggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoOCkuaW50MzIobWVzc2FnZS5oYXNoKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucHJlZml4Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxOCkuYnl0ZXMobWVzc2FnZS5wcmVmaXgpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5zdWZmaXgubGVuZ3RoICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDI2KS5ieXRlcyhtZXNzYWdlLnN1ZmZpeCk7XG4gICAgfVxuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IElubmVyT3Age1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlSW5uZXJPcCgpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS5oYXNoID0gKHJlYWRlci5pbnQzMigpIGFzIGFueSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLnByZWZpeCA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5zdWZmaXggPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuICBmcm9tUGFydGlhbChvYmplY3Q6IERlZXBQYXJ0aWFsPElubmVyT3A+KTogSW5uZXJPcCB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VJbm5lck9wKCk7XG4gICAgbWVzc2FnZS5oYXNoID0gb2JqZWN0Lmhhc2ggPz8gMDtcbiAgICBtZXNzYWdlLnByZWZpeCA9IG9iamVjdC5wcmVmaXggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICBtZXNzYWdlLnN1ZmZpeCA9IG9iamVjdC5zdWZmaXggPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VQcm9vZlNwZWMoKTogUHJvb2ZTcGVjIHtcbiAgcmV0dXJuIHtcbiAgICBsZWFmU3BlYzogdW5kZWZpbmVkLFxuICAgIGlubmVyU3BlYzogdW5kZWZpbmVkLFxuICAgIG1heERlcHRoOiAwLFxuICAgIG1pbkRlcHRoOiAwXG4gIH07XG59XG5leHBvcnQgY29uc3QgUHJvb2ZTcGVjID0ge1xuICBlbmNvZGUobWVzc2FnZTogUHJvb2ZTcGVjLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UubGVhZlNwZWMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgTGVhZk9wLmVuY29kZShtZXNzYWdlLmxlYWZTcGVjLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5pbm5lclNwZWMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgSW5uZXJTcGVjLmVuY29kZShtZXNzYWdlLmlubmVyU3BlYywgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UubWF4RGVwdGggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2UubWF4RGVwdGgpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5taW5EZXB0aCAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigzMikuaW50MzIobWVzc2FnZS5taW5EZXB0aCk7XG4gICAgfVxuICAgIHJldHVybiB3cml0ZXI7XG4gIH0sXG4gIGRlY29kZShpbnB1dDogX20wLlJlYWRlciB8IFVpbnQ4QXJyYXksIGxlbmd0aD86IG51bWJlcik6IFByb29mU3BlYyB7XG4gICAgY29uc3QgcmVhZGVyID0gaW5wdXQgaW5zdGFuY2VvZiBfbTAuUmVhZGVyID8gaW5wdXQgOiBuZXcgX20wLlJlYWRlcihpbnB1dCk7XG4gICAgbGV0IGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VQcm9vZlNwZWMoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UubGVhZlNwZWMgPSBMZWFmT3AuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UuaW5uZXJTcGVjID0gSW5uZXJTcGVjLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLm1heERlcHRoID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBtZXNzYWdlLm1pbkRlcHRoID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbiAgZnJvbVBhcnRpYWwob2JqZWN0OiBEZWVwUGFydGlhbDxQcm9vZlNwZWM+KTogUHJvb2ZTcGVjIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZVByb29mU3BlYygpO1xuICAgIG1lc3NhZ2UubGVhZlNwZWMgPSBvYmplY3QubGVhZlNwZWMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QubGVhZlNwZWMgIT09IG51bGwgPyBMZWFmT3AuZnJvbVBhcnRpYWwob2JqZWN0LmxlYWZTcGVjKSA6IHVuZGVmaW5lZDtcbiAgICBtZXNzYWdlLmlubmVyU3BlYyA9IG9iamVjdC5pbm5lclNwZWMgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuaW5uZXJTcGVjICE9PSBudWxsID8gSW5uZXJTcGVjLmZyb21QYXJ0aWFsKG9iamVjdC5pbm5lclNwZWMpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UubWF4RGVwdGggPSBvYmplY3QubWF4RGVwdGggPz8gMDtcbiAgICBtZXNzYWdlLm1pbkRlcHRoID0gb2JqZWN0Lm1pbkRlcHRoID8/IDA7XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlSW5uZXJTcGVjKCk6IElubmVyU3BlYyB7XG4gIHJldHVybiB7XG4gICAgY2hpbGRPcmRlcjogW10sXG4gICAgY2hpbGRTaXplOiAwLFxuICAgIG1pblByZWZpeExlbmd0aDogMCxcbiAgICBtYXhQcmVmaXhMZW5ndGg6IDAsXG4gICAgZW1wdHlDaGlsZDogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICBoYXNoOiAwXG4gIH07XG59XG5leHBvcnQgY29uc3QgSW5uZXJTcGVjID0ge1xuICBlbmNvZGUobWVzc2FnZTogSW5uZXJTcGVjLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpO1xuICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmNoaWxkT3JkZXIpIHtcbiAgICAgIHdyaXRlci5pbnQzMih2KTtcbiAgICB9XG4gICAgd3JpdGVyLmxkZWxpbSgpO1xuICAgIGlmIChtZXNzYWdlLmNoaWxkU2l6ZSAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxNikuaW50MzIobWVzc2FnZS5jaGlsZFNpemUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5taW5QcmVmaXhMZW5ndGggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMjQpLmludDMyKG1lc3NhZ2UubWluUHJlZml4TGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UubWF4UHJlZml4TGVuZ3RoICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDMyKS5pbnQzMihtZXNzYWdlLm1heFByZWZpeExlbmd0aCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLmVtcHR5Q2hpbGQubGVuZ3RoICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDQyKS5ieXRlcyhtZXNzYWdlLmVtcHR5Q2hpbGQpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5oYXNoICE9PSAwKSB7XG4gICAgICB3cml0ZXIudWludDMyKDQ4KS5pbnQzMihtZXNzYWdlLmhhc2gpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBJbm5lclNwZWMge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlSW5uZXJTcGVjKCk7XG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoKHRhZyAmIDcpID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCBlbmQyID0gcmVhZGVyLnVpbnQzMigpICsgcmVhZGVyLnBvcztcbiAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kMikge1xuICAgICAgICAgICAgICBtZXNzYWdlLmNoaWxkT3JkZXIucHVzaChyZWFkZXIuaW50MzIoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2UuY2hpbGRPcmRlci5wdXNoKHJlYWRlci5pbnQzMigpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBtZXNzYWdlLmNoaWxkU2l6ZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgbWVzc2FnZS5taW5QcmVmaXhMZW5ndGggPSByZWFkZXIuaW50MzIoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIG1lc3NhZ2UubWF4UHJlZml4TGVuZ3RoID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBtZXNzYWdlLmVtcHR5Q2hpbGQgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA2OlxuICAgICAgICAgIG1lc3NhZ2UuaGFzaCA9IChyZWFkZXIuaW50MzIoKSBhcyBhbnkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG4gIGZyb21QYXJ0aWFsKG9iamVjdDogRGVlcFBhcnRpYWw8SW5uZXJTcGVjPik6IElubmVyU3BlYyB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VJbm5lclNwZWMoKTtcbiAgICBtZXNzYWdlLmNoaWxkT3JkZXIgPSBvYmplY3QuY2hpbGRPcmRlcj8ubWFwKGUgPT4gZSkgfHwgW107XG4gICAgbWVzc2FnZS5jaGlsZFNpemUgPSBvYmplY3QuY2hpbGRTaXplID8/IDA7XG4gICAgbWVzc2FnZS5taW5QcmVmaXhMZW5ndGggPSBvYmplY3QubWluUHJlZml4TGVuZ3RoID8/IDA7XG4gICAgbWVzc2FnZS5tYXhQcmVmaXhMZW5ndGggPSBvYmplY3QubWF4UHJlZml4TGVuZ3RoID8/IDA7XG4gICAgbWVzc2FnZS5lbXB0eUNoaWxkID0gb2JqZWN0LmVtcHR5Q2hpbGQgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICBtZXNzYWdlLmhhc2ggPSBvYmplY3QuaGFzaCA/PyAwO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUJhdGNoUHJvb2YoKTogQmF0Y2hQcm9vZiB7XG4gIHJldHVybiB7XG4gICAgZW50cmllczogW11cbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBCYXRjaFByb29mID0ge1xuICBlbmNvZGUobWVzc2FnZTogQmF0Y2hQcm9vZiwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmVudHJpZXMpIHtcbiAgICAgIEJhdGNoRW50cnkuZW5jb2RlKHYhLCB3cml0ZXIudWludDMyKDEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBCYXRjaFByb29mIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUJhdGNoUHJvb2YoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UuZW50cmllcy5wdXNoKEJhdGNoRW50cnkuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbiAgZnJvbVBhcnRpYWwob2JqZWN0OiBEZWVwUGFydGlhbDxCYXRjaFByb29mPik6IEJhdGNoUHJvb2Yge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQmF0Y2hQcm9vZigpO1xuICAgIG1lc3NhZ2UuZW50cmllcyA9IG9iamVjdC5lbnRyaWVzPy5tYXAoZSA9PiBCYXRjaEVudHJ5LmZyb21QYXJ0aWFsKGUpKSB8fCBbXTtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VCYXRjaEVudHJ5KCk6IEJhdGNoRW50cnkge1xuICByZXR1cm4ge1xuICAgIGV4aXN0OiB1bmRlZmluZWQsXG4gICAgbm9uZXhpc3Q6IHVuZGVmaW5lZFxuICB9O1xufVxuZXhwb3J0IGNvbnN0IEJhdGNoRW50cnkgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBCYXRjaEVudHJ5LCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2UuZXhpc3QgIT09IHVuZGVmaW5lZCkge1xuICAgICAgRXhpc3RlbmNlUHJvb2YuZW5jb2RlKG1lc3NhZ2UuZXhpc3QsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm5vbmV4aXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIE5vbkV4aXN0ZW5jZVByb29mLmVuY29kZShtZXNzYWdlLm5vbmV4aXN0LCB3cml0ZXIudWludDMyKDE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBCYXRjaEVudHJ5IHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUJhdGNoRW50cnkoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UuZXhpc3QgPSBFeGlzdGVuY2VQcm9vZi5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5ub25leGlzdCA9IE5vbkV4aXN0ZW5jZVByb29mLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbiAgZnJvbVBhcnRpYWwob2JqZWN0OiBEZWVwUGFydGlhbDxCYXRjaEVudHJ5Pik6IEJhdGNoRW50cnkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQmF0Y2hFbnRyeSgpO1xuICAgIG1lc3NhZ2UuZXhpc3QgPSBvYmplY3QuZXhpc3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QuZXhpc3QgIT09IG51bGwgPyBFeGlzdGVuY2VQcm9vZi5mcm9tUGFydGlhbChvYmplY3QuZXhpc3QpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2Uubm9uZXhpc3QgPSBvYmplY3Qubm9uZXhpc3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Qubm9uZXhpc3QgIT09IG51bGwgPyBOb25FeGlzdGVuY2VQcm9vZi5mcm9tUGFydGlhbChvYmplY3Qubm9uZXhpc3QpIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbXByZXNzZWRCYXRjaFByb29mKCk6IENvbXByZXNzZWRCYXRjaFByb29mIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRyaWVzOiBbXSxcbiAgICBsb29rdXBJbm5lcnM6IFtdXG4gIH07XG59XG5leHBvcnQgY29uc3QgQ29tcHJlc3NlZEJhdGNoUHJvb2YgPSB7XG4gIGVuY29kZShtZXNzYWdlOiBDb21wcmVzc2VkQmF0Y2hQcm9vZiwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGZvciAoY29uc3QgdiBvZiBtZXNzYWdlLmVudHJpZXMpIHtcbiAgICAgIENvbXByZXNzZWRCYXRjaEVudHJ5LmVuY29kZSh2ISwgd3JpdGVyLnVpbnQzMigxMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UubG9va3VwSW5uZXJzKSB7XG4gICAgICBJbm5lck9wLmVuY29kZSh2ISwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogQ29tcHJlc3NlZEJhdGNoUHJvb2Yge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcHJlc3NlZEJhdGNoUHJvb2YoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UuZW50cmllcy5wdXNoKENvbXByZXNzZWRCYXRjaEVudHJ5LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5sb29rdXBJbm5lcnMucHVzaChJbm5lck9wLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG4gIGZyb21QYXJ0aWFsKG9iamVjdDogRGVlcFBhcnRpYWw8Q29tcHJlc3NlZEJhdGNoUHJvb2Y+KTogQ29tcHJlc3NlZEJhdGNoUHJvb2Yge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcHJlc3NlZEJhdGNoUHJvb2YoKTtcbiAgICBtZXNzYWdlLmVudHJpZXMgPSBvYmplY3QuZW50cmllcz8ubWFwKGUgPT4gQ29tcHJlc3NlZEJhdGNoRW50cnkuZnJvbVBhcnRpYWwoZSkpIHx8IFtdO1xuICAgIG1lc3NhZ2UubG9va3VwSW5uZXJzID0gb2JqZWN0Lmxvb2t1cElubmVycz8ubWFwKGUgPT4gSW5uZXJPcC5mcm9tUGFydGlhbChlKSkgfHwgW107XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH1cbn07XG5mdW5jdGlvbiBjcmVhdGVCYXNlQ29tcHJlc3NlZEJhdGNoRW50cnkoKTogQ29tcHJlc3NlZEJhdGNoRW50cnkge1xuICByZXR1cm4ge1xuICAgIGV4aXN0OiB1bmRlZmluZWQsXG4gICAgbm9uZXhpc3Q6IHVuZGVmaW5lZFxuICB9O1xufVxuZXhwb3J0IGNvbnN0IENvbXByZXNzZWRCYXRjaEVudHJ5ID0ge1xuICBlbmNvZGUobWVzc2FnZTogQ29tcHJlc3NlZEJhdGNoRW50cnksIHdyaXRlcjogX20wLldyaXRlciA9IF9tMC5Xcml0ZXIuY3JlYXRlKCkpOiBfbTAuV3JpdGVyIHtcbiAgICBpZiAobWVzc2FnZS5leGlzdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2YuZW5jb2RlKG1lc3NhZ2UuZXhpc3QsIHdyaXRlci51aW50MzIoMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgfVxuICAgIGlmIChtZXNzYWdlLm5vbmV4aXN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIENvbXByZXNzZWROb25FeGlzdGVuY2VQcm9vZi5lbmNvZGUobWVzc2FnZS5ub25leGlzdCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogQ29tcHJlc3NlZEJhdGNoRW50cnkge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcHJlc3NlZEJhdGNoRW50cnkoKTtcbiAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgY29uc3QgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIG1lc3NhZ2UuZXhpc3QgPSBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2YuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2Uubm9uZXhpc3QgPSBDb21wcmVzc2VkTm9uRXhpc3RlbmNlUHJvb2YuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtZXNzYWdlO1xuICB9LFxuICBmcm9tUGFydGlhbChvYmplY3Q6IERlZXBQYXJ0aWFsPENvbXByZXNzZWRCYXRjaEVudHJ5Pik6IENvbXByZXNzZWRCYXRjaEVudHJ5IHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbXByZXNzZWRCYXRjaEVudHJ5KCk7XG4gICAgbWVzc2FnZS5leGlzdCA9IG9iamVjdC5leGlzdCAhPT0gdW5kZWZpbmVkICYmIG9iamVjdC5leGlzdCAhPT0gbnVsbCA/IENvbXByZXNzZWRFeGlzdGVuY2VQcm9vZi5mcm9tUGFydGlhbChvYmplY3QuZXhpc3QpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2Uubm9uZXhpc3QgPSBvYmplY3Qubm9uZXhpc3QgIT09IHVuZGVmaW5lZCAmJiBvYmplY3Qubm9uZXhpc3QgIT09IG51bGwgPyBDb21wcmVzc2VkTm9uRXhpc3RlbmNlUHJvb2YuZnJvbVBhcnRpYWwob2JqZWN0Lm5vbmV4aXN0KSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNyZWF0ZUJhc2VDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2YoKTogQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mIHtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IG5ldyBVaW50OEFycmF5KCksXG4gICAgdmFsdWU6IG5ldyBVaW50OEFycmF5KCksXG4gICAgbGVhZjogdW5kZWZpbmVkLFxuICAgIHBhdGg6IFtdXG4gIH07XG59XG5leHBvcnQgY29uc3QgQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mID0ge1xuICBlbmNvZGUobWVzc2FnZTogQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mLCB3cml0ZXI6IF9tMC5Xcml0ZXIgPSBfbTAuV3JpdGVyLmNyZWF0ZSgpKTogX20wLldyaXRlciB7XG4gICAgaWYgKG1lc3NhZ2Uua2V5Lmxlbmd0aCAhPT0gMCkge1xuICAgICAgd3JpdGVyLnVpbnQzMigxMCkuYnl0ZXMobWVzc2FnZS5rZXkpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS52YWx1ZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTgpLmJ5dGVzKG1lc3NhZ2UudmFsdWUpO1xuICAgIH1cbiAgICBpZiAobWVzc2FnZS5sZWFmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIExlYWZPcC5lbmNvZGUobWVzc2FnZS5sZWFmLCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICB3cml0ZXIudWludDMyKDM0KS5mb3JrKCk7XG4gICAgZm9yIChjb25zdCB2IG9mIG1lc3NhZ2UucGF0aCkge1xuICAgICAgd3JpdGVyLmludDMyKHYpO1xuICAgIH1cbiAgICB3cml0ZXIubGRlbGltKCk7XG4gICAgcmV0dXJuIHdyaXRlcjtcbiAgfSxcbiAgZGVjb2RlKGlucHV0OiBfbTAuUmVhZGVyIHwgVWludDhBcnJheSwgbGVuZ3RoPzogbnVtYmVyKTogQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mIHtcbiAgICBjb25zdCByZWFkZXIgPSBpbnB1dCBpbnN0YW5jZW9mIF9tMC5SZWFkZXIgPyBpbnB1dCA6IG5ldyBfbTAuUmVhZGVyKGlucHV0KTtcbiAgICBsZXQgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aDtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbXByZXNzZWRFeGlzdGVuY2VQcm9vZigpO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICBjb25zdCB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgbWVzc2FnZS5rZXkgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIG1lc3NhZ2UudmFsdWUgPSByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIG1lc3NhZ2UubGVhZiA9IExlYWZPcC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgY29uc3QgZW5kMiA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3M7XG4gICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZDIpIHtcbiAgICAgICAgICAgICAgbWVzc2FnZS5wYXRoLnB1c2gocmVhZGVyLmludDMyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtZXNzYWdlLnBhdGgucHVzaChyZWFkZXIuaW50MzIoKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2U7XG4gIH0sXG4gIGZyb21QYXJ0aWFsKG9iamVjdDogRGVlcFBhcnRpYWw8Q29tcHJlc3NlZEV4aXN0ZW5jZVByb29mPik6IENvbXByZXNzZWRFeGlzdGVuY2VQcm9vZiB7XG4gICAgY29uc3QgbWVzc2FnZSA9IGNyZWF0ZUJhc2VDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2YoKTtcbiAgICBtZXNzYWdlLmtleSA9IG9iamVjdC5rZXkgPz8gbmV3IFVpbnQ4QXJyYXkoKTtcbiAgICBtZXNzYWdlLnZhbHVlID0gb2JqZWN0LnZhbHVlID8/IG5ldyBVaW50OEFycmF5KCk7XG4gICAgbWVzc2FnZS5sZWFmID0gb2JqZWN0LmxlYWYgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QubGVhZiAhPT0gbnVsbCA/IExlYWZPcC5mcm9tUGFydGlhbChvYmplY3QubGVhZikgOiB1bmRlZmluZWQ7XG4gICAgbWVzc2FnZS5wYXRoID0gb2JqZWN0LnBhdGg/Lm1hcChlID0+IGUpIHx8IFtdO1xuICAgIHJldHVybiBtZXNzYWdlO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlQmFzZUNvbXByZXNzZWROb25FeGlzdGVuY2VQcm9vZigpOiBDb21wcmVzc2VkTm9uRXhpc3RlbmNlUHJvb2Yge1xuICByZXR1cm4ge1xuICAgIGtleTogbmV3IFVpbnQ4QXJyYXkoKSxcbiAgICBsZWZ0OiB1bmRlZmluZWQsXG4gICAgcmlnaHQ6IHVuZGVmaW5lZFxuICB9O1xufVxuZXhwb3J0IGNvbnN0IENvbXByZXNzZWROb25FeGlzdGVuY2VQcm9vZiA9IHtcbiAgZW5jb2RlKG1lc3NhZ2U6IENvbXByZXNzZWROb25FeGlzdGVuY2VQcm9vZiwgd3JpdGVyOiBfbTAuV3JpdGVyID0gX20wLldyaXRlci5jcmVhdGUoKSk6IF9tMC5Xcml0ZXIge1xuICAgIGlmIChtZXNzYWdlLmtleS5sZW5ndGggIT09IDApIHtcbiAgICAgIHdyaXRlci51aW50MzIoMTApLmJ5dGVzKG1lc3NhZ2Uua2V5KTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UubGVmdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2YuZW5jb2RlKG1lc3NhZ2UubGVmdCwgd3JpdGVyLnVpbnQzMigxOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICB9XG4gICAgaWYgKG1lc3NhZ2UucmlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mLmVuY29kZShtZXNzYWdlLnJpZ2h0LCB3cml0ZXIudWludDMyKDI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gd3JpdGVyO1xuICB9LFxuICBkZWNvZGUoaW5wdXQ6IF9tMC5SZWFkZXIgfCBVaW50OEFycmF5LCBsZW5ndGg/OiBudW1iZXIpOiBDb21wcmVzc2VkTm9uRXhpc3RlbmNlUHJvb2Yge1xuICAgIGNvbnN0IHJlYWRlciA9IGlucHV0IGluc3RhbmNlb2YgX20wLlJlYWRlciA/IGlucHV0IDogbmV3IF9tMC5SZWFkZXIoaW5wdXQpO1xuICAgIGxldCBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBjcmVhdGVCYXNlQ29tcHJlc3NlZE5vbkV4aXN0ZW5jZVByb29mKCk7XG4gICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgIGNvbnN0IHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBtZXNzYWdlLmtleSA9IHJlYWRlci5ieXRlcygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgbWVzc2FnZS5sZWZ0ID0gQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBtZXNzYWdlLnJpZ2h0ID0gQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfSxcbiAgZnJvbVBhcnRpYWwob2JqZWN0OiBEZWVwUGFydGlhbDxDb21wcmVzc2VkTm9uRXhpc3RlbmNlUHJvb2Y+KTogQ29tcHJlc3NlZE5vbkV4aXN0ZW5jZVByb29mIHtcbiAgICBjb25zdCBtZXNzYWdlID0gY3JlYXRlQmFzZUNvbXByZXNzZWROb25FeGlzdGVuY2VQcm9vZigpO1xuICAgIG1lc3NhZ2Uua2V5ID0gb2JqZWN0LmtleSA/PyBuZXcgVWludDhBcnJheSgpO1xuICAgIG1lc3NhZ2UubGVmdCA9IG9iamVjdC5sZWZ0ICE9PSB1bmRlZmluZWQgJiYgb2JqZWN0LmxlZnQgIT09IG51bGwgPyBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2YuZnJvbVBhcnRpYWwob2JqZWN0LmxlZnQpIDogdW5kZWZpbmVkO1xuICAgIG1lc3NhZ2UucmlnaHQgPSBvYmplY3QucmlnaHQgIT09IHVuZGVmaW5lZCAmJiBvYmplY3QucmlnaHQgIT09IG51bGwgPyBDb21wcmVzc2VkRXhpc3RlbmNlUHJvb2YuZnJvbVBhcnRpYWwob2JqZWN0LnJpZ2h0KSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbWVzc2FnZTtcbiAgfVxufTsiXSwibmFtZXMiOlsiX20wIiwiSGFzaE9wIiwiTk9fSEFTSCIsIlNIQTI1NiIsIlNIQTUxMiIsIktFQ0NBSyIsIlJJUEVNRDE2MCIsIkJJVENPSU4iLCJVTlJFQ09HTklaRUQiLCJIYXNoT3BTREtUeXBlIiwiaGFzaE9wRnJvbUpTT04iLCJvYmplY3QiLCJoYXNoT3BUb0pTT04iLCJMZW5ndGhPcCIsIk5PX1BSRUZJWCIsIlZBUl9QUk9UTyIsIlZBUl9STFAiLCJGSVhFRDMyX0JJRyIsIkZJWEVEMzJfTElUVExFIiwiRklYRUQ2NF9CSUciLCJGSVhFRDY0X0xJVFRMRSIsIlJFUVVJUkVfMzJfQllURVMiLCJSRVFVSVJFXzY0X0JZVEVTIiwiTGVuZ3RoT3BTREtUeXBlIiwibGVuZ3RoT3BGcm9tSlNPTiIsImxlbmd0aE9wVG9KU09OIiwiY3JlYXRlQmFzZUV4aXN0ZW5jZVByb29mIiwia2V5IiwiVWludDhBcnJheSIsInZhbHVlIiwibGVhZiIsInVuZGVmaW5lZCIsInBhdGgiLCJFeGlzdGVuY2VQcm9vZiIsImVuY29kZSIsIm1lc3NhZ2UiLCJ3cml0ZXIiLCJXcml0ZXIiLCJjcmVhdGUiLCJsZW5ndGgiLCJ1aW50MzIiLCJieXRlcyIsIkxlYWZPcCIsImZvcmsiLCJsZGVsaW0iLCJ2IiwiSW5uZXJPcCIsImRlY29kZSIsImlucHV0IiwicmVhZGVyIiwiUmVhZGVyIiwiZW5kIiwibGVuIiwicG9zIiwidGFnIiwicHVzaCIsInNraXBUeXBlIiwiZnJvbVBhcnRpYWwiLCJtYXAiLCJlIiwiY3JlYXRlQmFzZU5vbkV4aXN0ZW5jZVByb29mIiwibGVmdCIsInJpZ2h0IiwiTm9uRXhpc3RlbmNlUHJvb2YiLCJjcmVhdGVCYXNlQ29tbWl0bWVudFByb29mIiwiZXhpc3QiLCJub25leGlzdCIsImJhdGNoIiwiY29tcHJlc3NlZCIsIkNvbW1pdG1lbnRQcm9vZiIsIkJhdGNoUHJvb2YiLCJDb21wcmVzc2VkQmF0Y2hQcm9vZiIsImNyZWF0ZUJhc2VMZWFmT3AiLCJoYXNoIiwicHJlaGFzaEtleSIsInByZWhhc2hWYWx1ZSIsInByZWZpeCIsImludDMyIiwiY3JlYXRlQmFzZUlubmVyT3AiLCJzdWZmaXgiLCJjcmVhdGVCYXNlUHJvb2ZTcGVjIiwibGVhZlNwZWMiLCJpbm5lclNwZWMiLCJtYXhEZXB0aCIsIm1pbkRlcHRoIiwiUHJvb2ZTcGVjIiwiSW5uZXJTcGVjIiwiY3JlYXRlQmFzZUlubmVyU3BlYyIsImNoaWxkT3JkZXIiLCJjaGlsZFNpemUiLCJtaW5QcmVmaXhMZW5ndGgiLCJtYXhQcmVmaXhMZW5ndGgiLCJlbXB0eUNoaWxkIiwiZW5kMiIsImNyZWF0ZUJhc2VCYXRjaFByb29mIiwiZW50cmllcyIsIkJhdGNoRW50cnkiLCJjcmVhdGVCYXNlQmF0Y2hFbnRyeSIsImNyZWF0ZUJhc2VDb21wcmVzc2VkQmF0Y2hQcm9vZiIsImxvb2t1cElubmVycyIsIkNvbXByZXNzZWRCYXRjaEVudHJ5IiwiY3JlYXRlQmFzZUNvbXByZXNzZWRCYXRjaEVudHJ5IiwiQ29tcHJlc3NlZEV4aXN0ZW5jZVByb29mIiwiQ29tcHJlc3NlZE5vbkV4aXN0ZW5jZVByb29mIiwiY3JlYXRlQmFzZUNvbXByZXNzZWRFeGlzdGVuY2VQcm9vZiIsImNyZWF0ZUJhc2VDb21wcmVzc2VkTm9uRXhpc3RlbmNlUHJvb2YiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/codegen/confio/proofs.ts\n");

/***/ }),

/***/ "./src/codegen/cosmos/base/v1beta1/coin.ts":
/*!*************************************************!*\
  !*** ./src/codegen/cosmos/base/v1beta1/coin.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Coin\": () => (/* binding */ Coin),\n/* harmony export */   \"DecCoin\": () => (/* binding */ DecCoin),\n/* harmony export */   \"DecProto\": () => (/* binding */ DecProto),\n/* harmony export */   \"IntProto\": () => (/* binding */ IntProto)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction createBaseCoin() {\n    return {\n        denom: \"\",\n        amount: \"\"\n    };\n}\nconst Coin = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.amount !== \"\") {\n            writer.uint32(18).string(message.amount);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCoin();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.amount = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCoin();\n        message.denom = object.denom ?? \"\";\n        message.amount = object.amount ?? \"\";\n        return message;\n    }\n};\nfunction createBaseDecCoin() {\n    return {\n        denom: \"\",\n        amount: \"\"\n    };\n}\nconst DecCoin = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.denom !== \"\") {\n            writer.uint32(10).string(message.denom);\n        }\n        if (message.amount !== \"\") {\n            writer.uint32(18).string(message.amount);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecCoin();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.denom = reader.string();\n                    break;\n                case 2:\n                    message.amount = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseDecCoin();\n        message.denom = object.denom ?? \"\";\n        message.amount = object.amount ?? \"\";\n        return message;\n    }\n};\nfunction createBaseIntProto() {\n    return {\n        int: \"\"\n    };\n}\nconst IntProto = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.int !== \"\") {\n            writer.uint32(10).string(message.int);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIntProto();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.int = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseIntProto();\n        message.int = object.int ?? \"\";\n        return message;\n    }\n};\nfunction createBaseDecProto() {\n    return {\n        dec: \"\"\n    };\n}\nconst DecProto = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.dec !== \"\") {\n            writer.uint32(10).string(message.dec);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseDecProto();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.dec = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseDecProto();\n        message.dec = object.dec ?? \"\";\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/cosmos/base/v1beta1/coin.ts\n");

/***/ }),

/***/ "./src/codegen/cosmos/upgrade/v1beta1/upgrade.ts":
/*!*******************************************************!*\
  !*** ./src/codegen/cosmos/upgrade/v1beta1/upgrade.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CancelSoftwareUpgradeProposal\": () => (/* binding */ CancelSoftwareUpgradeProposal),\n/* harmony export */   \"ModuleVersion\": () => (/* binding */ ModuleVersion),\n/* harmony export */   \"Plan\": () => (/* binding */ Plan),\n/* harmony export */   \"SoftwareUpgradeProposal\": () => (/* binding */ SoftwareUpgradeProposal)\n/* harmony export */ });\n/* harmony import */ var _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../google/protobuf/timestamp */ \"./src/codegen/google/protobuf/timestamp.ts\");\n/* harmony import */ var _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../google/protobuf/any */ \"./src/codegen/google/protobuf/any.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction createBasePlan() {\n    return {\n        name: \"\",\n        time: undefined,\n        height: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.ZERO,\n        info: \"\",\n        upgradedClientState: undefined\n    };\n}\nconst Plan = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (message.time !== undefined) {\n            _google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_0__.Timestamp.encode((0,_helpers__WEBPACK_IMPORTED_MODULE_2__.toTimestamp)(message.time), writer.uint32(18).fork()).ldelim();\n        }\n        if (!message.height.isZero()) {\n            writer.uint32(24).int64(message.height);\n        }\n        if (message.info !== \"\") {\n            writer.uint32(34).string(message.info);\n        }\n        if (message.upgradedClientState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.encode(message.upgradedClientState, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePlan();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.time = (0,_helpers__WEBPACK_IMPORTED_MODULE_2__.fromTimestamp)(_google_protobuf_timestamp__WEBPACK_IMPORTED_MODULE_0__.Timestamp.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.height = reader.int64();\n                    break;\n                case 4:\n                    message.info = reader.string();\n                    break;\n                case 5:\n                    message.upgradedClientState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBasePlan();\n        message.name = object.name ?? \"\";\n        message.time = object.time ?? undefined;\n        message.height = object.height !== undefined && object.height !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.height) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.ZERO;\n        message.info = object.info ?? \"\";\n        message.upgradedClientState = object.upgradedClientState !== undefined && object.upgradedClientState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.fromPartial(object.upgradedClientState) : undefined;\n        return message;\n    }\n};\nfunction createBaseSoftwareUpgradeProposal() {\n    return {\n        title: \"\",\n        description: \"\",\n        plan: undefined\n    };\n}\nconst SoftwareUpgradeProposal = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        if (message.plan !== undefined) {\n            Plan.encode(message.plan, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseSoftwareUpgradeProposal();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.plan = Plan.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseSoftwareUpgradeProposal();\n        message.title = object.title ?? \"\";\n        message.description = object.description ?? \"\";\n        message.plan = object.plan !== undefined && object.plan !== null ? Plan.fromPartial(object.plan) : undefined;\n        return message;\n    }\n};\nfunction createBaseCancelSoftwareUpgradeProposal() {\n    return {\n        title: \"\",\n        description: \"\"\n    };\n}\nconst CancelSoftwareUpgradeProposal = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCancelSoftwareUpgradeProposal();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCancelSoftwareUpgradeProposal();\n        message.title = object.title ?? \"\";\n        message.description = object.description ?? \"\";\n        return message;\n    }\n};\nfunction createBaseModuleVersion() {\n    return {\n        name: \"\",\n        version: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO\n    };\n}\nconst ModuleVersion = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.name !== \"\") {\n            writer.uint32(10).string(message.name);\n        }\n        if (!message.version.isZero()) {\n            writer.uint32(16).uint64(message.version);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModuleVersion();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseModuleVersion();\n        message.name = object.name ?? \"\";\n        message.version = object.version !== undefined && object.version !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.version) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/cosmos/upgrade/v1beta1/upgrade.ts\n");

/***/ }),

/***/ "./src/codegen/cosmwasm/client.ts":
/*!****************************************!*\
  !*** ./src/codegen/cosmwasm/client.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"cosmwasmAminoConverters\": () => (/* binding */ cosmwasmAminoConverters),\n/* harmony export */   \"cosmwasmProtoRegistry\": () => (/* binding */ cosmwasmProtoRegistry),\n/* harmony export */   \"getSigningCosmwasmClient\": () => (/* binding */ getSigningCosmwasmClient),\n/* harmony export */   \"getSigningCosmwasmClientOptions\": () => (/* binding */ getSigningCosmwasmClientOptions)\n/* harmony export */ });\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cosmjs/proto-signing */ \"@cosmjs/proto-signing\");\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cosmjs/stargate */ \"@cosmjs/stargate\");\n/* harmony import */ var _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _wasm_v1_tx_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./wasm/v1/tx.registry */ \"./src/codegen/cosmwasm/wasm/v1/tx.registry.ts\");\n/* harmony import */ var _wasm_v1_tx_amino__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./wasm/v1/tx.amino */ \"./src/codegen/cosmwasm/wasm/v1/tx.amino.ts\");\n\n\n\n\nconst cosmwasmAminoConverters = {\n    ..._wasm_v1_tx_amino__WEBPACK_IMPORTED_MODULE_3__.AminoConverter\n};\nconst cosmwasmProtoRegistry = [\n    ..._wasm_v1_tx_registry__WEBPACK_IMPORTED_MODULE_2__.registry\n];\nconst getSigningCosmwasmClientOptions = ({ defaultTypes =_cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.defaultRegistryTypes  } = {})=>{\n    const registry = new _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0__.Registry([\n        ...defaultTypes,\n        ...cosmwasmProtoRegistry\n    ]);\n    const aminoTypes = new _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.AminoTypes({\n        ...cosmwasmAminoConverters\n    });\n    return {\n        registry,\n        aminoTypes\n    };\n};\nconst getSigningCosmwasmClient = async ({ rpcEndpoint , signer , defaultTypes =_cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.defaultRegistryTypes  })=>{\n    const { registry , aminoTypes  } = getSigningCosmwasmClientOptions({\n        defaultTypes\n    });\n    const client = await _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.SigningStargateClient.connectWithSigner(rpcEndpoint, signer, {\n        registry,\n        aminoTypes\n    });\n    return client;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29kZWdlbi9jb3Ntd2FzbS9jbGllbnQudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUErRTtBQUNZO0FBRXpCO0FBQ047QUFDckQsTUFBTU0sMEJBQTBCO0lBQ3JDLEdBQUdELDZEQUFvQztBQUN6QyxFQUFFO0FBQ0ssTUFBTUcsd0JBQWdFO09BQUlKLDBEQUFpQztDQUFDLENBQUM7QUFDN0csTUFBTU0sa0NBQWtDLENBQUMsRUFDOUNDLGNBQWVWLGtFQUFvQkEsQ0FBQSxFQUdwQyxHQUFHLENBQUMsQ0FBQyxHQUdEO0lBQ0gsTUFBTVEsV0FBVyxJQUFJVCwyREFBUUEsQ0FBQztXQUFJVztXQUFpQkg7S0FBc0I7SUFDekUsTUFBTUksYUFBYSxJQUFJVix3REFBVUEsQ0FBQztRQUNoQyxHQUFHSSx1QkFBdUI7SUFDNUI7SUFDQSxPQUFPO1FBQ0xHO1FBQ0FHO0lBQ0Y7QUFDRixFQUFFO0FBQ0ssTUFBTUMsMkJBQTJCLE9BQU8sRUFDN0NDLFlBQVcsRUFDWEMsT0FBTSxFQUNOSixjQUFlVixrRUFBb0JBLENBQUEsRUFLcEMsR0FBSztJQUNKLE1BQU0sRUFDSlEsU0FBUSxFQUNSRyxXQUFVLEVBQ1gsR0FBR0YsZ0NBQWdDO1FBQ2xDQztJQUNGO0lBQ0EsTUFBTUssU0FBUyxNQUFNYixxRkFBdUMsQ0FBQ1csYUFBYUMsUUFBUTtRQUNoRk47UUFDQUc7SUFDRjtJQUNBLE9BQU9JO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vc3JjL2NvZGVnZW4vY29zbXdhc20vY2xpZW50LnRzPzUxZTEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2VuZXJhdGVkVHlwZSwgUmVnaXN0cnksIE9mZmxpbmVTaWduZXIgfSBmcm9tIFwiQGNvc21qcy9wcm90by1zaWduaW5nXCI7XG5pbXBvcnQgeyBkZWZhdWx0UmVnaXN0cnlUeXBlcywgQW1pbm9UeXBlcywgU2lnbmluZ1N0YXJnYXRlQ2xpZW50IH0gZnJvbSBcIkBjb3NtanMvc3RhcmdhdGVcIjtcbmltcG9ydCB7IEh0dHBFbmRwb2ludCB9IGZyb20gXCJAY29zbWpzL3RlbmRlcm1pbnQtcnBjXCI7XG5pbXBvcnQgKiBhcyBjb3Ntd2FzbVdhc21WMVR4UmVnaXN0cnkgZnJvbSBcIi4vd2FzbS92MS90eC5yZWdpc3RyeVwiO1xuaW1wb3J0ICogYXMgY29zbXdhc21XYXNtVjFUeEFtaW5vIGZyb20gXCIuL3dhc20vdjEvdHguYW1pbm9cIjtcbmV4cG9ydCBjb25zdCBjb3Ntd2FzbUFtaW5vQ29udmVydGVycyA9IHtcbiAgLi4uY29zbXdhc21XYXNtVjFUeEFtaW5vLkFtaW5vQ29udmVydGVyXG59O1xuZXhwb3J0IGNvbnN0IGNvc213YXNtUHJvdG9SZWdpc3RyeTogUmVhZG9ubHlBcnJheTxbc3RyaW5nLCBHZW5lcmF0ZWRUeXBlXT4gPSBbLi4uY29zbXdhc21XYXNtVjFUeFJlZ2lzdHJ5LnJlZ2lzdHJ5XTtcbmV4cG9ydCBjb25zdCBnZXRTaWduaW5nQ29zbXdhc21DbGllbnRPcHRpb25zID0gKHtcbiAgZGVmYXVsdFR5cGVzID0gZGVmYXVsdFJlZ2lzdHJ5VHlwZXNcbn06IHtcbiAgZGVmYXVsdFR5cGVzPzogUmVhZG9ubHlBcnJheTxbc3RyaW5nLCBHZW5lcmF0ZWRUeXBlXT47XG59ID0ge30pOiB7XG4gIHJlZ2lzdHJ5OiBSZWdpc3RyeTtcbiAgYW1pbm9UeXBlczogQW1pbm9UeXBlcztcbn0gPT4ge1xuICBjb25zdCByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeShbLi4uZGVmYXVsdFR5cGVzLCAuLi5jb3Ntd2FzbVByb3RvUmVnaXN0cnldKTtcbiAgY29uc3QgYW1pbm9UeXBlcyA9IG5ldyBBbWlub1R5cGVzKHtcbiAgICAuLi5jb3Ntd2FzbUFtaW5vQ29udmVydGVyc1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICByZWdpc3RyeSxcbiAgICBhbWlub1R5cGVzXG4gIH07XG59O1xuZXhwb3J0IGNvbnN0IGdldFNpZ25pbmdDb3Ntd2FzbUNsaWVudCA9IGFzeW5jICh7XG4gIHJwY0VuZHBvaW50LFxuICBzaWduZXIsXG4gIGRlZmF1bHRUeXBlcyA9IGRlZmF1bHRSZWdpc3RyeVR5cGVzXG59OiB7XG4gIHJwY0VuZHBvaW50OiBzdHJpbmcgfCBIdHRwRW5kcG9pbnQ7XG4gIHNpZ25lcjogT2ZmbGluZVNpZ25lcjtcbiAgZGVmYXVsdFR5cGVzPzogUmVhZG9ubHlBcnJheTxbc3RyaW5nLCBHZW5lcmF0ZWRUeXBlXT47XG59KSA9PiB7XG4gIGNvbnN0IHtcbiAgICByZWdpc3RyeSxcbiAgICBhbWlub1R5cGVzXG4gIH0gPSBnZXRTaWduaW5nQ29zbXdhc21DbGllbnRPcHRpb25zKHtcbiAgICBkZWZhdWx0VHlwZXNcbiAgfSk7XG4gIGNvbnN0IGNsaWVudCA9IGF3YWl0IFNpZ25pbmdTdGFyZ2F0ZUNsaWVudC5jb25uZWN0V2l0aFNpZ25lcihycGNFbmRwb2ludCwgc2lnbmVyLCB7XG4gICAgcmVnaXN0cnksXG4gICAgYW1pbm9UeXBlc1xuICB9KTtcbiAgcmV0dXJuIGNsaWVudDtcbn07Il0sIm5hbWVzIjpbIlJlZ2lzdHJ5IiwiZGVmYXVsdFJlZ2lzdHJ5VHlwZXMiLCJBbWlub1R5cGVzIiwiU2lnbmluZ1N0YXJnYXRlQ2xpZW50IiwiY29zbXdhc21XYXNtVjFUeFJlZ2lzdHJ5IiwiY29zbXdhc21XYXNtVjFUeEFtaW5vIiwiY29zbXdhc21BbWlub0NvbnZlcnRlcnMiLCJBbWlub0NvbnZlcnRlciIsImNvc213YXNtUHJvdG9SZWdpc3RyeSIsInJlZ2lzdHJ5IiwiZ2V0U2lnbmluZ0Nvc213YXNtQ2xpZW50T3B0aW9ucyIsImRlZmF1bHRUeXBlcyIsImFtaW5vVHlwZXMiLCJnZXRTaWduaW5nQ29zbXdhc21DbGllbnQiLCJycGNFbmRwb2ludCIsInNpZ25lciIsImNsaWVudCIsImNvbm5lY3RXaXRoU2lnbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/codegen/cosmwasm/client.ts\n");

/***/ }),

/***/ "./src/codegen/cosmwasm/wasm/v1/tx.amino.ts":
/*!**************************************************!*\
  !*** ./src/codegen/cosmwasm/wasm/v1/tx.amino.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AminoConverter\": () => (/* binding */ AminoConverter)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/codegen/cosmwasm/wasm/v1/types.ts\");\n/* harmony import */ var _cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cosmjs/encoding */ \"@cosmjs/encoding\");\n/* harmony import */ var _cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../helpers */ \"./src/codegen/helpers.ts\");\n\n\n\nconst AminoConverter = {\n    \"/cosmwasm.wasm.v1.MsgStoreCode\": {\n        aminoType: \"wasm/MsgStoreCode\",\n        toAmino: ({ sender , wasmByteCode , instantiatePermission  })=>{\n            return {\n                sender,\n                wasm_byte_code: (0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.toBase64)(wasmByteCode),\n                instantiate_permission: {\n                    permission: instantiatePermission.permission,\n                    address: instantiatePermission.address,\n                    addresses: instantiatePermission.addresses\n                }\n            };\n        },\n        fromAmino: ({ sender , wasm_byte_code , instantiate_permission  })=>{\n            return {\n                sender,\n                wasmByteCode: (0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.fromBase64)(wasm_byte_code),\n                instantiatePermission: {\n                    permission: (0,_types__WEBPACK_IMPORTED_MODULE_0__.accessTypeFromJSON)(instantiate_permission.permission),\n                    address: instantiate_permission.address,\n                    addresses: instantiate_permission.addresses\n                }\n            };\n        }\n    },\n    \"/cosmwasm.wasm.v1.MsgInstantiateContract\": {\n        aminoType: \"wasm/MsgInstantiateContract\",\n        toAmino: ({ sender , admin , codeId , label , msg , funds  })=>{\n            return {\n                sender,\n                admin,\n                code_id: codeId.toString(),\n                label,\n                msg: JSON.parse((0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(msg)),\n                funds: funds.map((el0)=>({\n                        denom: el0.denom,\n                        amount: el0.amount\n                    }))\n            };\n        },\n        fromAmino: ({ sender , admin , code_id , label , msg , funds  })=>{\n            return {\n                sender,\n                admin,\n                codeId: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromString(code_id),\n                label,\n                msg: (0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(JSON.stringify(msg)),\n                funds: funds.map((el0)=>({\n                        denom: el0.denom,\n                        amount: el0.amount\n                    }))\n            };\n        }\n    },\n    \"/cosmwasm.wasm.v1.MsgInstantiateContract2\": {\n        aminoType: \"wasm/MsgInstantiateContract2\",\n        toAmino: ({ sender , admin , codeId , label , msg , funds , salt , fixMsg  })=>{\n            return {\n                sender,\n                admin,\n                code_id: codeId.toString(),\n                label,\n                msg: JSON.parse((0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(msg)),\n                funds: funds.map((el0)=>({\n                        denom: el0.denom,\n                        amount: el0.amount\n                    })),\n                salt,\n                fix_msg: fixMsg\n            };\n        },\n        fromAmino: ({ sender , admin , code_id , label , msg , funds , salt , fix_msg  })=>{\n            return {\n                sender,\n                admin,\n                codeId: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromString(code_id),\n                label,\n                msg: (0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(JSON.stringify(msg)),\n                funds: funds.map((el0)=>({\n                        denom: el0.denom,\n                        amount: el0.amount\n                    })),\n                salt,\n                fixMsg: fix_msg\n            };\n        }\n    },\n    \"/cosmwasm.wasm.v1.MsgExecuteContract\": {\n        aminoType: \"wasm/MsgExecuteContract\",\n        toAmino: ({ sender , contract , msg , funds  })=>{\n            return {\n                sender,\n                contract,\n                msg: JSON.parse((0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(msg)),\n                funds: funds.map((el0)=>({\n                        denom: el0.denom,\n                        amount: el0.amount\n                    }))\n            };\n        },\n        fromAmino: ({ sender , contract , msg , funds  })=>{\n            return {\n                sender,\n                contract,\n                msg: (0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(JSON.stringify(msg)),\n                funds: funds.map((el0)=>({\n                        denom: el0.denom,\n                        amount: el0.amount\n                    }))\n            };\n        }\n    },\n    \"/cosmwasm.wasm.v1.MsgMigrateContract\": {\n        aminoType: \"wasm/MsgMigrateContract\",\n        toAmino: ({ sender , contract , codeId , msg  })=>{\n            return {\n                sender,\n                contract,\n                code_id: codeId.toString(),\n                msg: JSON.parse((0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(msg))\n            };\n        },\n        fromAmino: ({ sender , contract , code_id , msg  })=>{\n            return {\n                sender,\n                contract,\n                codeId: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromString(code_id),\n                msg: (0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(JSON.stringify(msg))\n            };\n        }\n    },\n    \"/cosmwasm.wasm.v1.MsgUpdateAdmin\": {\n        aminoType: \"wasm/MsgUpdateAdmin\",\n        toAmino: ({ sender , newAdmin , contract  })=>{\n            return {\n                sender,\n                new_admin: newAdmin,\n                contract\n            };\n        },\n        fromAmino: ({ sender , new_admin , contract  })=>{\n            return {\n                sender,\n                newAdmin: new_admin,\n                contract\n            };\n        }\n    },\n    \"/cosmwasm.wasm.v1.MsgClearAdmin\": {\n        aminoType: \"wasm/MsgClearAdmin\",\n        toAmino: ({ sender , contract  })=>{\n            return {\n                sender,\n                contract\n            };\n        },\n        fromAmino: ({ sender , contract  })=>{\n            return {\n                sender,\n                contract\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/cosmwasm/wasm/v1/tx.amino.ts\n");

/***/ }),

/***/ "./src/codegen/cosmwasm/wasm/v1/tx.registry.ts":
/*!*****************************************************!*\
  !*** ./src/codegen/cosmwasm/wasm/v1/tx.registry.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MessageComposer\": () => (/* binding */ MessageComposer),\n/* harmony export */   \"load\": () => (/* binding */ load),\n/* harmony export */   \"registry\": () => (/* binding */ registry)\n/* harmony export */ });\n/* harmony import */ var _tx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tx */ \"./src/codegen/cosmwasm/wasm/v1/tx.ts\");\n\nconst registry = [\n    [\n        \"/cosmwasm.wasm.v1.MsgStoreCode\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgStoreCode\n    ],\n    [\n        \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgInstantiateContract\n    ],\n    [\n        \"/cosmwasm.wasm.v1.MsgInstantiateContract2\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgInstantiateContract2\n    ],\n    [\n        \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgExecuteContract\n    ],\n    [\n        \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgMigrateContract\n    ],\n    [\n        \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpdateAdmin\n    ],\n    [\n        \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgClearAdmin\n    ]\n];\nconst load = (protoRegistry)=>{\n    registry.forEach(([typeUrl, mod])=>{\n        protoRegistry.register(typeUrl, mod);\n    });\n};\nconst MessageComposer = {\n    encoded: {\n        storeCode (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgStoreCode.encode(value).finish()\n            };\n        },\n        instantiateContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgInstantiateContract.encode(value).finish()\n            };\n        },\n        instantiateContract2 (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract2\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgInstantiateContract2.encode(value).finish()\n            };\n        },\n        executeContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgExecuteContract.encode(value).finish()\n            };\n        },\n        migrateContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgMigrateContract.encode(value).finish()\n            };\n        },\n        updateAdmin (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpdateAdmin.encode(value).finish()\n            };\n        },\n        clearAdmin (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgClearAdmin.encode(value).finish()\n            };\n        }\n    },\n    withTypeUrl: {\n        storeCode (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n                value\n            };\n        },\n        instantiateContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n                value\n            };\n        },\n        instantiateContract2 (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract2\",\n                value\n            };\n        },\n        executeContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n                value\n            };\n        },\n        migrateContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n                value\n            };\n        },\n        updateAdmin (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n                value\n            };\n        },\n        clearAdmin (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n                value\n            };\n        }\n    },\n    fromPartial: {\n        storeCode (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgStoreCode\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgStoreCode.fromPartial(value)\n            };\n        },\n        instantiateContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgInstantiateContract.fromPartial(value)\n            };\n        },\n        instantiateContract2 (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgInstantiateContract2\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgInstantiateContract2.fromPartial(value)\n            };\n        },\n        executeContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgExecuteContract\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgExecuteContract.fromPartial(value)\n            };\n        },\n        migrateContract (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgMigrateContract\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgMigrateContract.fromPartial(value)\n            };\n        },\n        updateAdmin (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgUpdateAdmin\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpdateAdmin.fromPartial(value)\n            };\n        },\n        clearAdmin (value) {\n            return {\n                typeUrl: \"/cosmwasm.wasm.v1.MsgClearAdmin\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgClearAdmin.fromPartial(value)\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/cosmwasm/wasm/v1/tx.registry.ts\n");

/***/ }),

/***/ "./src/codegen/cosmwasm/wasm/v1/tx.ts":
/*!********************************************!*\
  !*** ./src/codegen/cosmwasm/wasm/v1/tx.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MsgClearAdmin\": () => (/* binding */ MsgClearAdmin),\n/* harmony export */   \"MsgClearAdminResponse\": () => (/* binding */ MsgClearAdminResponse),\n/* harmony export */   \"MsgExecuteContract\": () => (/* binding */ MsgExecuteContract),\n/* harmony export */   \"MsgExecuteContractResponse\": () => (/* binding */ MsgExecuteContractResponse),\n/* harmony export */   \"MsgInstantiateContract\": () => (/* binding */ MsgInstantiateContract),\n/* harmony export */   \"MsgInstantiateContract2\": () => (/* binding */ MsgInstantiateContract2),\n/* harmony export */   \"MsgInstantiateContract2Response\": () => (/* binding */ MsgInstantiateContract2Response),\n/* harmony export */   \"MsgInstantiateContractResponse\": () => (/* binding */ MsgInstantiateContractResponse),\n/* harmony export */   \"MsgMigrateContract\": () => (/* binding */ MsgMigrateContract),\n/* harmony export */   \"MsgMigrateContractResponse\": () => (/* binding */ MsgMigrateContractResponse),\n/* harmony export */   \"MsgStoreCode\": () => (/* binding */ MsgStoreCode),\n/* harmony export */   \"MsgStoreCodeResponse\": () => (/* binding */ MsgStoreCodeResponse),\n/* harmony export */   \"MsgUpdateAdmin\": () => (/* binding */ MsgUpdateAdmin),\n/* harmony export */   \"MsgUpdateAdminResponse\": () => (/* binding */ MsgUpdateAdminResponse)\n/* harmony export */ });\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"./src/codegen/cosmwasm/wasm/v1/types.ts\");\n/* harmony import */ var _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../cosmos/base/v1beta1/coin */ \"./src/codegen/cosmos/base/v1beta1/coin.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction createBaseMsgStoreCode() {\n    return {\n        sender: \"\",\n        wasmByteCode: new Uint8Array(),\n        instantiatePermission: undefined\n    };\n}\nconst MsgStoreCode = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.wasmByteCode.length !== 0) {\n            writer.uint32(18).bytes(message.wasmByteCode);\n        }\n        if (message.instantiatePermission !== undefined) {\n            _types__WEBPACK_IMPORTED_MODULE_0__.AccessConfig.encode(message.instantiatePermission, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgStoreCode();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.wasmByteCode = reader.bytes();\n                    break;\n                case 5:\n                    message.instantiatePermission = _types__WEBPACK_IMPORTED_MODULE_0__.AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgStoreCode();\n        message.sender = object.sender ?? \"\";\n        message.wasmByteCode = object.wasmByteCode ?? new Uint8Array();\n        message.instantiatePermission = object.instantiatePermission !== undefined && object.instantiatePermission !== null ? _types__WEBPACK_IMPORTED_MODULE_0__.AccessConfig.fromPartial(object.instantiatePermission) : undefined;\n        return message;\n    }\n};\nfunction createBaseMsgStoreCodeResponse() {\n    return {\n        codeId: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO,\n        checksum: new Uint8Array()\n    };\n}\nconst MsgStoreCodeResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (!message.codeId.isZero()) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.checksum.length !== 0) {\n            writer.uint32(18).bytes(message.checksum);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgStoreCodeResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                case 2:\n                    message.checksum = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgStoreCodeResponse();\n        message.codeId = object.codeId !== undefined && object.codeId !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.codeId) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        message.checksum = object.checksum ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMsgInstantiateContract() {\n    return {\n        sender: \"\",\n        admin: \"\",\n        codeId: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO,\n        label: \"\",\n        msg: new Uint8Array(),\n        funds: []\n    };\n}\nconst MsgInstantiateContract = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(18).string(message.admin);\n        }\n        if (!message.codeId.isZero()) {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(42).bytes(message.msg);\n        }\n        for (const v of message.funds){\n            _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContract();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.admin = reader.string();\n                    break;\n                case 3:\n                    message.codeId = reader.uint64();\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.msg = reader.bytes();\n                    break;\n                case 6:\n                    message.funds.push(_cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgInstantiateContract();\n        message.sender = object.sender ?? \"\";\n        message.admin = object.admin ?? \"\";\n        message.codeId = object.codeId !== undefined && object.codeId !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.codeId) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        message.label = object.label ?? \"\";\n        message.msg = object.msg ?? new Uint8Array();\n        message.funds = object.funds?.map((e)=>_cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseMsgInstantiateContract2() {\n    return {\n        sender: \"\",\n        admin: \"\",\n        codeId: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO,\n        label: \"\",\n        msg: new Uint8Array(),\n        funds: [],\n        salt: new Uint8Array(),\n        fixMsg: false\n    };\n}\nconst MsgInstantiateContract2 = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(18).string(message.admin);\n        }\n        if (!message.codeId.isZero()) {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(42).bytes(message.msg);\n        }\n        for (const v of message.funds){\n            _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.salt.length !== 0) {\n            writer.uint32(58).bytes(message.salt);\n        }\n        if (message.fixMsg === true) {\n            writer.uint32(64).bool(message.fixMsg);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContract2();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.admin = reader.string();\n                    break;\n                case 3:\n                    message.codeId = reader.uint64();\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.msg = reader.bytes();\n                    break;\n                case 6:\n                    message.funds.push(_cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.salt = reader.bytes();\n                    break;\n                case 8:\n                    message.fixMsg = reader.bool();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgInstantiateContract2();\n        message.sender = object.sender ?? \"\";\n        message.admin = object.admin ?? \"\";\n        message.codeId = object.codeId !== undefined && object.codeId !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.codeId) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        message.label = object.label ?? \"\";\n        message.msg = object.msg ?? new Uint8Array();\n        message.funds = object.funds?.map((e)=>_cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.fromPartial(e)) || [];\n        message.salt = object.salt ?? new Uint8Array();\n        message.fixMsg = object.fixMsg ?? false;\n        return message;\n    }\n};\nfunction createBaseMsgInstantiateContractResponse() {\n    return {\n        address: \"\",\n        data: new Uint8Array()\n    };\n}\nconst MsgInstantiateContractResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContractResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgInstantiateContractResponse();\n        message.address = object.address ?? \"\";\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMsgInstantiateContract2Response() {\n    return {\n        address: \"\",\n        data: new Uint8Array()\n    };\n}\nconst MsgInstantiateContract2Response = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.address !== \"\") {\n            writer.uint32(10).string(message.address);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(18).bytes(message.data);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgInstantiateContract2Response();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.address = reader.string();\n                    break;\n                case 2:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgInstantiateContract2Response();\n        message.address = object.address ?? \"\";\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMsgExecuteContract() {\n    return {\n        sender: \"\",\n        contract: \"\",\n        msg: new Uint8Array(),\n        funds: []\n    };\n}\nconst MsgExecuteContract = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(26).bytes(message.msg);\n        }\n        for (const v of message.funds){\n            _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.encode(v, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExecuteContract();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.msg = reader.bytes();\n                    break;\n                case 5:\n                    message.funds.push(_cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgExecuteContract();\n        message.sender = object.sender ?? \"\";\n        message.contract = object.contract ?? \"\";\n        message.msg = object.msg ?? new Uint8Array();\n        message.funds = object.funds?.map((e)=>_cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_1__.Coin.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseMsgExecuteContractResponse() {\n    return {\n        data: new Uint8Array()\n    };\n}\nconst MsgExecuteContractResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgExecuteContractResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgExecuteContractResponse();\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMsgMigrateContract() {\n    return {\n        sender: \"\",\n        contract: \"\",\n        codeId: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO,\n        msg: new Uint8Array()\n    };\n}\nconst MsgMigrateContract = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(18).string(message.contract);\n        }\n        if (!message.codeId.isZero()) {\n            writer.uint32(24).uint64(message.codeId);\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(34).bytes(message.msg);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMigrateContract();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.contract = reader.string();\n                    break;\n                case 3:\n                    message.codeId = reader.uint64();\n                    break;\n                case 4:\n                    message.msg = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgMigrateContract();\n        message.sender = object.sender ?? \"\";\n        message.contract = object.contract ?? \"\";\n        message.codeId = object.codeId !== undefined && object.codeId !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.codeId) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        message.msg = object.msg ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMsgMigrateContractResponse() {\n    return {\n        data: new Uint8Array()\n    };\n}\nconst MsgMigrateContractResponse = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.data.length !== 0) {\n            writer.uint32(10).bytes(message.data);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgMigrateContractResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgMigrateContractResponse();\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMsgUpdateAdmin() {\n    return {\n        sender: \"\",\n        newAdmin: \"\",\n        contract: \"\"\n    };\n}\nconst MsgUpdateAdmin = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.newAdmin !== \"\") {\n            writer.uint32(18).string(message.newAdmin);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(26).string(message.contract);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateAdmin();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 2:\n                    message.newAdmin = reader.string();\n                    break;\n                case 3:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgUpdateAdmin();\n        message.sender = object.sender ?? \"\";\n        message.newAdmin = object.newAdmin ?? \"\";\n        message.contract = object.contract ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgUpdateAdminResponse() {\n    return {};\n}\nconst MsgUpdateAdminResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateAdminResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgUpdateAdminResponse();\n        return message;\n    }\n};\nfunction createBaseMsgClearAdmin() {\n    return {\n        sender: \"\",\n        contract: \"\"\n    };\n}\nconst MsgClearAdmin = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sender !== \"\") {\n            writer.uint32(10).string(message.sender);\n        }\n        if (message.contract !== \"\") {\n            writer.uint32(26).string(message.contract);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgClearAdmin();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sender = reader.string();\n                    break;\n                case 3:\n                    message.contract = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgClearAdmin();\n        message.sender = object.sender ?? \"\";\n        message.contract = object.contract ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgClearAdminResponse() {\n    return {};\n}\nconst MsgClearAdminResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgClearAdminResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgClearAdminResponse();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/cosmwasm/wasm/v1/tx.ts\n");

/***/ }),

/***/ "./src/codegen/cosmwasm/wasm/v1/types.ts":
/*!***********************************************!*\
  !*** ./src/codegen/cosmwasm/wasm/v1/types.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AbsoluteTxPosition\": () => (/* binding */ AbsoluteTxPosition),\n/* harmony export */   \"AccessConfig\": () => (/* binding */ AccessConfig),\n/* harmony export */   \"AccessType\": () => (/* binding */ AccessType),\n/* harmony export */   \"AccessTypeParam\": () => (/* binding */ AccessTypeParam),\n/* harmony export */   \"AccessTypeSDKType\": () => (/* binding */ AccessTypeSDKType),\n/* harmony export */   \"CodeInfo\": () => (/* binding */ CodeInfo),\n/* harmony export */   \"ContractCodeHistoryEntry\": () => (/* binding */ ContractCodeHistoryEntry),\n/* harmony export */   \"ContractCodeHistoryOperationType\": () => (/* binding */ ContractCodeHistoryOperationType),\n/* harmony export */   \"ContractCodeHistoryOperationTypeSDKType\": () => (/* binding */ ContractCodeHistoryOperationTypeSDKType),\n/* harmony export */   \"ContractInfo\": () => (/* binding */ ContractInfo),\n/* harmony export */   \"Model\": () => (/* binding */ Model),\n/* harmony export */   \"Params\": () => (/* binding */ Params),\n/* harmony export */   \"accessTypeFromJSON\": () => (/* binding */ accessTypeFromJSON),\n/* harmony export */   \"accessTypeToJSON\": () => (/* binding */ accessTypeToJSON),\n/* harmony export */   \"contractCodeHistoryOperationTypeFromJSON\": () => (/* binding */ contractCodeHistoryOperationTypeFromJSON),\n/* harmony export */   \"contractCodeHistoryOperationTypeToJSON\": () => (/* binding */ contractCodeHistoryOperationTypeToJSON)\n/* harmony export */ });\n/* harmony import */ var _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../google/protobuf/any */ \"./src/codegen/google/protobuf/any.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nvar AccessType;\n(function(AccessType) {\n    AccessType[AccessType[/** ACCESS_TYPE_UNSPECIFIED - AccessTypeUnspecified placeholder for empty value */ \"ACCESS_TYPE_UNSPECIFIED\"] = 0] = \"ACCESS_TYPE_UNSPECIFIED\";\n    AccessType[AccessType[/** ACCESS_TYPE_NOBODY - AccessTypeNobody forbidden */ \"ACCESS_TYPE_NOBODY\"] = 1] = \"ACCESS_TYPE_NOBODY\";\n    AccessType[AccessType[/**\n   * ACCESS_TYPE_ONLY_ADDRESS - AccessTypeOnlyAddress restricted to a single address\n   * Deprecated: use AccessTypeAnyOfAddresses instead\n   */ \"ACCESS_TYPE_ONLY_ADDRESS\"] = 2] = \"ACCESS_TYPE_ONLY_ADDRESS\";\n    AccessType[AccessType[/** ACCESS_TYPE_EVERYBODY - AccessTypeEverybody unrestricted */ \"ACCESS_TYPE_EVERYBODY\"] = 3] = \"ACCESS_TYPE_EVERYBODY\";\n    AccessType[AccessType[/** ACCESS_TYPE_ANY_OF_ADDRESSES - AccessTypeAnyOfAddresses allow any of the addresses */ \"ACCESS_TYPE_ANY_OF_ADDRESSES\"] = 4] = \"ACCESS_TYPE_ANY_OF_ADDRESSES\";\n    AccessType[AccessType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(AccessType || (AccessType = {}));\nconst AccessTypeSDKType = AccessType;\nfunction accessTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ACCESS_TYPE_UNSPECIFIED\":\n            return AccessType.ACCESS_TYPE_UNSPECIFIED;\n        case 1:\n        case \"ACCESS_TYPE_NOBODY\":\n            return AccessType.ACCESS_TYPE_NOBODY;\n        case 2:\n        case \"ACCESS_TYPE_ONLY_ADDRESS\":\n            return AccessType.ACCESS_TYPE_ONLY_ADDRESS;\n        case 3:\n        case \"ACCESS_TYPE_EVERYBODY\":\n            return AccessType.ACCESS_TYPE_EVERYBODY;\n        case 4:\n        case \"ACCESS_TYPE_ANY_OF_ADDRESSES\":\n            return AccessType.ACCESS_TYPE_ANY_OF_ADDRESSES;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return AccessType.UNRECOGNIZED;\n    }\n}\nfunction accessTypeToJSON(object) {\n    switch(object){\n        case AccessType.ACCESS_TYPE_UNSPECIFIED:\n            return \"ACCESS_TYPE_UNSPECIFIED\";\n        case AccessType.ACCESS_TYPE_NOBODY:\n            return \"ACCESS_TYPE_NOBODY\";\n        case AccessType.ACCESS_TYPE_ONLY_ADDRESS:\n            return \"ACCESS_TYPE_ONLY_ADDRESS\";\n        case AccessType.ACCESS_TYPE_EVERYBODY:\n            return \"ACCESS_TYPE_EVERYBODY\";\n        case AccessType.ACCESS_TYPE_ANY_OF_ADDRESSES:\n            return \"ACCESS_TYPE_ANY_OF_ADDRESSES\";\n        case AccessType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nvar ContractCodeHistoryOperationType;\n(function(ContractCodeHistoryOperationType) {\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[/** CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED - ContractCodeHistoryOperationTypeUnspecified placeholder for empty value */ \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\"] = 0] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\";\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[/** CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT - ContractCodeHistoryOperationTypeInit on chain contract instantiation */ \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\"] = 1] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\";\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[/** CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE - ContractCodeHistoryOperationTypeMigrate code migration */ \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\"] = 2] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\";\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[/** CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS - ContractCodeHistoryOperationTypeGenesis based on genesis data */ \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\"] = 3] = \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\";\n    ContractCodeHistoryOperationType[ContractCodeHistoryOperationType[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(ContractCodeHistoryOperationType || (ContractCodeHistoryOperationType = {}));\nconst ContractCodeHistoryOperationTypeSDKType = ContractCodeHistoryOperationType;\nfunction contractCodeHistoryOperationTypeFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED;\n        case 1:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT;\n        case 2:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE;\n        case 3:\n        case \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\":\n            return ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return ContractCodeHistoryOperationType.UNRECOGNIZED;\n    }\n}\nfunction contractCodeHistoryOperationTypeToJSON(object) {\n    switch(object){\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE\";\n        case ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS:\n            return \"CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS\";\n        case ContractCodeHistoryOperationType.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseAccessTypeParam() {\n    return {\n        value: 0\n    };\n}\nconst AccessTypeParam = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.value !== 0) {\n            writer.uint32(8).int32(message.value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAccessTypeParam();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.value = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseAccessTypeParam();\n        message.value = object.value ?? 0;\n        return message;\n    }\n};\nfunction createBaseAccessConfig() {\n    return {\n        permission: 0,\n        address: \"\",\n        addresses: []\n    };\n}\nconst AccessConfig = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.permission !== 0) {\n            writer.uint32(8).int32(message.permission);\n        }\n        if (message.address !== \"\") {\n            writer.uint32(18).string(message.address);\n        }\n        for (const v of message.addresses){\n            writer.uint32(26).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAccessConfig();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.permission = reader.int32();\n                    break;\n                case 2:\n                    message.address = reader.string();\n                    break;\n                case 3:\n                    message.addresses.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseAccessConfig();\n        message.permission = object.permission ?? 0;\n        message.address = object.address ?? \"\";\n        message.addresses = object.addresses?.map((e)=>e) || [];\n        return message;\n    }\n};\nfunction createBaseParams() {\n    return {\n        codeUploadAccess: undefined,\n        instantiateDefaultPermission: 0\n    };\n}\nconst Params = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.codeUploadAccess !== undefined) {\n            AccessConfig.encode(message.codeUploadAccess, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.instantiateDefaultPermission !== 0) {\n            writer.uint32(16).int32(message.instantiateDefaultPermission);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.codeUploadAccess = AccessConfig.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.instantiateDefaultPermission = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseParams();\n        message.codeUploadAccess = object.codeUploadAccess !== undefined && object.codeUploadAccess !== null ? AccessConfig.fromPartial(object.codeUploadAccess) : undefined;\n        message.instantiateDefaultPermission = object.instantiateDefaultPermission ?? 0;\n        return message;\n    }\n};\nfunction createBaseCodeInfo() {\n    return {\n        codeHash: new Uint8Array(),\n        creator: \"\",\n        instantiateConfig: undefined\n    };\n}\nconst CodeInfo = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.codeHash.length !== 0) {\n            writer.uint32(10).bytes(message.codeHash);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(18).string(message.creator);\n        }\n        if (message.instantiateConfig !== undefined) {\n            AccessConfig.encode(message.instantiateConfig, writer.uint32(42).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCodeInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.codeHash = reader.bytes();\n                    break;\n                case 2:\n                    message.creator = reader.string();\n                    break;\n                case 5:\n                    message.instantiateConfig = AccessConfig.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCodeInfo();\n        message.codeHash = object.codeHash ?? new Uint8Array();\n        message.creator = object.creator ?? \"\";\n        message.instantiateConfig = object.instantiateConfig !== undefined && object.instantiateConfig !== null ? AccessConfig.fromPartial(object.instantiateConfig) : undefined;\n        return message;\n    }\n};\nfunction createBaseContractInfo() {\n    return {\n        codeId: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO,\n        creator: \"\",\n        admin: \"\",\n        label: \"\",\n        created: undefined,\n        ibcPortId: \"\",\n        extension: undefined\n    };\n}\nconst ContractInfo = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (!message.codeId.isZero()) {\n            writer.uint32(8).uint64(message.codeId);\n        }\n        if (message.creator !== \"\") {\n            writer.uint32(18).string(message.creator);\n        }\n        if (message.admin !== \"\") {\n            writer.uint32(26).string(message.admin);\n        }\n        if (message.label !== \"\") {\n            writer.uint32(34).string(message.label);\n        }\n        if (message.created !== undefined) {\n            AbsoluteTxPosition.encode(message.created, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.ibcPortId !== \"\") {\n            writer.uint32(50).string(message.ibcPortId);\n        }\n        if (message.extension !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.extension, writer.uint32(58).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContractInfo();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.codeId = reader.uint64();\n                    break;\n                case 2:\n                    message.creator = reader.string();\n                    break;\n                case 3:\n                    message.admin = reader.string();\n                    break;\n                case 4:\n                    message.label = reader.string();\n                    break;\n                case 5:\n                    message.created = AbsoluteTxPosition.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.ibcPortId = reader.string();\n                    break;\n                case 7:\n                    message.extension = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseContractInfo();\n        message.codeId = object.codeId !== undefined && object.codeId !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.codeId) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        message.creator = object.creator ?? \"\";\n        message.admin = object.admin ?? \"\";\n        message.label = object.label ?? \"\";\n        message.created = object.created !== undefined && object.created !== null ? AbsoluteTxPosition.fromPartial(object.created) : undefined;\n        message.ibcPortId = object.ibcPortId ?? \"\";\n        message.extension = object.extension !== undefined && object.extension !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.extension) : undefined;\n        return message;\n    }\n};\nfunction createBaseContractCodeHistoryEntry() {\n    return {\n        operation: 0,\n        codeId: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO,\n        updated: undefined,\n        msg: new Uint8Array()\n    };\n}\nconst ContractCodeHistoryEntry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.operation !== 0) {\n            writer.uint32(8).int32(message.operation);\n        }\n        if (!message.codeId.isZero()) {\n            writer.uint32(16).uint64(message.codeId);\n        }\n        if (message.updated !== undefined) {\n            AbsoluteTxPosition.encode(message.updated, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.msg.length !== 0) {\n            writer.uint32(34).bytes(message.msg);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseContractCodeHistoryEntry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.operation = reader.int32();\n                    break;\n                case 2:\n                    message.codeId = reader.uint64();\n                    break;\n                case 3:\n                    message.updated = AbsoluteTxPosition.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.msg = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseContractCodeHistoryEntry();\n        message.operation = object.operation ?? 0;\n        message.codeId = object.codeId !== undefined && object.codeId !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.codeId) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        message.updated = object.updated !== undefined && object.updated !== null ? AbsoluteTxPosition.fromPartial(object.updated) : undefined;\n        message.msg = object.msg ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseAbsoluteTxPosition() {\n    return {\n        blockHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO,\n        txIndex: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO\n    };\n}\nconst AbsoluteTxPosition = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (!message.blockHeight.isZero()) {\n            writer.uint32(8).uint64(message.blockHeight);\n        }\n        if (!message.txIndex.isZero()) {\n            writer.uint32(16).uint64(message.txIndex);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAbsoluteTxPosition();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.blockHeight = reader.uint64();\n                    break;\n                case 2:\n                    message.txIndex = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseAbsoluteTxPosition();\n        message.blockHeight = object.blockHeight !== undefined && object.blockHeight !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.blockHeight) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        message.txIndex = object.txIndex !== undefined && object.txIndex !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.txIndex) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        return message;\n    }\n};\nfunction createBaseModel() {\n    return {\n        key: new Uint8Array(),\n        value: new Uint8Array()\n    };\n}\nconst Model = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.key.length !== 0) {\n            writer.uint32(10).bytes(message.key);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseModel();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.key = reader.bytes();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseModel();\n        message.key = object.key ?? new Uint8Array();\n        message.value = object.value ?? new Uint8Array();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/cosmwasm/wasm/v1/types.ts\n");

/***/ }),

/***/ "./src/codegen/google/protobuf/any.ts":
/*!********************************************!*\
  !*** ./src/codegen/google/protobuf/any.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Any\": () => (/* binding */ Any)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction createBaseAny() {\n    return {\n        typeUrl: \"\",\n        value: new Uint8Array()\n    };\n}\nconst Any = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer.create()) {\n        if (message.typeUrl !== \"\") {\n            writer.uint32(10).string(message.typeUrl);\n        }\n        if (message.value.length !== 0) {\n            writer.uint32(18).bytes(message.value);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAny();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.typeUrl = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseAny();\n        message.typeUrl = object.typeUrl ?? \"\";\n        message.value = object.value ?? new Uint8Array();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/google/protobuf/any.ts\n");

/***/ }),

/***/ "./src/codegen/google/protobuf/timestamp.ts":
/*!**************************************************!*\
  !*** ./src/codegen/google/protobuf/timestamp.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Timestamp\": () => (/* binding */ Timestamp)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction createBaseTimestamp() {\n    return {\n        seconds: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.ZERO,\n        nanos: 0\n    };\n}\nconst Timestamp = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (!message.seconds.isZero()) {\n            writer.uint32(8).int64(message.seconds);\n        }\n        if (message.nanos !== 0) {\n            writer.uint32(16).int32(message.nanos);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseTimestamp();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.seconds = reader.int64();\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseTimestamp();\n        message.seconds = object.seconds !== undefined && object.seconds !== null ? _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromValue(object.seconds) : _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.ZERO;\n        message.nanos = object.nanos ?? 0;\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/google/protobuf/timestamp.ts\n");

/***/ }),

/***/ "./src/codegen/helpers.ts":
/*!********************************!*\
  !*** ./src/codegen/helpers.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Long\": () => (/* reexport default from dynamic */ long__WEBPACK_IMPORTED_MODULE_1___default.a),\n/* harmony export */   \"base64FromBytes\": () => (/* binding */ base64FromBytes),\n/* harmony export */   \"bytesFromBase64\": () => (/* binding */ bytesFromBase64),\n/* harmony export */   \"fromDuration\": () => (/* binding */ fromDuration),\n/* harmony export */   \"fromJsonTimestamp\": () => (/* binding */ fromJsonTimestamp),\n/* harmony export */   \"fromTimestamp\": () => (/* binding */ fromTimestamp),\n/* harmony export */   \"isObject\": () => (/* binding */ isObject),\n/* harmony export */   \"isSet\": () => (/* binding */ isSet),\n/* harmony export */   \"omitDefault\": () => (/* binding */ omitDefault),\n/* harmony export */   \"setPaginationParams\": () => (/* binding */ setPaginationParams),\n/* harmony export */   \"toDuration\": () => (/* binding */ toDuration),\n/* harmony export */   \"toTimestamp\": () => (/* binding */ toTimestamp)\n/* harmony export */ });\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! long */ \"long\");\n/* harmony import */ var long__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(long__WEBPACK_IMPORTED_MODULE_1__);\n/**\n* This file and any referenced files were automatically generated by @osmonauts/telescope@0.94.0\n* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain\n* and run the transpile command or yarn proto command to regenerate this bundle.\n*/ \n\n// @ts-ignore\nif (protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.Long !== (long__WEBPACK_IMPORTED_MODULE_1___default())) {\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.Long = (long__WEBPACK_IMPORTED_MODULE_1___default());\n    protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.configure();\n}\n\nvar globalThis = (()=>{\n    if (typeof globalThis !== \"undefined\") return globalThis;\n    if (typeof self !== \"undefined\") return self;\n    if (false) {}\n    if (typeof global !== \"undefined\") return global;\n    throw \"Unable to locate global object\";\n})();\nconst atob = globalThis.atob || ((b64)=>globalThis.Buffer.from(b64, \"base64\").toString(\"binary\"));\nfunction bytesFromBase64(b64) {\n    const bin = atob(b64);\n    const arr = new Uint8Array(bin.length);\n    for(let i = 0; i < bin.length; ++i){\n        arr[i] = bin.charCodeAt(i);\n    }\n    return arr;\n}\nconst btoa = globalThis.btoa || ((bin)=>globalThis.Buffer.from(bin, \"binary\").toString(\"base64\"));\nfunction base64FromBytes(arr) {\n    const bin = [];\n    arr.forEach((byte)=>{\n        bin.push(String.fromCharCode(byte));\n    });\n    return btoa(bin.join(\"\"));\n}\nfunction omitDefault(input) {\n    if (typeof input === \"string\") {\n        return input === \"\" ? undefined : input;\n    }\n    if (typeof input === \"number\") {\n        return input === 0 ? undefined : input;\n    }\n    if (long__WEBPACK_IMPORTED_MODULE_1___default().isLong(input)) {\n        return input.isZero() ? undefined : input;\n    }\n    throw new Error(`Got unsupported type ${typeof input}`);\n}\nfunction toDuration(duration) {\n    return {\n        seconds: long__WEBPACK_IMPORTED_MODULE_1___default().fromNumber(Math.floor(parseInt(duration) / 1000000000)),\n        nanos: parseInt(duration) % 1000000000\n    };\n}\nfunction fromDuration(duration) {\n    return (parseInt(duration.seconds.toString()) * 1000000000 + duration.nanos).toString();\n}\nfunction isSet(value) {\n    return value !== null && value !== undefined;\n}\nfunction isObject(value) {\n    return typeof value === \"object\" && value !== null;\n}\nconst setPaginationParams = (options, pagination)=>{\n    if (!pagination) {\n        return options;\n    }\n    if (typeof pagination?.countTotal !== \"undefined\") {\n        options.params[\"pagination.count_total\"] = pagination.countTotal;\n    }\n    if (typeof pagination?.key !== \"undefined\") {\n        // String to Uint8Array\n        // let uint8arr = new Uint8Array(Buffer.from(data,'base64')); \n        // Uint8Array to String\n        options.params[\"pagination.key\"] = Buffer.from(pagination.key).toString(\"base64\");\n    }\n    if (typeof pagination?.limit !== \"undefined\") {\n        options.params[\"pagination.limit\"] = pagination.limit.toString();\n    }\n    if (typeof pagination?.offset !== \"undefined\") {\n        options.params[\"pagination.offset\"] = pagination.offset.toString();\n    }\n    if (typeof pagination?.reverse !== \"undefined\") {\n        options.params[\"pagination.reverse\"] = pagination.reverse;\n    }\n    return options;\n};\nfunction toTimestamp(date) {\n    const seconds = numberToLong(date.getTime() / 1000);\n    const nanos = date.getTime() % 1000 * 1000000;\n    return {\n        seconds,\n        nanos\n    };\n}\nfunction fromTimestamp(t) {\n    let millis = t.seconds.toNumber() * 1000;\n    millis += t.nanos / 1000000;\n    return new Date(millis);\n}\nconst fromJSON = (object)=>{\n    return {\n        seconds: isSet(object.seconds) ? long__WEBPACK_IMPORTED_MODULE_1___default().fromString(object.seconds) : (long__WEBPACK_IMPORTED_MODULE_1___default().ZERO),\n        nanos: isSet(object.nanos) ? Number(object.nanos) : 0\n    };\n};\nconst timestampFromJSON = (object)=>{\n    return {\n        seconds: isSet(object.seconds) ? long__WEBPACK_IMPORTED_MODULE_1___default().fromValue(object.seconds) : (long__WEBPACK_IMPORTED_MODULE_1___default().ZERO),\n        nanos: isSet(object.nanos) ? Number(object.nanos) : 0\n    };\n};\nfunction fromJsonTimestamp(o) {\n    if (o instanceof Date) {\n        return toTimestamp(o);\n    } else if (typeof o === \"string\") {\n        return toTimestamp(new Date(o));\n    } else {\n        return timestampFromJSON(o);\n    }\n}\nfunction numberToLong(number) {\n    return long__WEBPACK_IMPORTED_MODULE_1___default().fromNumber(number);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/helpers.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/applications/transfer/v1/tx.amino.ts":
/*!**************************************************************!*\
  !*** ./src/codegen/ibc/applications/transfer/v1/tx.amino.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AminoConverter\": () => (/* binding */ AminoConverter)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n\nconst AminoConverter = {\n    \"/ibc.applications.transfer.v1.MsgTransfer\": {\n        aminoType: \"cosmos-sdk/MsgTransfer\",\n        toAmino: ({ sourcePort , sourceChannel , token , sender , receiver , timeoutHeight , timeoutTimestamp  })=>{\n            return {\n                source_port: sourcePort,\n                source_channel: sourceChannel,\n                token: {\n                    denom: token.denom,\n                    amount: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromValue(token.amount).toString()\n                },\n                sender,\n                receiver,\n                timeout_height: timeoutHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(timeoutHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(timeoutHeight.revisionNumber)?.toString()\n                } : {},\n                timeout_timestamp: timeoutTimestamp.toString()\n            };\n        },\n        fromAmino: ({ source_port , source_channel , token , sender , receiver , timeout_height , timeout_timestamp  })=>{\n            return {\n                sourcePort: source_port,\n                sourceChannel: source_channel,\n                token: {\n                    denom: token.denom,\n                    amount: token.amount\n                },\n                sender,\n                receiver,\n                timeoutHeight: timeout_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(timeout_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(timeout_height.revision_number || \"0\", true)\n                } : undefined,\n                timeoutTimestamp: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(timeout_timestamp)\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29kZWdlbi9pYmMvYXBwbGljYXRpb25zL3RyYW5zZmVyL3YxL3R4LmFtaW5vLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQ3FFO0FBaUI5RCxNQUFNRSxpQkFBaUI7SUFDNUIsNkNBQTZDO1FBQzNDQyxXQUFXO1FBQ1hDLFNBQVMsQ0FBQyxFQUNSQyxXQUFVLEVBQ1ZDLGNBQWEsRUFDYkMsTUFBSyxFQUNMQyxPQUFNLEVBQ05DLFNBQVEsRUFDUkMsY0FBYSxFQUNiQyxpQkFBZ0IsRUFDSixHQUFvQztZQUNoRCxPQUFPO2dCQUNMQyxhQUFhUDtnQkFDYlEsZ0JBQWdCUDtnQkFDaEJDLE9BQU87b0JBQ0xPLE9BQU9QLE1BQU1PLEtBQUs7b0JBQ2xCQyxRQUFRZixvREFBYyxDQUFDTyxNQUFNUSxNQUFNLEVBQUVFLFFBQVE7Z0JBQy9DO2dCQUNBVDtnQkFDQUM7Z0JBQ0FTLGdCQUFnQlIsZ0JBQWdCO29CQUM5QlMsaUJBQWlCbEIscURBQVdBLENBQUNTLGNBQWNVLGNBQWMsR0FBR0g7b0JBQzVESSxpQkFBaUJwQixxREFBV0EsQ0FBQ1MsY0FBY1ksY0FBYyxHQUFHTDtnQkFDOUQsSUFBSSxDQUFDLENBQUM7Z0JBQ05NLG1CQUFtQlosaUJBQWlCTSxRQUFRO1lBQzlDO1FBQ0Y7UUFDQU8sV0FBVyxDQUFDLEVBQ1ZaLFlBQVcsRUFDWEMsZUFBYyxFQUNkTixNQUFLLEVBQ0xDLE9BQU0sRUFDTkMsU0FBUSxFQUNSUyxlQUFjLEVBQ2RLLGtCQUFpQixFQUNhLEdBQWtCO1lBQ2hELE9BQU87Z0JBQ0xsQixZQUFZTztnQkFDWk4sZUFBZU87Z0JBQ2ZOLE9BQU87b0JBQ0xPLE9BQU9QLE1BQU1PLEtBQUs7b0JBQ2xCQyxRQUFRUixNQUFNUSxNQUFNO2dCQUN0QjtnQkFDQVA7Z0JBQ0FDO2dCQUNBQyxlQUFlUSxpQkFBaUI7b0JBQzlCRSxnQkFBZ0JwQixxREFBZSxDQUFDa0IsZUFBZUMsZUFBZSxJQUFJLEtBQUssSUFBSTtvQkFDM0VHLGdCQUFnQnRCLHFEQUFlLENBQUNrQixlQUFlRyxlQUFlLElBQUksS0FBSyxJQUFJO2dCQUM3RSxJQUFJSyxTQUFTO2dCQUNiZixrQkFBa0JYLHFEQUFlLENBQUN1QjtZQUNwQztRQUNGO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvY29kZWdlbi9pYmMvYXBwbGljYXRpb25zL3RyYW5zZmVyL3YxL3R4LmFtaW5vLnRzP2RjZmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQW1pbm9Nc2cgfSBmcm9tIFwiQGNvc21qcy9hbWlub1wiO1xuaW1wb3J0IHsgQW1pbm9IZWlnaHQsIExvbmcsIG9taXREZWZhdWx0IH0gZnJvbSBcIi4uLy4uLy4uLy4uL2hlbHBlcnNcIjtcbmltcG9ydCB7IE1zZ1RyYW5zZmVyIH0gZnJvbSBcIi4vdHhcIjtcbmV4cG9ydCBpbnRlcmZhY2UgTXNnVHJhbnNmZXJBbWlub1R5cGUgZXh0ZW5kcyBBbWlub01zZyB7XG4gIHR5cGU6IFwiY29zbW9zLXNkay9Nc2dUcmFuc2ZlclwiO1xuICB2YWx1ZToge1xuICAgIHNvdXJjZV9wb3J0OiBzdHJpbmc7XG4gICAgc291cmNlX2NoYW5uZWw6IHN0cmluZztcbiAgICB0b2tlbjoge1xuICAgICAgZGVub206IHN0cmluZztcbiAgICAgIGFtb3VudDogc3RyaW5nO1xuICAgIH07XG4gICAgc2VuZGVyOiBzdHJpbmc7XG4gICAgcmVjZWl2ZXI6IHN0cmluZztcbiAgICB0aW1lb3V0X2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgdGltZW91dF90aW1lc3RhbXA6IHN0cmluZztcbiAgfTtcbn1cbmV4cG9ydCBjb25zdCBBbWlub0NvbnZlcnRlciA9IHtcbiAgXCIvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlclwiOiB7XG4gICAgYW1pbm9UeXBlOiBcImNvc21vcy1zZGsvTXNnVHJhbnNmZXJcIixcbiAgICB0b0FtaW5vOiAoe1xuICAgICAgc291cmNlUG9ydCxcbiAgICAgIHNvdXJjZUNoYW5uZWwsXG4gICAgICB0b2tlbixcbiAgICAgIHNlbmRlcixcbiAgICAgIHJlY2VpdmVyLFxuICAgICAgdGltZW91dEhlaWdodCxcbiAgICAgIHRpbWVvdXRUaW1lc3RhbXBcbiAgICB9OiBNc2dUcmFuc2Zlcik6IE1zZ1RyYW5zZmVyQW1pbm9UeXBlW1widmFsdWVcIl0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlX3BvcnQ6IHNvdXJjZVBvcnQsXG4gICAgICAgIHNvdXJjZV9jaGFubmVsOiBzb3VyY2VDaGFubmVsLFxuICAgICAgICB0b2tlbjoge1xuICAgICAgICAgIGRlbm9tOiB0b2tlbi5kZW5vbSxcbiAgICAgICAgICBhbW91bnQ6IExvbmcuZnJvbVZhbHVlKHRva2VuLmFtb3VudCkudG9TdHJpbmcoKVxuICAgICAgICB9LFxuICAgICAgICBzZW5kZXIsXG4gICAgICAgIHJlY2VpdmVyLFxuICAgICAgICB0aW1lb3V0X2hlaWdodDogdGltZW91dEhlaWdodCA/IHtcbiAgICAgICAgICByZXZpc2lvbl9oZWlnaHQ6IG9taXREZWZhdWx0KHRpbWVvdXRIZWlnaHQucmV2aXNpb25IZWlnaHQpPy50b1N0cmluZygpLFxuICAgICAgICAgIHJldmlzaW9uX251bWJlcjogb21pdERlZmF1bHQodGltZW91dEhlaWdodC5yZXZpc2lvbk51bWJlcik/LnRvU3RyaW5nKClcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICB0aW1lb3V0X3RpbWVzdGFtcDogdGltZW91dFRpbWVzdGFtcC50b1N0cmluZygpXG4gICAgICB9O1xuICAgIH0sXG4gICAgZnJvbUFtaW5vOiAoe1xuICAgICAgc291cmNlX3BvcnQsXG4gICAgICBzb3VyY2VfY2hhbm5lbCxcbiAgICAgIHRva2VuLFxuICAgICAgc2VuZGVyLFxuICAgICAgcmVjZWl2ZXIsXG4gICAgICB0aW1lb3V0X2hlaWdodCxcbiAgICAgIHRpbWVvdXRfdGltZXN0YW1wXG4gICAgfTogTXNnVHJhbnNmZXJBbWlub1R5cGVbXCJ2YWx1ZVwiXSk6IE1zZ1RyYW5zZmVyID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNvdXJjZVBvcnQ6IHNvdXJjZV9wb3J0LFxuICAgICAgICBzb3VyY2VDaGFubmVsOiBzb3VyY2VfY2hhbm5lbCxcbiAgICAgICAgdG9rZW46IHtcbiAgICAgICAgICBkZW5vbTogdG9rZW4uZGVub20sXG4gICAgICAgICAgYW1vdW50OiB0b2tlbi5hbW91bnRcbiAgICAgICAgfSxcbiAgICAgICAgc2VuZGVyLFxuICAgICAgICByZWNlaXZlcixcbiAgICAgICAgdGltZW91dEhlaWdodDogdGltZW91dF9oZWlnaHQgPyB7XG4gICAgICAgICAgcmV2aXNpb25IZWlnaHQ6IExvbmcuZnJvbVN0cmluZyh0aW1lb3V0X2hlaWdodC5yZXZpc2lvbl9oZWlnaHQgfHwgXCIwXCIsIHRydWUpLFxuICAgICAgICAgIHJldmlzaW9uTnVtYmVyOiBMb25nLmZyb21TdHJpbmcodGltZW91dF9oZWlnaHQucmV2aXNpb25fbnVtYmVyIHx8IFwiMFwiLCB0cnVlKVxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICB0aW1lb3V0VGltZXN0YW1wOiBMb25nLmZyb21TdHJpbmcodGltZW91dF90aW1lc3RhbXApXG4gICAgICB9O1xuICAgIH1cbiAgfVxufTsiXSwibmFtZXMiOlsiTG9uZyIsIm9taXREZWZhdWx0IiwiQW1pbm9Db252ZXJ0ZXIiLCJhbWlub1R5cGUiLCJ0b0FtaW5vIiwic291cmNlUG9ydCIsInNvdXJjZUNoYW5uZWwiLCJ0b2tlbiIsInNlbmRlciIsInJlY2VpdmVyIiwidGltZW91dEhlaWdodCIsInRpbWVvdXRUaW1lc3RhbXAiLCJzb3VyY2VfcG9ydCIsInNvdXJjZV9jaGFubmVsIiwiZGVub20iLCJhbW91bnQiLCJmcm9tVmFsdWUiLCJ0b1N0cmluZyIsInRpbWVvdXRfaGVpZ2h0IiwicmV2aXNpb25faGVpZ2h0IiwicmV2aXNpb25IZWlnaHQiLCJyZXZpc2lvbl9udW1iZXIiLCJyZXZpc2lvbk51bWJlciIsInRpbWVvdXRfdGltZXN0YW1wIiwiZnJvbUFtaW5vIiwiZnJvbVN0cmluZyIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/codegen/ibc/applications/transfer/v1/tx.amino.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/applications/transfer/v1/tx.registry.ts":
/*!*****************************************************************!*\
  !*** ./src/codegen/ibc/applications/transfer/v1/tx.registry.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MessageComposer\": () => (/* binding */ MessageComposer),\n/* harmony export */   \"load\": () => (/* binding */ load),\n/* harmony export */   \"registry\": () => (/* binding */ registry)\n/* harmony export */ });\n/* harmony import */ var _tx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tx */ \"./src/codegen/ibc/applications/transfer/v1/tx.ts\");\n\nconst registry = [\n    [\n        \"/ibc.applications.transfer.v1.MsgTransfer\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTransfer\n    ]\n];\nconst load = (protoRegistry)=>{\n    registry.forEach(([typeUrl, mod])=>{\n        protoRegistry.register(typeUrl, mod);\n    });\n};\nconst MessageComposer = {\n    encoded: {\n        transfer (value) {\n            return {\n                typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTransfer.encode(value).finish()\n            };\n        }\n    },\n    withTypeUrl: {\n        transfer (value) {\n            return {\n                typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n                value\n            };\n        }\n    },\n    fromPartial: {\n        transfer (value) {\n            return {\n                typeUrl: \"/ibc.applications.transfer.v1.MsgTransfer\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTransfer.fromPartial(value)\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29kZWdlbi9pYmMvYXBwbGljYXRpb25zL3RyYW5zZmVyL3YxL3R4LnJlZ2lzdHJ5LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDbUM7QUFDNUIsTUFBTUMsV0FBbUQ7SUFBQztRQUFDO1FBQTZDRCw0Q0FBV0E7S0FBQztDQUFDLENBQUM7QUFDdEgsTUFBTUUsT0FBTyxDQUFDQyxnQkFBNEI7SUFDL0NGLFNBQVNHLE9BQU8sQ0FBQyxDQUFDLENBQUNDLFNBQVNDLElBQUksR0FBSztRQUNuQ0gsY0FBY0ksUUFBUSxDQUFDRixTQUFTQztJQUNsQztBQUNGLEVBQUU7QUFDSyxNQUFNRSxrQkFBa0I7SUFDN0JDLFNBQVM7UUFDUEMsVUFBU0MsS0FBa0IsRUFBRTtZQUMzQixPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWCxtREFBa0IsQ0FBQ1csT0FBT0UsTUFBTTtZQUN6QztRQUNGO0lBQ0Y7SUFDQUMsYUFBYTtRQUNYSixVQUFTQyxLQUFrQixFQUFFO1lBQzNCLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNO1lBQ0Y7UUFDRjtJQUNGO0lBQ0FJLGFBQWE7UUFDWEwsVUFBU0MsS0FBa0IsRUFBRTtZQUMzQixPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWCx3REFBdUIsQ0FBQ1c7WUFDakM7UUFDRjtJQUNGO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vc3JjL2NvZGVnZW4vaWJjL2FwcGxpY2F0aW9ucy90cmFuc2Zlci92MS90eC5yZWdpc3RyeS50cz9mOWJhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlbmVyYXRlZFR5cGUsIFJlZ2lzdHJ5IH0gZnJvbSBcIkBjb3NtanMvcHJvdG8tc2lnbmluZ1wiO1xuaW1wb3J0IHsgTXNnVHJhbnNmZXIgfSBmcm9tIFwiLi90eFwiO1xuZXhwb3J0IGNvbnN0IHJlZ2lzdHJ5OiBSZWFkb25seUFycmF5PFtzdHJpbmcsIEdlbmVyYXRlZFR5cGVdPiA9IFtbXCIvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlclwiLCBNc2dUcmFuc2Zlcl1dO1xuZXhwb3J0IGNvbnN0IGxvYWQgPSAocHJvdG9SZWdpc3RyeTogUmVnaXN0cnkpID0+IHtcbiAgcmVnaXN0cnkuZm9yRWFjaCgoW3R5cGVVcmwsIG1vZF0pID0+IHtcbiAgICBwcm90b1JlZ2lzdHJ5LnJlZ2lzdGVyKHR5cGVVcmwsIG1vZCk7XG4gIH0pO1xufTtcbmV4cG9ydCBjb25zdCBNZXNzYWdlQ29tcG9zZXIgPSB7XG4gIGVuY29kZWQ6IHtcbiAgICB0cmFuc2Zlcih2YWx1ZTogTXNnVHJhbnNmZXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVVcmw6IFwiL2liYy5hcHBsaWNhdGlvbnMudHJhbnNmZXIudjEuTXNnVHJhbnNmZXJcIixcbiAgICAgICAgdmFsdWU6IE1zZ1RyYW5zZmVyLmVuY29kZSh2YWx1ZSkuZmluaXNoKClcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICB3aXRoVHlwZVVybDoge1xuICAgIHRyYW5zZmVyKHZhbHVlOiBNc2dUcmFuc2Zlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmFwcGxpY2F0aW9ucy50cmFuc2Zlci52MS5Nc2dUcmFuc2ZlclwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIGZyb21QYXJ0aWFsOiB7XG4gICAgdHJhbnNmZXIodmFsdWU6IE1zZ1RyYW5zZmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuYXBwbGljYXRpb25zLnRyYW5zZmVyLnYxLk1zZ1RyYW5zZmVyXCIsXG4gICAgICAgIHZhbHVlOiBNc2dUcmFuc2Zlci5mcm9tUGFydGlhbCh2YWx1ZSlcbiAgICAgIH07XG4gICAgfVxuICB9XG59OyJdLCJuYW1lcyI6WyJNc2dUcmFuc2ZlciIsInJlZ2lzdHJ5IiwibG9hZCIsInByb3RvUmVnaXN0cnkiLCJmb3JFYWNoIiwidHlwZVVybCIsIm1vZCIsInJlZ2lzdGVyIiwiTWVzc2FnZUNvbXBvc2VyIiwiZW5jb2RlZCIsInRyYW5zZmVyIiwidmFsdWUiLCJlbmNvZGUiLCJmaW5pc2giLCJ3aXRoVHlwZVVybCIsImZyb21QYXJ0aWFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/codegen/ibc/applications/transfer/v1/tx.registry.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/applications/transfer/v1/tx.ts":
/*!********************************************************!*\
  !*** ./src/codegen/ibc/applications/transfer/v1/tx.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MsgTransfer\": () => (/* binding */ MsgTransfer),\n/* harmony export */   \"MsgTransferResponse\": () => (/* binding */ MsgTransferResponse)\n/* harmony export */ });\n/* harmony import */ var _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../cosmos/base/v1beta1/coin */ \"./src/codegen/cosmos/base/v1beta1/coin.ts\");\n/* harmony import */ var _core_client_v1_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../core/client/v1/client */ \"./src/codegen/ibc/core/client/v1/client.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction createBaseMsgTransfer() {\n    return {\n        sourcePort: \"\",\n        sourceChannel: \"\",\n        token: undefined,\n        sender: \"\",\n        receiver: \"\",\n        timeoutHeight: undefined,\n        timeoutTimestamp: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO\n    };\n}\nconst MsgTransfer = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.sourcePort !== \"\") {\n            writer.uint32(10).string(message.sourcePort);\n        }\n        if (message.sourceChannel !== \"\") {\n            writer.uint32(18).string(message.sourceChannel);\n        }\n        if (message.token !== undefined) {\n            _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_0__.Coin.encode(message.token, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.sender !== \"\") {\n            writer.uint32(34).string(message.sender);\n        }\n        if (message.receiver !== \"\") {\n            writer.uint32(42).string(message.receiver);\n        }\n        if (message.timeoutHeight !== undefined) {\n            _core_client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.timeoutHeight, writer.uint32(50).fork()).ldelim();\n        }\n        if (!message.timeoutTimestamp.isZero()) {\n            writer.uint32(56).uint64(message.timeoutTimestamp);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTransfer();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sourcePort = reader.string();\n                    break;\n                case 2:\n                    message.sourceChannel = reader.string();\n                    break;\n                case 3:\n                    message.token = _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_0__.Coin.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.sender = reader.string();\n                    break;\n                case 5:\n                    message.receiver = reader.string();\n                    break;\n                case 6:\n                    message.timeoutHeight = _core_client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.timeoutTimestamp = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgTransfer();\n        message.sourcePort = object.sourcePort ?? \"\";\n        message.sourceChannel = object.sourceChannel ?? \"\";\n        message.token = object.token !== undefined && object.token !== null ? _cosmos_base_v1beta1_coin__WEBPACK_IMPORTED_MODULE_0__.Coin.fromPartial(object.token) : undefined;\n        message.sender = object.sender ?? \"\";\n        message.receiver = object.receiver ?? \"\";\n        message.timeoutHeight = object.timeoutHeight !== undefined && object.timeoutHeight !== null ? _core_client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.timeoutHeight) : undefined;\n        message.timeoutTimestamp = object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.timeoutTimestamp) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        return message;\n    }\n};\nfunction createBaseMsgTransferResponse() {\n    return {};\n}\nconst MsgTransferResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTransferResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgTransferResponse();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/applications/transfer/v1/tx.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/client.ts":
/*!***********************************!*\
  !*** ./src/codegen/ibc/client.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSigningIbcClient\": () => (/* binding */ getSigningIbcClient),\n/* harmony export */   \"getSigningIbcClientOptions\": () => (/* binding */ getSigningIbcClientOptions),\n/* harmony export */   \"ibcAminoConverters\": () => (/* binding */ ibcAminoConverters),\n/* harmony export */   \"ibcProtoRegistry\": () => (/* binding */ ibcProtoRegistry)\n/* harmony export */ });\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cosmjs/proto-signing */ \"@cosmjs/proto-signing\");\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cosmjs/stargate */ \"@cosmjs/stargate\");\n/* harmony import */ var _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _applications_transfer_v1_tx_registry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./applications/transfer/v1/tx.registry */ \"./src/codegen/ibc/applications/transfer/v1/tx.registry.ts\");\n/* harmony import */ var _core_channel_v1_tx_registry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/channel/v1/tx.registry */ \"./src/codegen/ibc/core/channel/v1/tx.registry.ts\");\n/* harmony import */ var _core_client_v1_tx_registry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/client/v1/tx.registry */ \"./src/codegen/ibc/core/client/v1/tx.registry.ts\");\n/* harmony import */ var _core_connection_v1_tx_registry__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./core/connection/v1/tx.registry */ \"./src/codegen/ibc/core/connection/v1/tx.registry.ts\");\n/* harmony import */ var _applications_transfer_v1_tx_amino__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./applications/transfer/v1/tx.amino */ \"./src/codegen/ibc/applications/transfer/v1/tx.amino.ts\");\n/* harmony import */ var _core_channel_v1_tx_amino__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./core/channel/v1/tx.amino */ \"./src/codegen/ibc/core/channel/v1/tx.amino.ts\");\n/* harmony import */ var _core_client_v1_tx_amino__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./core/client/v1/tx.amino */ \"./src/codegen/ibc/core/client/v1/tx.amino.ts\");\n/* harmony import */ var _core_connection_v1_tx_amino__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./core/connection/v1/tx.amino */ \"./src/codegen/ibc/core/connection/v1/tx.amino.ts\");\n\n\n\n\n\n\n\n\n\n\nconst ibcAminoConverters = {\n    ..._applications_transfer_v1_tx_amino__WEBPACK_IMPORTED_MODULE_6__.AminoConverter,\n    ..._core_channel_v1_tx_amino__WEBPACK_IMPORTED_MODULE_7__.AminoConverter,\n    ..._core_client_v1_tx_amino__WEBPACK_IMPORTED_MODULE_8__.AminoConverter,\n    ..._core_connection_v1_tx_amino__WEBPACK_IMPORTED_MODULE_9__.AminoConverter\n};\nconst ibcProtoRegistry = [\n    ..._applications_transfer_v1_tx_registry__WEBPACK_IMPORTED_MODULE_2__.registry,\n    ..._core_channel_v1_tx_registry__WEBPACK_IMPORTED_MODULE_3__.registry,\n    ..._core_client_v1_tx_registry__WEBPACK_IMPORTED_MODULE_4__.registry,\n    ..._core_connection_v1_tx_registry__WEBPACK_IMPORTED_MODULE_5__.registry\n];\nconst getSigningIbcClientOptions = ({ defaultTypes =_cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.defaultRegistryTypes  } = {})=>{\n    const registry = new _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_0__.Registry([\n        ...defaultTypes,\n        ...ibcProtoRegistry\n    ]);\n    const aminoTypes = new _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.AminoTypes({\n        ...ibcAminoConverters\n    });\n    return {\n        registry,\n        aminoTypes\n    };\n};\nconst getSigningIbcClient = async ({ rpcEndpoint , signer , defaultTypes =_cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.defaultRegistryTypes  })=>{\n    const { registry , aminoTypes  } = getSigningIbcClientOptions({\n        defaultTypes\n    });\n    const client = await _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_1__.SigningStargateClient.connectWithSigner(rpcEndpoint, signer, {\n        registry,\n        aminoTypes\n    });\n    return client;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29kZWdlbi9pYmMvY2xpZW50LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0U7QUFDWTtBQUVHO0FBQ2xCO0FBQ0Y7QUFDUTtBQUNNO0FBQ2xCO0FBQ0Y7QUFDUTtBQUNyRSxNQUFNWSxxQkFBcUI7SUFDaEMsR0FBR0osOEVBQStDO0lBQ2xELEdBQUdDLHFFQUFzQztJQUN6QyxHQUFHQyxvRUFBcUM7SUFDeEMsR0FBR0Msd0VBQXlDO0FBQzlDLEVBQUU7QUFDSyxNQUFNRyxtQkFBMkQ7T0FBSVYsMkVBQTRDO09BQUtDLGtFQUFtQztPQUFLQyxpRUFBa0M7T0FBS0MscUVBQXNDO0NBQUMsQ0FBQztBQUM3TyxNQUFNUyw2QkFBNkIsQ0FBQyxFQUN6Q0MsY0FBZWhCLGtFQUFvQkEsQ0FBQSxFQUdwQyxHQUFHLENBQUMsQ0FBQyxHQUdEO0lBQ0gsTUFBTWMsV0FBVyxJQUFJZiwyREFBUUEsQ0FBQztXQUFJaUI7V0FBaUJIO0tBQWlCO0lBQ3BFLE1BQU1JLGFBQWEsSUFBSWhCLHdEQUFVQSxDQUFDO1FBQ2hDLEdBQUdVLGtCQUFrQjtJQUN2QjtJQUNBLE9BQU87UUFDTEc7UUFDQUc7SUFDRjtBQUNGLEVBQUU7QUFDSyxNQUFNQyxzQkFBc0IsT0FBTyxFQUN4Q0MsWUFBVyxFQUNYQyxPQUFNLEVBQ05KLGNBQWVoQixrRUFBb0JBLENBQUEsRUFLcEMsR0FBSztJQUNKLE1BQU0sRUFDSmMsU0FBUSxFQUNSRyxXQUFVLEVBQ1gsR0FBR0YsMkJBQTJCO1FBQzdCQztJQUNGO0lBQ0EsTUFBTUssU0FBUyxNQUFNbkIscUZBQXVDLENBQUNpQixhQUFhQyxRQUFRO1FBQ2hGTjtRQUNBRztJQUNGO0lBQ0EsT0FBT0k7QUFDVCxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvY29kZWdlbi9pYmMvY2xpZW50LnRzP2JlNWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2VuZXJhdGVkVHlwZSwgUmVnaXN0cnksIE9mZmxpbmVTaWduZXIgfSBmcm9tIFwiQGNvc21qcy9wcm90by1zaWduaW5nXCI7XG5pbXBvcnQgeyBkZWZhdWx0UmVnaXN0cnlUeXBlcywgQW1pbm9UeXBlcywgU2lnbmluZ1N0YXJnYXRlQ2xpZW50IH0gZnJvbSBcIkBjb3NtanMvc3RhcmdhdGVcIjtcbmltcG9ydCB7IEh0dHBFbmRwb2ludCB9IGZyb20gXCJAY29zbWpzL3RlbmRlcm1pbnQtcnBjXCI7XG5pbXBvcnQgKiBhcyBpYmNBcHBsaWNhdGlvbnNUcmFuc2ZlclYxVHhSZWdpc3RyeSBmcm9tIFwiLi9hcHBsaWNhdGlvbnMvdHJhbnNmZXIvdjEvdHgucmVnaXN0cnlcIjtcbmltcG9ydCAqIGFzIGliY0NvcmVDaGFubmVsVjFUeFJlZ2lzdHJ5IGZyb20gXCIuL2NvcmUvY2hhbm5lbC92MS90eC5yZWdpc3RyeVwiO1xuaW1wb3J0ICogYXMgaWJjQ29yZUNsaWVudFYxVHhSZWdpc3RyeSBmcm9tIFwiLi9jb3JlL2NsaWVudC92MS90eC5yZWdpc3RyeVwiO1xuaW1wb3J0ICogYXMgaWJjQ29yZUNvbm5lY3Rpb25WMVR4UmVnaXN0cnkgZnJvbSBcIi4vY29yZS9jb25uZWN0aW9uL3YxL3R4LnJlZ2lzdHJ5XCI7XG5pbXBvcnQgKiBhcyBpYmNBcHBsaWNhdGlvbnNUcmFuc2ZlclYxVHhBbWlubyBmcm9tIFwiLi9hcHBsaWNhdGlvbnMvdHJhbnNmZXIvdjEvdHguYW1pbm9cIjtcbmltcG9ydCAqIGFzIGliY0NvcmVDaGFubmVsVjFUeEFtaW5vIGZyb20gXCIuL2NvcmUvY2hhbm5lbC92MS90eC5hbWlub1wiO1xuaW1wb3J0ICogYXMgaWJjQ29yZUNsaWVudFYxVHhBbWlubyBmcm9tIFwiLi9jb3JlL2NsaWVudC92MS90eC5hbWlub1wiO1xuaW1wb3J0ICogYXMgaWJjQ29yZUNvbm5lY3Rpb25WMVR4QW1pbm8gZnJvbSBcIi4vY29yZS9jb25uZWN0aW9uL3YxL3R4LmFtaW5vXCI7XG5leHBvcnQgY29uc3QgaWJjQW1pbm9Db252ZXJ0ZXJzID0ge1xuICAuLi5pYmNBcHBsaWNhdGlvbnNUcmFuc2ZlclYxVHhBbWluby5BbWlub0NvbnZlcnRlcixcbiAgLi4uaWJjQ29yZUNoYW5uZWxWMVR4QW1pbm8uQW1pbm9Db252ZXJ0ZXIsXG4gIC4uLmliY0NvcmVDbGllbnRWMVR4QW1pbm8uQW1pbm9Db252ZXJ0ZXIsXG4gIC4uLmliY0NvcmVDb25uZWN0aW9uVjFUeEFtaW5vLkFtaW5vQ29udmVydGVyXG59O1xuZXhwb3J0IGNvbnN0IGliY1Byb3RvUmVnaXN0cnk6IFJlYWRvbmx5QXJyYXk8W3N0cmluZywgR2VuZXJhdGVkVHlwZV0+ID0gWy4uLmliY0FwcGxpY2F0aW9uc1RyYW5zZmVyVjFUeFJlZ2lzdHJ5LnJlZ2lzdHJ5LCAuLi5pYmNDb3JlQ2hhbm5lbFYxVHhSZWdpc3RyeS5yZWdpc3RyeSwgLi4uaWJjQ29yZUNsaWVudFYxVHhSZWdpc3RyeS5yZWdpc3RyeSwgLi4uaWJjQ29yZUNvbm5lY3Rpb25WMVR4UmVnaXN0cnkucmVnaXN0cnldO1xuZXhwb3J0IGNvbnN0IGdldFNpZ25pbmdJYmNDbGllbnRPcHRpb25zID0gKHtcbiAgZGVmYXVsdFR5cGVzID0gZGVmYXVsdFJlZ2lzdHJ5VHlwZXNcbn06IHtcbiAgZGVmYXVsdFR5cGVzPzogUmVhZG9ubHlBcnJheTxbc3RyaW5nLCBHZW5lcmF0ZWRUeXBlXT47XG59ID0ge30pOiB7XG4gIHJlZ2lzdHJ5OiBSZWdpc3RyeTtcbiAgYW1pbm9UeXBlczogQW1pbm9UeXBlcztcbn0gPT4ge1xuICBjb25zdCByZWdpc3RyeSA9IG5ldyBSZWdpc3RyeShbLi4uZGVmYXVsdFR5cGVzLCAuLi5pYmNQcm90b1JlZ2lzdHJ5XSk7XG4gIGNvbnN0IGFtaW5vVHlwZXMgPSBuZXcgQW1pbm9UeXBlcyh7XG4gICAgLi4uaWJjQW1pbm9Db252ZXJ0ZXJzXG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHJlZ2lzdHJ5LFxuICAgIGFtaW5vVHlwZXNcbiAgfTtcbn07XG5leHBvcnQgY29uc3QgZ2V0U2lnbmluZ0liY0NsaWVudCA9IGFzeW5jICh7XG4gIHJwY0VuZHBvaW50LFxuICBzaWduZXIsXG4gIGRlZmF1bHRUeXBlcyA9IGRlZmF1bHRSZWdpc3RyeVR5cGVzXG59OiB7XG4gIHJwY0VuZHBvaW50OiBzdHJpbmcgfCBIdHRwRW5kcG9pbnQ7XG4gIHNpZ25lcjogT2ZmbGluZVNpZ25lcjtcbiAgZGVmYXVsdFR5cGVzPzogUmVhZG9ubHlBcnJheTxbc3RyaW5nLCBHZW5lcmF0ZWRUeXBlXT47XG59KSA9PiB7XG4gIGNvbnN0IHtcbiAgICByZWdpc3RyeSxcbiAgICBhbWlub1R5cGVzXG4gIH0gPSBnZXRTaWduaW5nSWJjQ2xpZW50T3B0aW9ucyh7XG4gICAgZGVmYXVsdFR5cGVzXG4gIH0pO1xuICBjb25zdCBjbGllbnQgPSBhd2FpdCBTaWduaW5nU3RhcmdhdGVDbGllbnQuY29ubmVjdFdpdGhTaWduZXIocnBjRW5kcG9pbnQsIHNpZ25lciwge1xuICAgIHJlZ2lzdHJ5LFxuICAgIGFtaW5vVHlwZXNcbiAgfSk7XG4gIHJldHVybiBjbGllbnQ7XG59OyJdLCJuYW1lcyI6WyJSZWdpc3RyeSIsImRlZmF1bHRSZWdpc3RyeVR5cGVzIiwiQW1pbm9UeXBlcyIsIlNpZ25pbmdTdGFyZ2F0ZUNsaWVudCIsImliY0FwcGxpY2F0aW9uc1RyYW5zZmVyVjFUeFJlZ2lzdHJ5IiwiaWJjQ29yZUNoYW5uZWxWMVR4UmVnaXN0cnkiLCJpYmNDb3JlQ2xpZW50VjFUeFJlZ2lzdHJ5IiwiaWJjQ29yZUNvbm5lY3Rpb25WMVR4UmVnaXN0cnkiLCJpYmNBcHBsaWNhdGlvbnNUcmFuc2ZlclYxVHhBbWlubyIsImliY0NvcmVDaGFubmVsVjFUeEFtaW5vIiwiaWJjQ29yZUNsaWVudFYxVHhBbWlubyIsImliY0NvcmVDb25uZWN0aW9uVjFUeEFtaW5vIiwiaWJjQW1pbm9Db252ZXJ0ZXJzIiwiQW1pbm9Db252ZXJ0ZXIiLCJpYmNQcm90b1JlZ2lzdHJ5IiwicmVnaXN0cnkiLCJnZXRTaWduaW5nSWJjQ2xpZW50T3B0aW9ucyIsImRlZmF1bHRUeXBlcyIsImFtaW5vVHlwZXMiLCJnZXRTaWduaW5nSWJjQ2xpZW50IiwicnBjRW5kcG9pbnQiLCJzaWduZXIiLCJjbGllbnQiLCJjb25uZWN0V2l0aFNpZ25lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/codegen/ibc/client.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/channel/v1/channel.ts":
/*!****************************************************!*\
  !*** ./src/codegen/ibc/core/channel/v1/channel.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Acknowledgement\": () => (/* binding */ Acknowledgement),\n/* harmony export */   \"Channel\": () => (/* binding */ Channel),\n/* harmony export */   \"Counterparty\": () => (/* binding */ Counterparty),\n/* harmony export */   \"IdentifiedChannel\": () => (/* binding */ IdentifiedChannel),\n/* harmony export */   \"Order\": () => (/* binding */ Order),\n/* harmony export */   \"OrderSDKType\": () => (/* binding */ OrderSDKType),\n/* harmony export */   \"Packet\": () => (/* binding */ Packet),\n/* harmony export */   \"PacketState\": () => (/* binding */ PacketState),\n/* harmony export */   \"State\": () => (/* binding */ State),\n/* harmony export */   \"StateSDKType\": () => (/* binding */ StateSDKType),\n/* harmony export */   \"orderFromJSON\": () => (/* binding */ orderFromJSON),\n/* harmony export */   \"orderToJSON\": () => (/* binding */ orderToJSON),\n/* harmony export */   \"stateFromJSON\": () => (/* binding */ stateFromJSON),\n/* harmony export */   \"stateToJSON\": () => (/* binding */ stateToJSON)\n/* harmony export */ });\n/* harmony import */ var _client_v1_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../client/v1/client */ \"./src/codegen/ibc/core/client/v1/client.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nvar State;\n(function(State) {\n    State[State[/** STATE_UNINITIALIZED_UNSPECIFIED - Default State */ \"STATE_UNINITIALIZED_UNSPECIFIED\"] = 0] = \"STATE_UNINITIALIZED_UNSPECIFIED\";\n    State[State[/** STATE_INIT - A channel has just started the opening handshake. */ \"STATE_INIT\"] = 1] = \"STATE_INIT\";\n    State[State[/** STATE_TRYOPEN - A channel has acknowledged the handshake step on the counterparty chain. */ \"STATE_TRYOPEN\"] = 2] = \"STATE_TRYOPEN\";\n    State[State[/**\n   * STATE_OPEN - A channel has completed the handshake. Open channels are\n   * ready to send and receive packets.\n   */ \"STATE_OPEN\"] = 3] = \"STATE_OPEN\";\n    State[State[/**\n   * STATE_CLOSED - A channel has been closed and can no longer be used to send or receive\n   * packets.\n   */ \"STATE_CLOSED\"] = 4] = \"STATE_CLOSED\";\n    State[State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(State || (State = {}));\nconst StateSDKType = State;\nfunction stateFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"STATE_UNINITIALIZED_UNSPECIFIED\":\n            return State.STATE_UNINITIALIZED_UNSPECIFIED;\n        case 1:\n        case \"STATE_INIT\":\n            return State.STATE_INIT;\n        case 2:\n        case \"STATE_TRYOPEN\":\n            return State.STATE_TRYOPEN;\n        case 3:\n        case \"STATE_OPEN\":\n            return State.STATE_OPEN;\n        case 4:\n        case \"STATE_CLOSED\":\n            return State.STATE_CLOSED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return State.UNRECOGNIZED;\n    }\n}\nfunction stateToJSON(object) {\n    switch(object){\n        case State.STATE_UNINITIALIZED_UNSPECIFIED:\n            return \"STATE_UNINITIALIZED_UNSPECIFIED\";\n        case State.STATE_INIT:\n            return \"STATE_INIT\";\n        case State.STATE_TRYOPEN:\n            return \"STATE_TRYOPEN\";\n        case State.STATE_OPEN:\n            return \"STATE_OPEN\";\n        case State.STATE_CLOSED:\n            return \"STATE_CLOSED\";\n        case State.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nvar Order;\n(function(Order) {\n    Order[Order[/** ORDER_NONE_UNSPECIFIED - zero-value for channel ordering */ \"ORDER_NONE_UNSPECIFIED\"] = 0] = \"ORDER_NONE_UNSPECIFIED\";\n    Order[Order[/**\n   * ORDER_UNORDERED - packets can be delivered in any order, which may differ from the order in\n   * which they were sent.\n   */ \"ORDER_UNORDERED\"] = 1] = \"ORDER_UNORDERED\";\n    Order[Order[/** ORDER_ORDERED - packets are delivered exactly in the order which they were sent */ \"ORDER_ORDERED\"] = 2] = \"ORDER_ORDERED\";\n    Order[Order[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(Order || (Order = {}));\nconst OrderSDKType = Order;\nfunction orderFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"ORDER_NONE_UNSPECIFIED\":\n            return Order.ORDER_NONE_UNSPECIFIED;\n        case 1:\n        case \"ORDER_UNORDERED\":\n            return Order.ORDER_UNORDERED;\n        case 2:\n        case \"ORDER_ORDERED\":\n            return Order.ORDER_ORDERED;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return Order.UNRECOGNIZED;\n    }\n}\nfunction orderToJSON(object) {\n    switch(object){\n        case Order.ORDER_NONE_UNSPECIFIED:\n            return \"ORDER_NONE_UNSPECIFIED\";\n        case Order.ORDER_UNORDERED:\n            return \"ORDER_UNORDERED\";\n        case Order.ORDER_ORDERED:\n            return \"ORDER_ORDERED\";\n        case Order.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseChannel() {\n    return {\n        state: 0,\n        ordering: 0,\n        counterparty: undefined,\n        connectionHops: [],\n        version: \"\"\n    };\n}\nconst Channel = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.state !== 0) {\n            writer.uint32(8).int32(message.state);\n        }\n        if (message.ordering !== 0) {\n            writer.uint32(16).int32(message.ordering);\n        }\n        if (message.counterparty !== undefined) {\n            Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.connectionHops){\n            writer.uint32(34).string(v);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(42).string(message.version);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseChannel();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.state = reader.int32();\n                    break;\n                case 2:\n                    message.ordering = reader.int32();\n                    break;\n                case 3:\n                    message.counterparty = Counterparty.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.connectionHops.push(reader.string());\n                    break;\n                case 5:\n                    message.version = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseChannel();\n        message.state = object.state ?? 0;\n        message.ordering = object.ordering ?? 0;\n        message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? Counterparty.fromPartial(object.counterparty) : undefined;\n        message.connectionHops = object.connectionHops?.map((e)=>e) || [];\n        message.version = object.version ?? \"\";\n        return message;\n    }\n};\nfunction createBaseIdentifiedChannel() {\n    return {\n        state: 0,\n        ordering: 0,\n        counterparty: undefined,\n        connectionHops: [],\n        version: \"\",\n        portId: \"\",\n        channelId: \"\"\n    };\n}\nconst IdentifiedChannel = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.state !== 0) {\n            writer.uint32(8).int32(message.state);\n        }\n        if (message.ordering !== 0) {\n            writer.uint32(16).int32(message.ordering);\n        }\n        if (message.counterparty !== undefined) {\n            Counterparty.encode(message.counterparty, writer.uint32(26).fork()).ldelim();\n        }\n        for (const v of message.connectionHops){\n            writer.uint32(34).string(v);\n        }\n        if (message.version !== \"\") {\n            writer.uint32(42).string(message.version);\n        }\n        if (message.portId !== \"\") {\n            writer.uint32(50).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(58).string(message.channelId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIdentifiedChannel();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.state = reader.int32();\n                    break;\n                case 2:\n                    message.ordering = reader.int32();\n                    break;\n                case 3:\n                    message.counterparty = Counterparty.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.connectionHops.push(reader.string());\n                    break;\n                case 5:\n                    message.version = reader.string();\n                    break;\n                case 6:\n                    message.portId = reader.string();\n                    break;\n                case 7:\n                    message.channelId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseIdentifiedChannel();\n        message.state = object.state ?? 0;\n        message.ordering = object.ordering ?? 0;\n        message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? Counterparty.fromPartial(object.counterparty) : undefined;\n        message.connectionHops = object.connectionHops?.map((e)=>e) || [];\n        message.version = object.version ?? \"\";\n        message.portId = object.portId ?? \"\";\n        message.channelId = object.channelId ?? \"\";\n        return message;\n    }\n};\nfunction createBaseCounterparty() {\n    return {\n        portId: \"\",\n        channelId: \"\"\n    };\n}\nconst Counterparty = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCounterparty();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCounterparty();\n        message.portId = object.portId ?? \"\";\n        message.channelId = object.channelId ?? \"\";\n        return message;\n    }\n};\nfunction createBasePacket() {\n    return {\n        sequence: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO,\n        sourcePort: \"\",\n        sourceChannel: \"\",\n        destinationPort: \"\",\n        destinationChannel: \"\",\n        data: new Uint8Array(),\n        timeoutHeight: undefined,\n        timeoutTimestamp: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO\n    };\n}\nconst Packet = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (!message.sequence.isZero()) {\n            writer.uint32(8).uint64(message.sequence);\n        }\n        if (message.sourcePort !== \"\") {\n            writer.uint32(18).string(message.sourcePort);\n        }\n        if (message.sourceChannel !== \"\") {\n            writer.uint32(26).string(message.sourceChannel);\n        }\n        if (message.destinationPort !== \"\") {\n            writer.uint32(34).string(message.destinationPort);\n        }\n        if (message.destinationChannel !== \"\") {\n            writer.uint32(42).string(message.destinationChannel);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(50).bytes(message.data);\n        }\n        if (message.timeoutHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_0__.Height.encode(message.timeoutHeight, writer.uint32(58).fork()).ldelim();\n        }\n        if (!message.timeoutTimestamp.isZero()) {\n            writer.uint32(64).uint64(message.timeoutTimestamp);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePacket();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.sequence = reader.uint64();\n                    break;\n                case 2:\n                    message.sourcePort = reader.string();\n                    break;\n                case 3:\n                    message.sourceChannel = reader.string();\n                    break;\n                case 4:\n                    message.destinationPort = reader.string();\n                    break;\n                case 5:\n                    message.destinationChannel = reader.string();\n                    break;\n                case 6:\n                    message.data = reader.bytes();\n                    break;\n                case 7:\n                    message.timeoutHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_0__.Height.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.timeoutTimestamp = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBasePacket();\n        message.sequence = object.sequence !== undefined && object.sequence !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.sequence) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        message.sourcePort = object.sourcePort ?? \"\";\n        message.sourceChannel = object.sourceChannel ?? \"\";\n        message.destinationPort = object.destinationPort ?? \"\";\n        message.destinationChannel = object.destinationChannel ?? \"\";\n        message.data = object.data ?? new Uint8Array();\n        message.timeoutHeight = object.timeoutHeight !== undefined && object.timeoutHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_0__.Height.fromPartial(object.timeoutHeight) : undefined;\n        message.timeoutTimestamp = object.timeoutTimestamp !== undefined && object.timeoutTimestamp !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.timeoutTimestamp) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        return message;\n    }\n};\nfunction createBasePacketState() {\n    return {\n        portId: \"\",\n        channelId: \"\",\n        sequence: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO,\n        data: new Uint8Array()\n    };\n}\nconst PacketState = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (!message.sequence.isZero()) {\n            writer.uint32(24).uint64(message.sequence);\n        }\n        if (message.data.length !== 0) {\n            writer.uint32(34).bytes(message.data);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBasePacketState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.sequence = reader.uint64();\n                    break;\n                case 4:\n                    message.data = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBasePacketState();\n        message.portId = object.portId ?? \"\";\n        message.channelId = object.channelId ?? \"\";\n        message.sequence = object.sequence !== undefined && object.sequence !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.sequence) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        message.data = object.data ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseAcknowledgement() {\n    return {\n        result: undefined,\n        error: undefined\n    };\n}\nconst Acknowledgement = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.result !== undefined) {\n            writer.uint32(170).bytes(message.result);\n        }\n        if (message.error !== undefined) {\n            writer.uint32(178).string(message.error);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseAcknowledgement();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 21:\n                    message.result = reader.bytes();\n                    break;\n                case 22:\n                    message.error = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseAcknowledgement();\n        message.result = object.result ?? undefined;\n        message.error = object.error ?? undefined;\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/channel/v1/channel.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/channel/v1/tx.amino.ts":
/*!*****************************************************!*\
  !*** ./src/codegen/ibc/core/channel/v1/tx.amino.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AminoConverter\": () => (/* binding */ AminoConverter)\n/* harmony export */ });\n/* harmony import */ var _channel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel */ \"./src/codegen/ibc/core/channel/v1/channel.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n\n\nconst AminoConverter = {\n    \"/ibc.core.channel.v1.MsgChannelOpenInit\": {\n        aminoType: \"cosmos-sdk/MsgChannelOpenInit\",\n        toAmino: ({ portId , channel , signer  })=>{\n            return {\n                port_id: portId,\n                channel: {\n                    state: channel.state,\n                    ordering: channel.ordering,\n                    counterparty: {\n                        port_id: channel.counterparty.portId,\n                        channel_id: channel.counterparty.channelId\n                    },\n                    connection_hops: channel.connectionHops,\n                    version: channel.version\n                },\n                signer\n            };\n        },\n        fromAmino: ({ port_id , channel , signer  })=>{\n            return {\n                portId: port_id,\n                channel: {\n                    state: (0,_channel__WEBPACK_IMPORTED_MODULE_0__.stateFromJSON)(channel.state),\n                    ordering: (0,_channel__WEBPACK_IMPORTED_MODULE_0__.orderFromJSON)(channel.ordering),\n                    counterparty: {\n                        portId: channel.counterparty.port_id,\n                        channelId: channel.counterparty.channel_id\n                    },\n                    connectionHops: channel.connection_hops,\n                    version: channel.version\n                },\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgChannelOpenTry\": {\n        aminoType: \"cosmos-sdk/MsgChannelOpenTry\",\n        toAmino: ({ portId , previousChannelId , channel , counterpartyVersion , proofInit , proofHeight , signer  })=>{\n            return {\n                port_id: portId,\n                previous_channel_id: previousChannelId,\n                channel: {\n                    state: channel.state,\n                    ordering: channel.ordering,\n                    counterparty: {\n                        port_id: channel.counterparty.portId,\n                        channel_id: channel.counterparty.channelId\n                    },\n                    connection_hops: channel.connectionHops,\n                    version: channel.version\n                },\n                counterparty_version: counterpartyVersion,\n                proof_init: proofInit,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ port_id , previous_channel_id , channel , counterparty_version , proof_init , proof_height , signer  })=>{\n            return {\n                portId: port_id,\n                previousChannelId: previous_channel_id,\n                channel: {\n                    state: (0,_channel__WEBPACK_IMPORTED_MODULE_0__.stateFromJSON)(channel.state),\n                    ordering: (0,_channel__WEBPACK_IMPORTED_MODULE_0__.orderFromJSON)(channel.ordering),\n                    counterparty: {\n                        portId: channel.counterparty.port_id,\n                        channelId: channel.counterparty.channel_id\n                    },\n                    connectionHops: channel.connection_hops,\n                    version: channel.version\n                },\n                counterpartyVersion: counterparty_version,\n                proofInit: proof_init,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgChannelOpenAck\": {\n        aminoType: \"cosmos-sdk/MsgChannelOpenAck\",\n        toAmino: ({ portId , channelId , counterpartyChannelId , counterpartyVersion , proofTry , proofHeight , signer  })=>{\n            return {\n                port_id: portId,\n                channel_id: channelId,\n                counterparty_channel_id: counterpartyChannelId,\n                counterparty_version: counterpartyVersion,\n                proof_try: proofTry,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ port_id , channel_id , counterparty_channel_id , counterparty_version , proof_try , proof_height , signer  })=>{\n            return {\n                portId: port_id,\n                channelId: channel_id,\n                counterpartyChannelId: counterparty_channel_id,\n                counterpartyVersion: counterparty_version,\n                proofTry: proof_try,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgChannelOpenConfirm\": {\n        aminoType: \"cosmos-sdk/MsgChannelOpenConfirm\",\n        toAmino: ({ portId , channelId , proofAck , proofHeight , signer  })=>{\n            return {\n                port_id: portId,\n                channel_id: channelId,\n                proof_ack: proofAck,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ port_id , channel_id , proof_ack , proof_height , signer  })=>{\n            return {\n                portId: port_id,\n                channelId: channel_id,\n                proofAck: proof_ack,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgChannelCloseInit\": {\n        aminoType: \"cosmos-sdk/MsgChannelCloseInit\",\n        toAmino: ({ portId , channelId , signer  })=>{\n            return {\n                port_id: portId,\n                channel_id: channelId,\n                signer\n            };\n        },\n        fromAmino: ({ port_id , channel_id , signer  })=>{\n            return {\n                portId: port_id,\n                channelId: channel_id,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgChannelCloseConfirm\": {\n        aminoType: \"cosmos-sdk/MsgChannelCloseConfirm\",\n        toAmino: ({ portId , channelId , proofInit , proofHeight , signer  })=>{\n            return {\n                port_id: portId,\n                channel_id: channelId,\n                proof_init: proofInit,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ port_id , channel_id , proof_init , proof_height , signer  })=>{\n            return {\n                portId: port_id,\n                channelId: channel_id,\n                proofInit: proof_init,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgRecvPacket\": {\n        aminoType: \"cosmos-sdk/MsgRecvPacket\",\n        toAmino: ({ packet , proofCommitment , proofHeight , signer  })=>{\n            return {\n                packet: {\n                    sequence: packet.sequence.toString(),\n                    source_port: packet.sourcePort,\n                    source_channel: packet.sourceChannel,\n                    destination_port: packet.destinationPort,\n                    destination_channel: packet.destinationChannel,\n                    data: packet.data,\n                    timeout_height: packet.timeoutHeight ? {\n                        revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionHeight)?.toString(),\n                        revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionNumber)?.toString()\n                    } : {},\n                    timeout_timestamp: packet.timeoutTimestamp.toString()\n                },\n                proof_commitment: proofCommitment,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ packet , proof_commitment , proof_height , signer  })=>{\n            return {\n                packet: {\n                    sequence: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.sequence),\n                    sourcePort: packet.source_port,\n                    sourceChannel: packet.source_channel,\n                    destinationPort: packet.destination_port,\n                    destinationChannel: packet.destination_channel,\n                    data: packet.data,\n                    timeoutHeight: packet.timeout_height ? {\n                        revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_height || \"0\", true),\n                        revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_number || \"0\", true)\n                    } : undefined,\n                    timeoutTimestamp: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_timestamp)\n                },\n                proofCommitment: proof_commitment,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgTimeout\": {\n        aminoType: \"cosmos-sdk/MsgTimeout\",\n        toAmino: ({ packet , proofUnreceived , proofHeight , nextSequenceRecv , signer  })=>{\n            return {\n                packet: {\n                    sequence: packet.sequence.toString(),\n                    source_port: packet.sourcePort,\n                    source_channel: packet.sourceChannel,\n                    destination_port: packet.destinationPort,\n                    destination_channel: packet.destinationChannel,\n                    data: packet.data,\n                    timeout_height: packet.timeoutHeight ? {\n                        revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionHeight)?.toString(),\n                        revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionNumber)?.toString()\n                    } : {},\n                    timeout_timestamp: packet.timeoutTimestamp.toString()\n                },\n                proof_unreceived: proofUnreceived,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                next_sequence_recv: nextSequenceRecv.toString(),\n                signer\n            };\n        },\n        fromAmino: ({ packet , proof_unreceived , proof_height , next_sequence_recv , signer  })=>{\n            return {\n                packet: {\n                    sequence: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.sequence),\n                    sourcePort: packet.source_port,\n                    sourceChannel: packet.source_channel,\n                    destinationPort: packet.destination_port,\n                    destinationChannel: packet.destination_channel,\n                    data: packet.data,\n                    timeoutHeight: packet.timeout_height ? {\n                        revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_height || \"0\", true),\n                        revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_number || \"0\", true)\n                    } : undefined,\n                    timeoutTimestamp: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_timestamp)\n                },\n                proofUnreceived: proof_unreceived,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                nextSequenceRecv: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(next_sequence_recv),\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgTimeoutOnClose\": {\n        aminoType: \"cosmos-sdk/MsgTimeoutOnClose\",\n        toAmino: ({ packet , proofUnreceived , proofClose , proofHeight , nextSequenceRecv , signer  })=>{\n            return {\n                packet: {\n                    sequence: packet.sequence.toString(),\n                    source_port: packet.sourcePort,\n                    source_channel: packet.sourceChannel,\n                    destination_port: packet.destinationPort,\n                    destination_channel: packet.destinationChannel,\n                    data: packet.data,\n                    timeout_height: packet.timeoutHeight ? {\n                        revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionHeight)?.toString(),\n                        revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionNumber)?.toString()\n                    } : {},\n                    timeout_timestamp: packet.timeoutTimestamp.toString()\n                },\n                proof_unreceived: proofUnreceived,\n                proof_close: proofClose,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                next_sequence_recv: nextSequenceRecv.toString(),\n                signer\n            };\n        },\n        fromAmino: ({ packet , proof_unreceived , proof_close , proof_height , next_sequence_recv , signer  })=>{\n            return {\n                packet: {\n                    sequence: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.sequence),\n                    sourcePort: packet.source_port,\n                    sourceChannel: packet.source_channel,\n                    destinationPort: packet.destination_port,\n                    destinationChannel: packet.destination_channel,\n                    data: packet.data,\n                    timeoutHeight: packet.timeout_height ? {\n                        revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_height || \"0\", true),\n                        revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_number || \"0\", true)\n                    } : undefined,\n                    timeoutTimestamp: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_timestamp)\n                },\n                proofUnreceived: proof_unreceived,\n                proofClose: proof_close,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                nextSequenceRecv: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(next_sequence_recv),\n                signer\n            };\n        }\n    },\n    \"/ibc.core.channel.v1.MsgAcknowledgement\": {\n        aminoType: \"cosmos-sdk/MsgAcknowledgement\",\n        toAmino: ({ packet , acknowledgement , proofAcked , proofHeight , signer  })=>{\n            return {\n                packet: {\n                    sequence: packet.sequence.toString(),\n                    source_port: packet.sourcePort,\n                    source_channel: packet.sourceChannel,\n                    destination_port: packet.destinationPort,\n                    destination_channel: packet.destinationChannel,\n                    data: packet.data,\n                    timeout_height: packet.timeoutHeight ? {\n                        revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionHeight)?.toString(),\n                        revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(packet.timeoutHeight.revisionNumber)?.toString()\n                    } : {},\n                    timeout_timestamp: packet.timeoutTimestamp.toString()\n                },\n                acknowledgement,\n                proof_acked: proofAcked,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ packet , acknowledgement , proof_acked , proof_height , signer  })=>{\n            return {\n                packet: {\n                    sequence: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.sequence),\n                    sourcePort: packet.source_port,\n                    sourceChannel: packet.source_channel,\n                    destinationPort: packet.destination_port,\n                    destinationChannel: packet.destination_channel,\n                    data: packet.data,\n                    timeoutHeight: packet.timeout_height ? {\n                        revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_height || \"0\", true),\n                        revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_height.revision_number || \"0\", true)\n                    } : undefined,\n                    timeoutTimestamp: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(packet.timeout_timestamp)\n                },\n                acknowledgement,\n                proofAcked: proof_acked,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29kZWdlbi9pYmMvY29yZS9jaGFubmVsL3YxL3R4LmFtaW5vLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF5RDtBQUVZO0FBNEo5RCxNQUFNSSxpQkFBaUI7SUFDNUIsMkNBQTJDO1FBQ3pDQyxXQUFXO1FBQ1hDLFNBQVMsQ0FBQyxFQUNSQyxPQUFNLEVBQ05DLFFBQU8sRUFDUEMsT0FBTSxFQUNhLEdBQTJDO1lBQzlELE9BQU87Z0JBQ0xDLFNBQVNIO2dCQUNUQyxTQUFTO29CQUNQRyxPQUFPSCxRQUFRRyxLQUFLO29CQUNwQkMsVUFBVUosUUFBUUksUUFBUTtvQkFDMUJDLGNBQWM7d0JBQ1pILFNBQVNGLFFBQVFLLFlBQVksQ0FBQ04sTUFBTTt3QkFDcENPLFlBQVlOLFFBQVFLLFlBQVksQ0FBQ0UsU0FBUztvQkFDNUM7b0JBQ0FDLGlCQUFpQlIsUUFBUVMsY0FBYztvQkFDdkNDLFNBQVNWLFFBQVFVLE9BQU87Z0JBQzFCO2dCQUNBVDtZQUNGO1FBQ0Y7UUFDQVUsV0FBVyxDQUFDLEVBQ1ZULFFBQU8sRUFDUEYsUUFBTyxFQUNQQyxPQUFNLEVBQytCLEdBQXlCO1lBQzlELE9BQU87Z0JBQ0xGLFFBQVFHO2dCQUNSRixTQUFTO29CQUNQRyxPQUFPWCx1REFBYUEsQ0FBQ1EsUUFBUUcsS0FBSztvQkFDbENDLFVBQVVYLHVEQUFhQSxDQUFDTyxRQUFRSSxRQUFRO29CQUN4Q0MsY0FBYzt3QkFDWk4sUUFBUUMsUUFBUUssWUFBWSxDQUFDSCxPQUFPO3dCQUNwQ0ssV0FBV1AsUUFBUUssWUFBWSxDQUFDQyxVQUFVO29CQUM1QztvQkFDQUcsZ0JBQWdCVCxRQUFRUSxlQUFlO29CQUN2Q0UsU0FBU1YsUUFBUVUsT0FBTztnQkFDMUI7Z0JBQ0FUO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsMENBQTBDO1FBQ3hDSixXQUFXO1FBQ1hDLFNBQVMsQ0FBQyxFQUNSQyxPQUFNLEVBQ05hLGtCQUFpQixFQUNqQlosUUFBTyxFQUNQYSxvQkFBbUIsRUFDbkJDLFVBQVMs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QUFnQjdCLHFEQUFlLENBQUN3QixhQUFhSSxlQUFlLElBQUksS0FBSyxJQUFJO2dCQUMzRSxJQUFJRyxTQUFTO2dCQUNiekI7WUFDRjtRQUNGO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvY29kZWdlbi9pYmMvY29yZS9jaGFubmVsL3YxL3R4LmFtaW5vLnRzPzNkODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3RhdGVGcm9tSlNPTiwgb3JkZXJGcm9tSlNPTiB9IGZyb20gXCIuL2NoYW5uZWxcIjtcbmltcG9ydCB7IEFtaW5vTXNnIH0gZnJvbSBcIkBjb3NtanMvYW1pbm9cIjtcbmltcG9ydCB7IEFtaW5vSGVpZ2h0LCBvbWl0RGVmYXVsdCwgTG9uZyB9IGZyb20gXCIuLi8uLi8uLi8uLi9oZWxwZXJzXCI7XG5pbXBvcnQgeyBNc2dDaGFubmVsT3BlbkluaXQsIE1zZ0NoYW5uZWxPcGVuVHJ5LCBNc2dDaGFubmVsT3BlbkFjaywgTXNnQ2hhbm5lbE9wZW5Db25maXJtLCBNc2dDaGFubmVsQ2xvc2VJbml0LCBNc2dDaGFubmVsQ2xvc2VDb25maXJtLCBNc2dSZWN2UGFja2V0LCBNc2dUaW1lb3V0LCBNc2dUaW1lb3V0T25DbG9zZSwgTXNnQWNrbm93bGVkZ2VtZW50IH0gZnJvbSBcIi4vdHhcIjtcbmV4cG9ydCBpbnRlcmZhY2UgTXNnQ2hhbm5lbE9wZW5Jbml0QW1pbm9UeXBlIGV4dGVuZHMgQW1pbm9Nc2cge1xuICB0eXBlOiBcImNvc21vcy1zZGsvTXNnQ2hhbm5lbE9wZW5Jbml0XCI7XG4gIHZhbHVlOiB7XG4gICAgcG9ydF9pZDogc3RyaW5nO1xuICAgIGNoYW5uZWw6IHtcbiAgICAgIHN0YXRlOiBudW1iZXI7XG4gICAgICBvcmRlcmluZzogbnVtYmVyO1xuICAgICAgY291bnRlcnBhcnR5OiB7XG4gICAgICAgIHBvcnRfaWQ6IHN0cmluZztcbiAgICAgICAgY2hhbm5lbF9pZDogc3RyaW5nO1xuICAgICAgfTtcbiAgICAgIGNvbm5lY3Rpb25faG9wczogc3RyaW5nW107XG4gICAgICB2ZXJzaW9uOiBzdHJpbmc7XG4gICAgfTtcbiAgICBzaWduZXI6IHN0cmluZztcbiAgfTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTXNnQ2hhbm5lbE9wZW5UcnlBbWlub1R5cGUgZXh0ZW5kcyBBbWlub01zZyB7XG4gIHR5cGU6IFwiY29zbW9zLXNkay9Nc2dDaGFubmVsT3BlblRyeVwiO1xuICB2YWx1ZToge1xuICAgIHBvcnRfaWQ6IHN0cmluZztcbiAgICBwcmV2aW91c19jaGFubmVsX2lkOiBzdHJpbmc7XG4gICAgY2hhbm5lbDoge1xuICAgICAgc3RhdGU6IG51bWJlcjtcbiAgICAgIG9yZGVyaW5nOiBudW1iZXI7XG4gICAgICBjb3VudGVycGFydHk6IHtcbiAgICAgICAgcG9ydF9pZDogc3RyaW5nO1xuICAgICAgICBjaGFubmVsX2lkOiBzdHJpbmc7XG4gICAgICB9O1xuICAgICAgY29ubmVjdGlvbl9ob3BzOiBzdHJpbmdbXTtcbiAgICAgIHZlcnNpb246IHN0cmluZztcbiAgICB9O1xuICAgIGNvdW50ZXJwYXJ0eV92ZXJzaW9uOiBzdHJpbmc7XG4gICAgcHJvb2ZfaW5pdDogVWludDhBcnJheTtcbiAgICBwcm9vZl9oZWlnaHQ6IEFtaW5vSGVpZ2h0O1xuICAgIHNpZ25lcjogc3RyaW5nO1xuICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBNc2dDaGFubmVsT3BlbkFja0FtaW5vVHlwZSBleHRlbmRzIEFtaW5vTXNnIHtcbiAgdHlwZTogXCJjb3Ntb3Mtc2RrL01zZ0NoYW5uZWxPcGVuQWNrXCI7XG4gIHZhbHVlOiB7XG4gICAgcG9ydF9pZDogc3RyaW5nO1xuICAgIGNoYW5uZWxfaWQ6IHN0cmluZztcbiAgICBjb3VudGVycGFydHlfY2hhbm5lbF9pZDogc3RyaW5nO1xuICAgIGNvdW50ZXJwYXJ0eV92ZXJzaW9uOiBzdHJpbmc7XG4gICAgcHJvb2ZfdHJ5OiBVaW50OEFycmF5O1xuICAgIHByb29mX2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgc2lnbmVyOiBzdHJpbmc7XG4gIH07XG59XG5leHBvcnQgaW50ZXJmYWNlIE1zZ0NoYW5uZWxPcGVuQ29uZmlybUFtaW5vVHlwZSBleHRlbmRzIEFtaW5vTXNnIHtcbiAgdHlwZTogXCJjb3Ntb3Mtc2RrL01zZ0NoYW5uZWxPcGVuQ29uZmlybVwiO1xuICB2YWx1ZToge1xuICAgIHBvcnRfaWQ6IHN0cmluZztcbiAgICBjaGFubmVsX2lkOiBzdHJpbmc7XG4gICAgcHJvb2ZfYWNrOiBVaW50OEFycmF5O1xuICAgIHByb29mX2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgc2lnbmVyOiBzdHJpbmc7XG4gIH07XG59XG5leHBvcnQgaW50ZXJmYWNlIE1zZ0NoYW5uZWxDbG9zZUluaXRBbWlub1R5cGUgZXh0ZW5kcyBBbWlub01zZyB7XG4gIHR5cGU6IFwiY29zbW9zLXNkay9Nc2dDaGFubmVsQ2xvc2VJbml0XCI7XG4gIHZhbHVlOiB7XG4gICAgcG9ydF9pZDogc3RyaW5nO1xuICAgIGNoYW5uZWxfaWQ6IHN0cmluZztcbiAgICBzaWduZXI6IHN0cmluZztcbiAgfTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTXNnQ2hhbm5lbENsb3NlQ29uZmlybUFtaW5vVHlwZSBleHRlbmRzIEFtaW5vTXNnIHtcbiAgdHlwZTogXCJjb3Ntb3Mtc2RrL01zZ0NoYW5uZWxDbG9zZUNvbmZpcm1cIjtcbiAgdmFsdWU6IHtcbiAgICBwb3J0X2lkOiBzdHJpbmc7XG4gICAgY2hhbm5lbF9pZDogc3RyaW5nO1xuICAgIHByb29mX2luaXQ6IFVpbnQ4QXJyYXk7XG4gICAgcHJvb2ZfaGVpZ2h0OiBBbWlub0hlaWdodDtcbiAgICBzaWduZXI6IHN0cmluZztcbiAgfTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgTXNnUmVjdlBhY2tldEFtaW5vVHlwZSBleHRlbmRzIEFtaW5vTXNnIHtcbiAgdHlwZTogXCJjb3Ntb3Mtc2RrL01zZ1JlY3ZQYWNrZXRcIjtcbiAgdmFsdWU6IHtcbiAgICBwYWNrZXQ6IHtcbiAgICAgIHNlcXVlbmNlOiBzdHJpbmc7XG4gICAgICBzb3VyY2VfcG9ydDogc3RyaW5nO1xuICAgICAgc291cmNlX2NoYW5uZWw6IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uX3BvcnQ6IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uX2NoYW5uZWw6IHN0cmluZztcbiAgICAgIGRhdGE6IFVpbnQ4QXJyYXk7XG4gICAgICB0aW1lb3V0X2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgICB0aW1lb3V0X3RpbWVzdGFtcDogc3RyaW5nO1xuICAgIH07XG4gICAgcHJvb2ZfY29tbWl0bWVudDogVWludDhBcnJheTtcbiAgICBwcm9vZl9oZWlnaHQ6IEFtaW5vSGVpZ2h0O1xuICAgIHNpZ25lcjogc3RyaW5nO1xuICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBNc2dUaW1lb3V0QW1pbm9UeXBlIGV4dGVuZHMgQW1pbm9Nc2cge1xuICB0eXBlOiBcImNvc21vcy1zZGsvTXNnVGltZW91dFwiO1xuICB2YWx1ZToge1xuICAgIHBhY2tldDoge1xuICAgICAgc2VxdWVuY2U6IHN0cmluZztcbiAgICAgIHNvdXJjZV9wb3J0OiBzdHJpbmc7XG4gICAgICBzb3VyY2VfY2hhbm5lbDogc3RyaW5nO1xuICAgICAgZGVzdGluYXRpb25fcG9ydDogc3RyaW5nO1xuICAgICAgZGVzdGluYXRpb25fY2hhbm5lbDogc3RyaW5nO1xuICAgICAgZGF0YTogVWludDhBcnJheTtcbiAgICAgIHRpbWVvdXRfaGVpZ2h0OiBBbWlub0hlaWdodDtcbiAgICAgIHRpbWVvdXRfdGltZXN0YW1wOiBzdHJpbmc7XG4gICAgfTtcbiAgICBwcm9vZl91bnJlY2VpdmVkOiBVaW50OEFycmF5O1xuICAgIHByb29mX2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgbmV4dF9zZXF1ZW5jZV9yZWN2OiBzdHJpbmc7XG4gICAgc2lnbmVyOiBzdHJpbmc7XG4gIH07XG59XG5leHBvcnQgaW50ZXJmYWNlIE1zZ1RpbWVvdXRPbkNsb3NlQW1pbm9UeXBlIGV4dGVuZHMgQW1pbm9Nc2cge1xuICB0eXBlOiBcImNvc21vcy1zZGsvTXNnVGltZW91dE9uQ2xvc2VcIjtcbiAgdmFsdWU6IHtcbiAgICBwYWNrZXQ6IHtcbiAgICAgIHNlcXVlbmNlOiBzdHJpbmc7XG4gICAgICBzb3VyY2VfcG9ydDogc3RyaW5nO1xuICAgICAgc291cmNlX2NoYW5uZWw6IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uX3BvcnQ6IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uX2NoYW5uZWw6IHN0cmluZztcbiAgICAgIGRhdGE6IFVpbnQ4QXJyYXk7XG4gICAgICB0aW1lb3V0X2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgICB0aW1lb3V0X3RpbWVzdGFtcDogc3RyaW5nO1xuICAgIH07XG4gICAgcHJvb2ZfdW5yZWNlaXZlZDogVWludDhBcnJheTtcbiAgICBwcm9vZl9jbG9zZTogVWludDhBcnJheTtcbiAgICBwcm9vZl9oZWlnaHQ6IEFtaW5vSGVpZ2h0O1xuICAgIG5leHRfc2VxdWVuY2VfcmVjdjogc3RyaW5nO1xuICAgIHNpZ25lcjogc3RyaW5nO1xuICB9O1xufVxuZXhwb3J0IGludGVyZmFjZSBNc2dBY2tub3dsZWRnZW1lbnRBbWlub1R5cGUgZXh0ZW5kcyBBbWlub01zZyB7XG4gIHR5cGU6IFwiY29zbW9zLXNkay9Nc2dBY2tub3dsZWRnZW1lbnRcIjtcbiAgdmFsdWU6IHtcbiAgICBwYWNrZXQ6IHtcbiAgICAgIHNlcXVlbmNlOiBzdHJpbmc7XG4gICAgICBzb3VyY2VfcG9ydDogc3RyaW5nO1xuICAgICAgc291cmNlX2NoYW5uZWw6IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uX3BvcnQ6IHN0cmluZztcbiAgICAgIGRlc3RpbmF0aW9uX2NoYW5uZWw6IHN0cmluZztcbiAgICAgIGRhdGE6IFVpbnQ4QXJyYXk7XG4gICAgICB0aW1lb3V0X2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgICB0aW1lb3V0X3RpbWVzdGFtcDogc3RyaW5nO1xuICAgIH07XG4gICAgYWNrbm93bGVkZ2VtZW50OiBVaW50OEFycmF5O1xuICAgIHByb29mX2Fja2VkOiBVaW50OEFycmF5O1xuICAgIHByb29mX2hlaWdodDogQW1pbm9IZWlnaHQ7XG4gICAgc2lnbmVyOiBzdHJpbmc7XG4gIH07XG59XG5leHBvcnQgY29uc3QgQW1pbm9Db252ZXJ0ZXIgPSB7XG4gIFwiL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnQ2hhbm5lbE9wZW5Jbml0XCI6IHtcbiAgICBhbWlub1R5cGU6IFwiY29zbW9zLXNkay9Nc2dDaGFubmVsT3BlbkluaXRcIixcbiAgICB0b0FtaW5vOiAoe1xuICAgICAgcG9ydElkLFxuICAgICAgY2hhbm5lbCxcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ0NoYW5uZWxPcGVuSW5pdCk6IE1zZ0NoYW5uZWxPcGVuSW5pdEFtaW5vVHlwZVtcInZhbHVlXCJdID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvcnRfaWQ6IHBvcnRJZCxcbiAgICAgICAgY2hhbm5lbDoge1xuICAgICAgICAgIHN0YXRlOiBjaGFubmVsLnN0YXRlLFxuICAgICAgICAgIG9yZGVyaW5nOiBjaGFubmVsLm9yZGVyaW5nLFxuICAgICAgICAgIGNvdW50ZXJwYXJ0eToge1xuICAgICAgICAgICAgcG9ydF9pZDogY2hhbm5lbC5jb3VudGVycGFydHkucG9ydElkLFxuICAgICAgICAgICAgY2hhbm5lbF9pZDogY2hhbm5lbC5jb3VudGVycGFydHkuY2hhbm5lbElkXG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25uZWN0aW9uX2hvcHM6IGNoYW5uZWwuY29ubmVjdGlvbkhvcHMsXG4gICAgICAgICAgdmVyc2lvbjogY2hhbm5lbC52ZXJzaW9uXG4gICAgICAgIH0sXG4gICAgICAgIHNpZ25lclxuICAgICAgfTtcbiAgICB9LFxuICAgIGZyb21BbWlubzogKHtcbiAgICAgIHBvcnRfaWQsXG4gICAgICBjaGFubmVsLFxuICAgICAgc2lnbmVyXG4gICAgfTogTXNnQ2hhbm5lbE9wZW5Jbml0QW1pbm9UeXBlW1widmFsdWVcIl0pOiBNc2dDaGFubmVsT3BlbkluaXQgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9ydElkOiBwb3J0X2lkLFxuICAgICAgICBjaGFubmVsOiB7XG4gICAgICAgICAgc3RhdGU6IHN0YXRlRnJvbUpTT04oY2hhbm5lbC5zdGF0ZSksXG4gICAgICAgICAgb3JkZXJpbmc6IG9yZGVyRnJvbUpTT04oY2hhbm5lbC5vcmRlcmluZyksXG4gICAgICAgICAgY291bnRlcnBhcnR5OiB7XG4gICAgICAgICAgICBwb3J0SWQ6IGNoYW5uZWwuY291bnRlcnBhcnR5LnBvcnRfaWQsXG4gICAgICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWwuY291bnRlcnBhcnR5LmNoYW5uZWxfaWRcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbm5lY3Rpb25Ib3BzOiBjaGFubmVsLmNvbm5lY3Rpb25faG9wcyxcbiAgICAgICAgICB2ZXJzaW9uOiBjaGFubmVsLnZlcnNpb25cbiAgICAgICAgfSxcbiAgICAgICAgc2lnbmVyXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgXCIvaWJjLmNvcmUuY2hhbm5lbC52MS5Nc2dDaGFubmVsT3BlblRyeVwiOiB7XG4gICAgYW1pbm9UeXBlOiBcImNvc21vcy1zZGsvTXNnQ2hhbm5lbE9wZW5UcnlcIixcbiAgICB0b0FtaW5vOiAoe1xuICAgICAgcG9ydElkLFxuICAgICAgcHJldmlvdXNDaGFubmVsSWQsXG4gICAgICBjaGFubmVsLFxuICAgICAgY291bnRlcnBhcnR5VmVyc2lvbixcbiAgICAgIHByb29mSW5pdCxcbiAgICAgIHByb29mSGVpZ2h0LFxuICAgICAgc2lnbmVyXG4gICAgfTogTXNnQ2hhbm5lbE9wZW5UcnkpOiBNc2dDaGFubmVsT3BlblRyeUFtaW5vVHlwZVtcInZhbHVlXCJdID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvcnRfaWQ6IHBvcnRJZCxcbiAgICAgICAgcHJldmlvdXNfY2hhbm5lbF9pZDogcHJldmlvdXNDaGFubmVsSWQsXG4gICAgICAgIGNoYW5uZWw6IHtcbiAgICAgICAgICBzdGF0ZTogY2hhbm5lbC5zdGF0ZSxcbiAgICAgICAgICBvcmRlcmluZzogY2hhbm5lbC5vcmRlcmluZyxcbiAgICAgICAgICBjb3VudGVycGFydHk6IHtcbiAgICAgICAgICAgIHBvcnRfaWQ6IGNoYW5uZWwuY291bnRlcnBhcnR5LnBvcnRJZCxcbiAgICAgICAgICAgIGNoYW5uZWxfaWQ6IGNoYW5uZWwuY291bnRlcnBhcnR5LmNoYW5uZWxJZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29ubmVjdGlvbl9ob3BzOiBjaGFubmVsLmNvbm5lY3Rpb25Ib3BzLFxuICAgICAgICAgIHZlcnNpb246IGNoYW5uZWwudmVyc2lvblxuICAgICAgICB9LFxuICAgICAgICBjb3VudGVycGFydHlfdmVyc2lvbjogY291bnRlcnBhcnR5VmVyc2lvbixcbiAgICAgICAgcHJvb2ZfaW5pdDogcHJvb2ZJbml0LFxuICAgICAgICBwcm9vZl9oZWlnaHQ6IHByb29mSGVpZ2h0ID8ge1xuICAgICAgICAgIHJldmlzaW9uX2hlaWdodDogb21pdERlZmF1bHQocHJvb2ZIZWlnaHQucmV2aXNpb25IZWlnaHQpPy50b1N0cmluZygpLFxuICAgICAgICAgIHJldmlzaW9uX251bWJlcjogb21pdERlZmF1bHQocHJvb2ZIZWlnaHQucmV2aXNpb25OdW1iZXIpPy50b1N0cmluZygpXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgc2lnbmVyXG4gICAgICB9O1xuICAgIH0sXG4gICAgZnJvbUFtaW5vOiAoe1xuICAgICAgcG9ydF9pZCxcbiAgICAgIHByZXZpb3VzX2NoYW5uZWxfaWQsXG4gICAgICBjaGFubmVsLFxuICAgICAgY291bnRlcnBhcnR5X3ZlcnNpb24sXG4gICAgICBwcm9vZl9pbml0LFxuICAgICAgcHJvb2ZfaGVpZ2h0LFxuICAgICAgc2lnbmVyXG4gICAgfTogTXNnQ2hhbm5lbE9wZW5UcnlBbWlub1R5cGVbXCJ2YWx1ZVwiXSk6IE1zZ0NoYW5uZWxPcGVuVHJ5ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvcnRJZDogcG9ydF9pZCxcbiAgICAgICAgcHJldmlvdXNDaGFubmVsSWQ6IHByZXZpb3VzX2NoYW5uZWxfaWQsXG4gICAgICAgIGNoYW5uZWw6IHtcbiAgICAgICAgICBzdGF0ZTogc3RhdGVGcm9tSlNPTihjaGFubmVsLnN0YXRlKSxcbiAgICAgICAgICBvcmRlcmluZzogb3JkZXJGcm9tSlNPTihjaGFubmVsLm9yZGVyaW5nKSxcbiAgICAgICAgICBjb3VudGVycGFydHk6IHtcbiAgICAgICAgICAgIHBvcnRJZDogY2hhbm5lbC5jb3VudGVycGFydHkucG9ydF9pZCxcbiAgICAgICAgICAgIGNoYW5uZWxJZDogY2hhbm5lbC5jb3VudGVycGFydHkuY2hhbm5lbF9pZFxuICAgICAgICAgIH0sXG4gICAgICAgICAgY29ubmVjdGlvbkhvcHM6IGNoYW5uZWwuY29ubmVjdGlvbl9ob3BzLFxuICAgICAgICAgIHZlcnNpb246IGNoYW5uZWwudmVyc2lvblxuICAgICAgICB9LFxuICAgICAgICBjb3VudGVycGFydHlWZXJzaW9uOiBjb3VudGVycGFydHlfdmVyc2lvbixcbiAgICAgICAgcHJvb2ZJbml0OiBwcm9vZl9pbml0LFxuICAgICAgICBwcm9vZkhlaWdodDogcHJvb2ZfaGVpZ2h0ID8ge1xuICAgICAgICAgIHJldmlzaW9uSGVpZ2h0OiBMb25nLmZyb21TdHJpbmcocHJvb2ZfaGVpZ2h0LnJldmlzaW9uX2hlaWdodCB8fCBcIjBcIiwgdHJ1ZSksXG4gICAgICAgICAgcmV2aXNpb25OdW1iZXI6IExvbmcuZnJvbVN0cmluZyhwcm9vZl9oZWlnaHQucmV2aXNpb25fbnVtYmVyIHx8IFwiMFwiLCB0cnVlKVxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICBzaWduZXJcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICBcIi9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ0NoYW5uZWxPcGVuQWNrXCI6IHtcbiAgICBhbWlub1R5cGU6IFwiY29zbW9zLXNkay9Nc2dDaGFubmVsT3BlbkFja1wiLFxuICAgIHRvQW1pbm86ICh7XG4gICAgICBwb3J0SWQsXG4gICAgICBjaGFubmVsSWQsXG4gICAgICBjb3VudGVycGFydHlDaGFubmVsSWQsXG4gICAgICBjb3VudGVycGFydHlWZXJzaW9uLFxuICAgICAgcHJvb2ZUcnksXG4gICAgICBwcm9vZkhlaWdodCxcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ0NoYW5uZWxPcGVuQWNrKTogTXNnQ2hhbm5lbE9wZW5BY2tBbWlub1R5cGVbXCJ2YWx1ZVwiXSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3J0X2lkOiBwb3J0SWQsXG4gICAgICAgIGNoYW5uZWxfaWQ6IGNoYW5uZWxJZCxcbiAgICAgICAgY291bnRlcnBhcnR5X2NoYW5uZWxfaWQ6IGNvdW50ZXJwYXJ0eUNoYW5uZWxJZCxcbiAgICAgICAgY291bnRlcnBhcnR5X3ZlcnNpb246IGNvdW50ZXJwYXJ0eVZlcnNpb24sXG4gICAgICAgIHByb29mX3RyeTogcHJvb2ZUcnksXG4gICAgICAgIHByb29mX2hlaWdodDogcHJvb2ZIZWlnaHQgPyB7XG4gICAgICAgICAgcmV2aXNpb25faGVpZ2h0OiBvbWl0RGVmYXVsdChwcm9vZkhlaWdodC5yZXZpc2lvbkhlaWdodCk/LnRvU3RyaW5nKCksXG4gICAgICAgICAgcmV2aXNpb25fbnVtYmVyOiBvbWl0RGVmYXVsdChwcm9vZkhlaWdodC5yZXZpc2lvbk51bWJlcik/LnRvU3RyaW5nKClcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICBzaWduZXJcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tQW1pbm86ICh7XG4gICAgICBwb3J0X2lkLFxuICAgICAgY2hhbm5lbF9pZCxcbiAgICAgIGNvdW50ZXJwYXJ0eV9jaGFubmVsX2lkLFxuICAgICAgY291bnRlcnBhcnR5X3ZlcnNpb24sXG4gICAgICBwcm9vZl90cnksXG4gICAgICBwcm9vZl9oZWlnaHQsXG4gICAgICBzaWduZXJcbiAgICB9OiBNc2dDaGFubmVsT3BlbkFja0FtaW5vVHlwZVtcInZhbHVlXCJdKTogTXNnQ2hhbm5lbE9wZW5BY2sgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9ydElkOiBwb3J0X2lkLFxuICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWxfaWQsXG4gICAgICAgIGNvdW50ZXJwYXJ0eUNoYW5uZWxJZDogY291bnRlcnBhcnR5X2NoYW5uZWxfaWQsXG4gICAgICAgIGNvdW50ZXJwYXJ0eVZlcnNpb246IGNvdW50ZXJwYXJ0eV92ZXJzaW9uLFxuICAgICAgICBwcm9vZlRyeTogcHJvb2ZfdHJ5LFxuICAgICAgICBwcm9vZkhlaWdodDogcHJvb2ZfaGVpZ2h0ID8ge1xuICAgICAgICAgIHJldmlzaW9uSGVpZ2h0OiBMb25nLmZyb21TdHJpbmcocHJvb2ZfaGVpZ2h0LnJldmlzaW9uX2hlaWdodCB8fCBcIjBcIiwgdHJ1ZSksXG4gICAgICAgICAgcmV2aXNpb25OdW1iZXI6IExvbmcuZnJvbVN0cmluZyhwcm9vZl9oZWlnaHQucmV2aXNpb25fbnVtYmVyIHx8IFwiMFwiLCB0cnVlKVxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICBzaWduZXJcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICBcIi9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ0NoYW5uZWxPcGVuQ29uZmlybVwiOiB7XG4gICAgYW1pbm9UeXBlOiBcImNvc21vcy1zZGsvTXNnQ2hhbm5lbE9wZW5Db25maXJtXCIsXG4gICAgdG9BbWlubzogKHtcbiAgICAgIHBvcnRJZCxcbiAgICAgIGNoYW5uZWxJZCxcbiAgICAgIHByb29mQWNrLFxuICAgICAgcHJvb2ZIZWlnaHQsXG4gICAgICBzaWduZXJcbiAgICB9OiBNc2dDaGFubmVsT3BlbkNvbmZpcm0pOiBNc2dDaGFubmVsT3BlbkNvbmZpcm1BbWlub1R5cGVbXCJ2YWx1ZVwiXSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwb3J0X2lkOiBwb3J0SWQsXG4gICAgICAgIGNoYW5uZWxfaWQ6IGNoYW5uZWxJZCxcbiAgICAgICAgcHJvb2ZfYWNrOiBwcm9vZkFjayxcbiAgICAgICAgcHJvb2ZfaGVpZ2h0OiBwcm9vZkhlaWdodCA/IHtcbiAgICAgICAgICByZXZpc2lvbl9oZWlnaHQ6IG9taXREZWZhdWx0KHByb29mSGVpZ2h0LnJldmlzaW9uSGVpZ2h0KT8udG9TdHJpbmcoKSxcbiAgICAgICAgICByZXZpc2lvbl9udW1iZXI6IG9taXREZWZhdWx0KHByb29mSGVpZ2h0LnJldmlzaW9uTnVtYmVyKT8udG9TdHJpbmcoKVxuICAgICAgICB9IDoge30sXG4gICAgICAgIHNpZ25lclxuICAgICAgfTtcbiAgICB9LFxuICAgIGZyb21BbWlubzogKHtcbiAgICAgIHBvcnRfaWQsXG4gICAgICBjaGFubmVsX2lkLFxuICAgICAgcHJvb2ZfYWNrLFxuICAgICAgcHJvb2ZfaGVpZ2h0LFxuICAgICAgc2lnbmVyXG4gICAgfTogTXNnQ2hhbm5lbE9wZW5Db25maXJtQW1pbm9UeXBlW1widmFsdWVcIl0pOiBNc2dDaGFubmVsT3BlbkNvbmZpcm0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9ydElkOiBwb3J0X2lkLFxuICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWxfaWQsXG4gICAgICAgIHByb29mQWNrOiBwcm9vZl9hY2ssXG4gICAgICAgIHByb29mSGVpZ2h0OiBwcm9vZl9oZWlnaHQgPyB7XG4gICAgICAgICAgcmV2aXNpb25IZWlnaHQ6IExvbmcuZnJvbVN0cmluZyhwcm9vZl9oZWlnaHQucmV2aXNpb25faGVpZ2h0IHx8IFwiMFwiLCB0cnVlKSxcbiAgICAgICAgICByZXZpc2lvbk51bWJlcjogTG9uZy5mcm9tU3RyaW5nKHByb29mX2hlaWdodC5yZXZpc2lvbl9udW1iZXIgfHwgXCIwXCIsIHRydWUpXG4gICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgIHNpZ25lclxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIFwiL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnQ2hhbm5lbENsb3NlSW5pdFwiOiB7XG4gICAgYW1pbm9UeXBlOiBcImNvc21vcy1zZGsvTXNnQ2hhbm5lbENsb3NlSW5pdFwiLFxuICAgIHRvQW1pbm86ICh7XG4gICAgICBwb3J0SWQsXG4gICAgICBjaGFubmVsSWQsXG4gICAgICBzaWduZXJcbiAgICB9OiBNc2dDaGFubmVsQ2xvc2VJbml0KTogTXNnQ2hhbm5lbENsb3NlSW5pdEFtaW5vVHlwZVtcInZhbHVlXCJdID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBvcnRfaWQ6IHBvcnRJZCxcbiAgICAgICAgY2hhbm5lbF9pZDogY2hhbm5lbElkLFxuICAgICAgICBzaWduZXJcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tQW1pbm86ICh7XG4gICAgICBwb3J0X2lkLFxuICAgICAgY2hhbm5lbF9pZCxcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ0NoYW5uZWxDbG9zZUluaXRBbWlub1R5cGVbXCJ2YWx1ZVwiXSk6IE1zZ0NoYW5uZWxDbG9zZUluaXQgPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9ydElkOiBwb3J0X2lkLFxuICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWxfaWQsXG4gICAgICAgIHNpZ25lclxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIFwiL2liYy5jb3JlLmNoYW5uZWwudjEuTXNnQ2hhbm5lbENsb3NlQ29uZmlybVwiOiB7XG4gICAgYW1pbm9UeXBlOiBcImNvc21vcy1zZGsvTXNnQ2hhbm5lbENsb3NlQ29uZmlybVwiLFxuICAgIHRvQW1pbm86ICh7XG4gICAgICBwb3J0SWQsXG4gICAgICBjaGFubmVsSWQsXG4gICAgICBwcm9vZkluaXQsXG4gICAgICBwcm9vZkhlaWdodCxcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ0NoYW5uZWxDbG9zZUNvbmZpcm0pOiBNc2dDaGFubmVsQ2xvc2VDb25maXJtQW1pbm9UeXBlW1widmFsdWVcIl0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9ydF9pZDogcG9ydElkLFxuICAgICAgICBjaGFubmVsX2lkOiBjaGFubmVsSWQsXG4gICAgICAgIHByb29mX2luaXQ6IHByb29mSW5pdCxcbiAgICAgICAgcHJvb2ZfaGVpZ2h0OiBwcm9vZkhlaWdodCA/IHtcbiAgICAgICAgICByZXZpc2lvbl9oZWlnaHQ6IG9taXREZWZhdWx0KHByb29mSGVpZ2h0LnJldmlzaW9uSGVpZ2h0KT8udG9TdHJpbmcoKSxcbiAgICAgICAgICByZXZpc2lvbl9udW1iZXI6IG9taXREZWZhdWx0KHByb29mSGVpZ2h0LnJldmlzaW9uTnVtYmVyKT8udG9TdHJpbmcoKVxuICAgICAgICB9IDoge30sXG4gICAgICAgIHNpZ25lclxuICAgICAgfTtcbiAgICB9LFxuICAgIGZyb21BbWlubzogKHtcbiAgICAgIHBvcnRfaWQsXG4gICAgICBjaGFubmVsX2lkLFxuICAgICAgcHJvb2ZfaW5pdCxcbiAgICAgIHByb29mX2hlaWdodCxcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ0NoYW5uZWxDbG9zZUNvbmZpcm1BbWlub1R5cGVbXCJ2YWx1ZVwiXSk6IE1zZ0NoYW5uZWxDbG9zZUNvbmZpcm0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcG9ydElkOiBwb3J0X2lkLFxuICAgICAgICBjaGFubmVsSWQ6IGNoYW5uZWxfaWQsXG4gICAgICAgIHByb29mSW5pdDogcHJvb2ZfaW5pdCxcbiAgICAgICAgcHJvb2ZIZWlnaHQ6IHByb29mX2hlaWdodCA/IHtcbiAgICAgICAgICByZXZpc2lvbkhlaWdodDogTG9uZy5mcm9tU3RyaW5nKHByb29mX2hlaWdodC5yZXZpc2lvbl9oZWlnaHQgfHwgXCIwXCIsIHRydWUpLFxuICAgICAgICAgIHJldmlzaW9uTnVtYmVyOiBMb25nLmZyb21TdHJpbmcocHJvb2ZfaGVpZ2h0LnJldmlzaW9uX251bWJlciB8fCBcIjBcIiwgdHJ1ZSlcbiAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc2lnbmVyXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgXCIvaWJjLmNvcmUuY2hhbm5lbC52MS5Nc2dSZWN2UGFja2V0XCI6IHtcbiAgICBhbWlub1R5cGU6IFwiY29zbW9zLXNkay9Nc2dSZWN2UGFja2V0XCIsXG4gICAgdG9BbWlubzogKHtcbiAgICAgIHBhY2tldCxcbiAgICAgIHByb29mQ29tbWl0bWVudCxcbiAgICAgIHByb29mSGVpZ2h0LFxuICAgICAgc2lnbmVyXG4gICAgfTogTXNnUmVjdlBhY2tldCk6IE1zZ1JlY3ZQYWNrZXRBbWlub1R5cGVbXCJ2YWx1ZVwiXSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYWNrZXQ6IHtcbiAgICAgICAgICBzZXF1ZW5jZTogcGFja2V0LnNlcXVlbmNlLnRvU3RyaW5nKCksXG4gICAgICAgICAgc291cmNlX3BvcnQ6IHBhY2tldC5zb3VyY2VQb3J0LFxuICAgICAgICAgIHNvdXJjZV9jaGFubmVsOiBwYWNrZXQuc291cmNlQ2hhbm5lbCxcbiAgICAgICAgICBkZXN0aW5hdGlvbl9wb3J0OiBwYWNrZXQuZGVzdGluYXRpb25Qb3J0LFxuICAgICAgICAgIGRlc3RpbmF0aW9uX2NoYW5uZWw6IHBhY2tldC5kZXN0aW5hdGlvbkNoYW5uZWwsXG4gICAgICAgICAgZGF0YTogcGFja2V0LmRhdGEsXG4gICAgICAgICAgdGltZW91dF9oZWlnaHQ6IHBhY2tldC50aW1lb3V0SGVpZ2h0ID8ge1xuICAgICAgICAgICAgcmV2aXNpb25faGVpZ2h0OiBvbWl0RGVmYXVsdChwYWNrZXQudGltZW91dEhlaWdodC5yZXZpc2lvbkhlaWdodCk/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZXZpc2lvbl9udW1iZXI6IG9taXREZWZhdWx0KHBhY2tldC50aW1lb3V0SGVpZ2h0LnJldmlzaW9uTnVtYmVyKT8udG9TdHJpbmcoKVxuICAgICAgICAgIH0gOiB7fSxcbiAgICAgICAgICB0aW1lb3V0X3RpbWVzdGFtcDogcGFja2V0LnRpbWVvdXRUaW1lc3RhbXAudG9TdHJpbmcoKVxuICAgICAgICB9LFxuICAgICAgICBwcm9vZl9jb21taXRtZW50OiBwcm9vZkNvbW1pdG1lbnQsXG4gICAgICAgIHByb29mX2hlaWdodDogcHJvb2ZIZWlnaHQgPyB7XG4gICAgICAgICAgcmV2aXNpb25faGVpZ2h0OiBvbWl0RGVmYXVsdChwcm9vZkhlaWdodC5yZXZpc2lvbkhlaWdodCk/LnRvU3RyaW5nKCksXG4gICAgICAgICAgcmV2aXNpb25fbnVtYmVyOiBvbWl0RGVmYXVsdChwcm9vZkhlaWdodC5yZXZpc2lvbk51bWJlcik/LnRvU3RyaW5nKClcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICBzaWduZXJcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tQW1pbm86ICh7XG4gICAgICBwYWNrZXQsXG4gICAgICBwcm9vZl9jb21taXRtZW50LFxuICAgICAgcHJvb2ZfaGVpZ2h0LFxuICAgICAgc2lnbmVyXG4gICAgfTogTXNnUmVjdlBhY2tldEFtaW5vVHlwZVtcInZhbHVlXCJdKTogTXNnUmVjdlBhY2tldCA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYWNrZXQ6IHtcbiAgICAgICAgICBzZXF1ZW5jZTogTG9uZy5mcm9tU3RyaW5nKHBhY2tldC5zZXF1ZW5jZSksXG4gICAgICAgICAgc291cmNlUG9ydDogcGFja2V0LnNvdXJjZV9wb3J0LFxuICAgICAgICAgIHNvdXJjZUNoYW5uZWw6IHBhY2tldC5zb3VyY2VfY2hhbm5lbCxcbiAgICAgICAgICBkZXN0aW5hdGlvblBvcnQ6IHBhY2tldC5kZXN0aW5hdGlvbl9wb3J0LFxuICAgICAgICAgIGRlc3RpbmF0aW9uQ2hhbm5lbDogcGFja2V0LmRlc3RpbmF0aW9uX2NoYW5uZWwsXG4gICAgICAgICAgZGF0YTogcGFja2V0LmRhdGEsXG4gICAgICAgICAgdGltZW91dEhlaWdodDogcGFja2V0LnRpbWVvdXRfaGVpZ2h0ID8ge1xuICAgICAgICAgICAgcmV2aXNpb25IZWlnaHQ6IExvbmcuZnJvbVN0cmluZyhwYWNrZXQudGltZW91dF9oZWlnaHQucmV2aXNpb25faGVpZ2h0IHx8IFwiMFwiLCB0cnVlKSxcbiAgICAgICAgICAgIHJldmlzaW9uTnVtYmVyOiBMb25nLmZyb21TdHJpbmcocGFja2V0LnRpbWVvdXRfaGVpZ2h0LnJldmlzaW9uX251bWJlciB8fCBcIjBcIiwgdHJ1ZSlcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIHRpbWVvdXRUaW1lc3RhbXA6IExvbmcuZnJvbVN0cmluZyhwYWNrZXQudGltZW91dF90aW1lc3RhbXApXG4gICAgICAgIH0sXG4gICAgICAgIHByb29mQ29tbWl0bWVudDogcHJvb2ZfY29tbWl0bWVudCxcbiAgICAgICAgcHJvb2ZIZWlnaHQ6IHByb29mX2hlaWdodCA/IHtcbiAgICAgICAgICByZXZpc2lvbkhlaWdodDogTG9uZy5mcm9tU3RyaW5nKHByb29mX2hlaWdodC5yZXZpc2lvbl9oZWlnaHQgfHwgXCIwXCIsIHRydWUpLFxuICAgICAgICAgIHJldmlzaW9uTnVtYmVyOiBMb25nLmZyb21TdHJpbmcocHJvb2ZfaGVpZ2h0LnJldmlzaW9uX251bWJlciB8fCBcIjBcIiwgdHJ1ZSlcbiAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc2lnbmVyXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgXCIvaWJjLmNvcmUuY2hhbm5lbC52MS5Nc2dUaW1lb3V0XCI6IHtcbiAgICBhbWlub1R5cGU6IFwiY29zbW9zLXNkay9Nc2dUaW1lb3V0XCIsXG4gICAgdG9BbWlubzogKHtcbiAgICAgIHBhY2tldCxcbiAgICAgIHByb29mVW5yZWNlaXZlZCxcbiAgICAgIHByb29mSGVpZ2h0LFxuICAgICAgbmV4dFNlcXVlbmNlUmVjdixcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ1RpbWVvdXQpOiBNc2dUaW1lb3V0QW1pbm9UeXBlW1widmFsdWVcIl0gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFja2V0OiB7XG4gICAgICAgICAgc2VxdWVuY2U6IHBhY2tldC5zZXF1ZW5jZS50b1N0cmluZygpLFxuICAgICAgICAgIHNvdXJjZV9wb3J0OiBwYWNrZXQuc291cmNlUG9ydCxcbiAgICAgICAgICBzb3VyY2VfY2hhbm5lbDogcGFja2V0LnNvdXJjZUNoYW5uZWwsXG4gICAgICAgICAgZGVzdGluYXRpb25fcG9ydDogcGFja2V0LmRlc3RpbmF0aW9uUG9ydCxcbiAgICAgICAgICBkZXN0aW5hdGlvbl9jaGFubmVsOiBwYWNrZXQuZGVzdGluYXRpb25DaGFubmVsLFxuICAgICAgICAgIGRhdGE6IHBhY2tldC5kYXRhLFxuICAgICAgICAgIHRpbWVvdXRfaGVpZ2h0OiBwYWNrZXQudGltZW91dEhlaWdodCA/IHtcbiAgICAgICAgICAgIHJldmlzaW9uX2hlaWdodDogb21pdERlZmF1bHQocGFja2V0LnRpbWVvdXRIZWlnaHQucmV2aXNpb25IZWlnaHQpPy50b1N0cmluZygpLFxuICAgICAgICAgICAgcmV2aXNpb25fbnVtYmVyOiBvbWl0RGVmYXVsdChwYWNrZXQudGltZW91dEhlaWdodC5yZXZpc2lvbk51bWJlcik/LnRvU3RyaW5nKClcbiAgICAgICAgICB9IDoge30sXG4gICAgICAgICAgdGltZW91dF90aW1lc3RhbXA6IHBhY2tldC50aW1lb3V0VGltZXN0YW1wLnRvU3RyaW5nKClcbiAgICAgICAgfSxcbiAgICAgICAgcHJvb2ZfdW5yZWNlaXZlZDogcHJvb2ZVbnJlY2VpdmVkLFxuICAgICAgICBwcm9vZl9oZWlnaHQ6IHByb29mSGVpZ2h0ID8ge1xuICAgICAgICAgIHJldmlzaW9uX2hlaWdodDogb21pdERlZmF1bHQocHJvb2ZIZWlnaHQucmV2aXNpb25IZWlnaHQpPy50b1N0cmluZygpLFxuICAgICAgICAgIHJldmlzaW9uX251bWJlcjogb21pdERlZmF1bHQocHJvb2ZIZWlnaHQucmV2aXNpb25OdW1iZXIpPy50b1N0cmluZygpXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgbmV4dF9zZXF1ZW5jZV9yZWN2OiBuZXh0U2VxdWVuY2VSZWN2LnRvU3RyaW5nKCksXG4gICAgICAgIHNpZ25lclxuICAgICAgfTtcbiAgICB9LFxuICAgIGZyb21BbWlubzogKHtcbiAgICAgIHBhY2tldCxcbiAgICAgIHByb29mX3VucmVjZWl2ZWQsXG4gICAgICBwcm9vZl9oZWlnaHQsXG4gICAgICBuZXh0X3NlcXVlbmNlX3JlY3YsXG4gICAgICBzaWduZXJcbiAgICB9OiBNc2dUaW1lb3V0QW1pbm9UeXBlW1widmFsdWVcIl0pOiBNc2dUaW1lb3V0ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhY2tldDoge1xuICAgICAgICAgIHNlcXVlbmNlOiBMb25nLmZyb21TdHJpbmcocGFja2V0LnNlcXVlbmNlKSxcbiAgICAgICAgICBzb3VyY2VQb3J0OiBwYWNrZXQuc291cmNlX3BvcnQsXG4gICAgICAgICAgc291cmNlQ2hhbm5lbDogcGFja2V0LnNvdXJjZV9jaGFubmVsLFxuICAgICAgICAgIGRlc3RpbmF0aW9uUG9ydDogcGFja2V0LmRlc3RpbmF0aW9uX3BvcnQsXG4gICAgICAgICAgZGVzdGluYXRpb25DaGFubmVsOiBwYWNrZXQuZGVzdGluYXRpb25fY2hhbm5lbCxcbiAgICAgICAgICBkYXRhOiBwYWNrZXQuZGF0YSxcbiAgICAgICAgICB0aW1lb3V0SGVpZ2h0OiBwYWNrZXQudGltZW91dF9oZWlnaHQgPyB7XG4gICAgICAgICAgICByZXZpc2lvbkhlaWdodDogTG9uZy5mcm9tU3RyaW5nKHBhY2tldC50aW1lb3V0X2hlaWdodC5yZXZpc2lvbl9oZWlnaHQgfHwgXCIwXCIsIHRydWUpLFxuICAgICAgICAgICAgcmV2aXNpb25OdW1iZXI6IExvbmcuZnJvbVN0cmluZyhwYWNrZXQudGltZW91dF9oZWlnaHQucmV2aXNpb25fbnVtYmVyIHx8IFwiMFwiLCB0cnVlKVxuICAgICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgdGltZW91dFRpbWVzdGFtcDogTG9uZy5mcm9tU3RyaW5nKHBhY2tldC50aW1lb3V0X3RpbWVzdGFtcClcbiAgICAgICAgfSxcbiAgICAgICAgcHJvb2ZVbnJlY2VpdmVkOiBwcm9vZl91bnJlY2VpdmVkLFxuICAgICAgICBwcm9vZkhlaWdodDogcHJvb2ZfaGVpZ2h0ID8ge1xuICAgICAgICAgIHJldmlzaW9uSGVpZ2h0OiBMb25nLmZyb21TdHJpbmcocHJvb2ZfaGVpZ2h0LnJldmlzaW9uX2hlaWdodCB8fCBcIjBcIiwgdHJ1ZSksXG4gICAgICAgICAgcmV2aXNpb25OdW1iZXI6IExvbmcuZnJvbVN0cmluZyhwcm9vZl9oZWlnaHQucmV2aXNpb25fbnVtYmVyIHx8IFwiMFwiLCB0cnVlKVxuICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICBuZXh0U2VxdWVuY2VSZWN2OiBMb25nLmZyb21TdHJpbmcobmV4dF9zZXF1ZW5jZV9yZWN2KSxcbiAgICAgICAgc2lnbmVyXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgXCIvaWJjLmNvcmUuY2hhbm5lbC52MS5Nc2dUaW1lb3V0T25DbG9zZVwiOiB7XG4gICAgYW1pbm9UeXBlOiBcImNvc21vcy1zZGsvTXNnVGltZW91dE9uQ2xvc2VcIixcbiAgICB0b0FtaW5vOiAoe1xuICAgICAgcGFja2V0LFxuICAgICAgcHJvb2ZVbnJlY2VpdmVkLFxuICAgICAgcHJvb2ZDbG9zZSxcbiAgICAgIHByb29mSGVpZ2h0LFxuICAgICAgbmV4dFNlcXVlbmNlUmVjdixcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ1RpbWVvdXRPbkNsb3NlKTogTXNnVGltZW91dE9uQ2xvc2VBbWlub1R5cGVbXCJ2YWx1ZVwiXSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYWNrZXQ6IHtcbiAgICAgICAgICBzZXF1ZW5jZTogcGFja2V0LnNlcXVlbmNlLnRvU3RyaW5nKCksXG4gICAgICAgICAgc291cmNlX3BvcnQ6IHBhY2tldC5zb3VyY2VQb3J0LFxuICAgICAgICAgIHNvdXJjZV9jaGFubmVsOiBwYWNrZXQuc291cmNlQ2hhbm5lbCxcbiAgICAgICAgICBkZXN0aW5hdGlvbl9wb3J0OiBwYWNrZXQuZGVzdGluYXRpb25Qb3J0LFxuICAgICAgICAgIGRlc3RpbmF0aW9uX2NoYW5uZWw6IHBhY2tldC5kZXN0aW5hdGlvbkNoYW5uZWwsXG4gICAgICAgICAgZGF0YTogcGFja2V0LmRhdGEsXG4gICAgICAgICAgdGltZW91dF9oZWlnaHQ6IHBhY2tldC50aW1lb3V0SGVpZ2h0ID8ge1xuICAgICAgICAgICAgcmV2aXNpb25faGVpZ2h0OiBvbWl0RGVmYXVsdChwYWNrZXQudGltZW91dEhlaWdodC5yZXZpc2lvbkhlaWdodCk/LnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZXZpc2lvbl9udW1iZXI6IG9taXREZWZhdWx0KHBhY2tldC50aW1lb3V0SGVpZ2h0LnJldmlzaW9uTnVtYmVyKT8udG9TdHJpbmcoKVxuICAgICAgICAgIH0gOiB7fSxcbiAgICAgICAgICB0aW1lb3V0X3RpbWVzdGFtcDogcGFja2V0LnRpbWVvdXRUaW1lc3RhbXAudG9TdHJpbmcoKVxuICAgICAgICB9LFxuICAgICAgICBwcm9vZl91bnJlY2VpdmVkOiBwcm9vZlVucmVjZWl2ZWQsXG4gICAgICAgIHByb29mX2Nsb3NlOiBwcm9vZkNsb3NlLFxuICAgICAgICBwcm9vZl9oZWlnaHQ6IHByb29mSGVpZ2h0ID8ge1xuICAgICAgICAgIHJldmlzaW9uX2hlaWdodDogb21pdERlZmF1bHQocHJvb2ZIZWlnaHQucmV2aXNpb25IZWlnaHQpPy50b1N0cmluZygpLFxuICAgICAgICAgIHJldmlzaW9uX251bWJlcjogb21pdERlZmF1bHQocHJvb2ZIZWlnaHQucmV2aXNpb25OdW1iZXIpPy50b1N0cmluZygpXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgbmV4dF9zZXF1ZW5jZV9yZWN2OiBuZXh0U2VxdWVuY2VSZWN2LnRvU3RyaW5nKCksXG4gICAgICAgIHNpZ25lclxuICAgICAgfTtcbiAgICB9LFxuICAgIGZyb21BbWlubzogKHtcbiAgICAgIHBhY2tldCxcbiAgICAgIHByb29mX3VucmVjZWl2ZWQsXG4gICAgICBwcm9vZl9jbG9zZSxcbiAgICAgIHByb29mX2hlaWdodCxcbiAgICAgIG5leHRfc2VxdWVuY2VfcmVjdixcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ1RpbWVvdXRPbkNsb3NlQW1pbm9UeXBlW1widmFsdWVcIl0pOiBNc2dUaW1lb3V0T25DbG9zZSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYWNrZXQ6IHtcbiAgICAgICAgICBzZXF1ZW5jZTogTG9uZy5mcm9tU3RyaW5nKHBhY2tldC5zZXF1ZW5jZSksXG4gICAgICAgICAgc291cmNlUG9ydDogcGFja2V0LnNvdXJjZV9wb3J0LFxuICAgICAgICAgIHNvdXJjZUNoYW5uZWw6IHBhY2tldC5zb3VyY2VfY2hhbm5lbCxcbiAgICAgICAgICBkZXN0aW5hdGlvblBvcnQ6IHBhY2tldC5kZXN0aW5hdGlvbl9wb3J0LFxuICAgICAgICAgIGRlc3RpbmF0aW9uQ2hhbm5lbDogcGFja2V0LmRlc3RpbmF0aW9uX2NoYW5uZWwsXG4gICAgICAgICAgZGF0YTogcGFja2V0LmRhdGEsXG4gICAgICAgICAgdGltZW91dEhlaWdodDogcGFja2V0LnRpbWVvdXRfaGVpZ2h0ID8ge1xuICAgICAgICAgICAgcmV2aXNpb25IZWlnaHQ6IExvbmcuZnJvbVN0cmluZyhwYWNrZXQudGltZW91dF9oZWlnaHQucmV2aXNpb25faGVpZ2h0IHx8IFwiMFwiLCB0cnVlKSxcbiAgICAgICAgICAgIHJldmlzaW9uTnVtYmVyOiBMb25nLmZyb21TdHJpbmcocGFja2V0LnRpbWVvdXRfaGVpZ2h0LnJldmlzaW9uX251bWJlciB8fCBcIjBcIiwgdHJ1ZSlcbiAgICAgICAgICB9IDogdW5kZWZpbmVkLFxuICAgICAgICAgIHRpbWVvdXRUaW1lc3RhbXA6IExvbmcuZnJvbVN0cmluZyhwYWNrZXQudGltZW91dF90aW1lc3RhbXApXG4gICAgICAgIH0sXG4gICAgICAgIHByb29mVW5yZWNlaXZlZDogcHJvb2ZfdW5yZWNlaXZlZCxcbiAgICAgICAgcHJvb2ZDbG9zZTogcHJvb2ZfY2xvc2UsXG4gICAgICAgIHByb29mSGVpZ2h0OiBwcm9vZl9oZWlnaHQgPyB7XG4gICAgICAgICAgcmV2aXNpb25IZWlnaHQ6IExvbmcuZnJvbVN0cmluZyhwcm9vZl9oZWlnaHQucmV2aXNpb25faGVpZ2h0IHx8IFwiMFwiLCB0cnVlKSxcbiAgICAgICAgICByZXZpc2lvbk51bWJlcjogTG9uZy5mcm9tU3RyaW5nKHByb29mX2hlaWdodC5yZXZpc2lvbl9udW1iZXIgfHwgXCIwXCIsIHRydWUpXG4gICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgIG5leHRTZXF1ZW5jZVJlY3Y6IExvbmcuZnJvbVN0cmluZyhuZXh0X3NlcXVlbmNlX3JlY3YpLFxuICAgICAgICBzaWduZXJcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICBcIi9pYmMuY29yZS5jaGFubmVsLnYxLk1zZ0Fja25vd2xlZGdlbWVudFwiOiB7XG4gICAgYW1pbm9UeXBlOiBcImNvc21vcy1zZGsvTXNnQWNrbm93bGVkZ2VtZW50XCIsXG4gICAgdG9BbWlubzogKHtcbiAgICAgIHBhY2tldCxcbiAgICAgIGFja25vd2xlZGdlbWVudCxcbiAgICAgIHByb29mQWNrZWQsXG4gICAgICBwcm9vZkhlaWdodCxcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ0Fja25vd2xlZGdlbWVudCk6IE1zZ0Fja25vd2xlZGdlbWVudEFtaW5vVHlwZVtcInZhbHVlXCJdID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhY2tldDoge1xuICAgICAgICAgIHNlcXVlbmNlOiBwYWNrZXQuc2VxdWVuY2UudG9TdHJpbmcoKSxcbiAgICAgICAgICBzb3VyY2VfcG9ydDogcGFja2V0LnNvdXJjZVBvcnQsXG4gICAgICAgICAgc291cmNlX2NoYW5uZWw6IHBhY2tldC5zb3VyY2VDaGFubmVsLFxuICAgICAgICAgIGRlc3RpbmF0aW9uX3BvcnQ6IHBhY2tldC5kZXN0aW5hdGlvblBvcnQsXG4gICAgICAgICAgZGVzdGluYXRpb25fY2hhbm5lbDogcGFja2V0LmRlc3RpbmF0aW9uQ2hhbm5lbCxcbiAgICAgICAgICBkYXRhOiBwYWNrZXQuZGF0YSxcbiAgICAgICAgICB0aW1lb3V0X2hlaWdodDogcGFja2V0LnRpbWVvdXRIZWlnaHQgPyB7XG4gICAgICAgICAgICByZXZpc2lvbl9oZWlnaHQ6IG9taXREZWZhdWx0KHBhY2tldC50aW1lb3V0SGVpZ2h0LnJldmlzaW9uSGVpZ2h0KT8udG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHJldmlzaW9uX251bWJlcjogb21pdERlZmF1bHQocGFja2V0LnRpbWVvdXRIZWlnaHQucmV2aXNpb25OdW1iZXIpPy50b1N0cmluZygpXG4gICAgICAgICAgfSA6IHt9LFxuICAgICAgICAgIHRpbWVvdXRfdGltZXN0YW1wOiBwYWNrZXQudGltZW91dFRpbWVzdGFtcC50b1N0cmluZygpXG4gICAgICAgIH0sXG4gICAgICAgIGFja25vd2xlZGdlbWVudCxcbiAgICAgICAgcHJvb2ZfYWNrZWQ6IHByb29mQWNrZWQsXG4gICAgICAgIHByb29mX2hlaWdodDogcHJvb2ZIZWlnaHQgPyB7XG4gICAgICAgICAgcmV2aXNpb25faGVpZ2h0OiBvbWl0RGVmYXVsdChwcm9vZkhlaWdodC5yZXZpc2lvbkhlaWdodCk/LnRvU3RyaW5nKCksXG4gICAgICAgICAgcmV2aXNpb25fbnVtYmVyOiBvbWl0RGVmYXVsdChwcm9vZkhlaWdodC5yZXZpc2lvbk51bWJlcik/LnRvU3RyaW5nKClcbiAgICAgICAgfSA6IHt9LFxuICAgICAgICBzaWduZXJcbiAgICAgIH07XG4gICAgfSxcbiAgICBmcm9tQW1pbm86ICh7XG4gICAgICBwYWNrZXQsXG4gICAgICBhY2tub3dsZWRnZW1lbnQsXG4gICAgICBwcm9vZl9hY2tlZCxcbiAgICAgIHByb29mX2hlaWdodCxcbiAgICAgIHNpZ25lclxuICAgIH06IE1zZ0Fja25vd2xlZGdlbWVudEFtaW5vVHlwZVtcInZhbHVlXCJdKTogTXNnQWNrbm93bGVkZ2VtZW50ID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhY2tldDoge1xuICAgICAgICAgIHNlcXVlbmNlOiBMb25nLmZyb21TdHJpbmcocGFja2V0LnNlcXVlbmNlKSxcbiAgICAgICAgICBzb3VyY2VQb3J0OiBwYWNrZXQuc291cmNlX3BvcnQsXG4gICAgICAgICAgc291cmNlQ2hhbm5lbDogcGFja2V0LnNvdXJjZV9jaGFubmVsLFxuICAgICAgICAgIGRlc3RpbmF0aW9uUG9ydDogcGFja2V0LmRlc3RpbmF0aW9uX3BvcnQsXG4gICAgICAgICAgZGVzdGluYXRpb25DaGFubmVsOiBwYWNrZXQuZGVzdGluYXRpb25fY2hhbm5lbCxcbiAgICAgICAgICBkYXRhOiBwYWNrZXQuZGF0YSxcbiAgICAgICAgICB0aW1lb3V0SGVpZ2h0OiBwYWNrZXQudGltZW91dF9oZWlnaHQgPyB7XG4gICAgICAgICAgICByZXZpc2lvbkhlaWdodDogTG9uZy5mcm9tU3RyaW5nKHBhY2tldC50aW1lb3V0X2hlaWdodC5yZXZpc2lvbl9oZWlnaHQgfHwgXCIwXCIsIHRydWUpLFxuICAgICAgICAgICAgcmV2aXNpb25OdW1iZXI6IExvbmcuZnJvbVN0cmluZyhwYWNrZXQudGltZW91dF9oZWlnaHQucmV2aXNpb25fbnVtYmVyIHx8IFwiMFwiLCB0cnVlKVxuICAgICAgICAgIH0gOiB1bmRlZmluZWQsXG4gICAgICAgICAgdGltZW91dFRpbWVzdGFtcDogTG9uZy5mcm9tU3RyaW5nKHBhY2tldC50aW1lb3V0X3RpbWVzdGFtcClcbiAgICAgICAgfSxcbiAgICAgICAgYWNrbm93bGVkZ2VtZW50LFxuICAgICAgICBwcm9vZkFja2VkOiBwcm9vZl9hY2tlZCxcbiAgICAgICAgcHJvb2ZIZWlnaHQ6IHByb29mX2hlaWdodCA/IHtcbiAgICAgICAgICByZXZpc2lvbkhlaWdodDogTG9uZy5mcm9tU3RyaW5nKHByb29mX2hlaWdodC5yZXZpc2lvbl9oZWlnaHQgfHwgXCIwXCIsIHRydWUpLFxuICAgICAgICAgIHJldmlzaW9uTnVtYmVyOiBMb25nLmZyb21TdHJpbmcocHJvb2ZfaGVpZ2h0LnJldmlzaW9uX251bWJlciB8fCBcIjBcIiwgdHJ1ZSlcbiAgICAgICAgfSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc2lnbmVyXG4gICAgICB9O1xuICAgIH1cbiAgfVxufTsiXSwibmFtZXMiOlsic3RhdGVGcm9tSlNPTiIsIm9yZGVyRnJvbUpTT04iLCJvbWl0RGVmYXVsdCIsIkxvbmciLCJBbWlub0NvbnZlcnRlciIsImFtaW5vVHlwZSIsInRvQW1pbm8iLCJwb3J0SWQiLCJjaGFubmVsIiwic2lnbmVyIiwicG9ydF9pZCIsInN0YXRlIiwib3JkZXJpbmciLCJjb3VudGVycGFydHkiLCJjaGFubmVsX2lkIiwiY2hhbm5lbElkIiwiY29ubmVjdGlvbl9ob3BzIiwiY29ubmVjdGlvbkhvcHMiLCJ2ZXJzaW9uIiwiZnJvbUFtaW5vIiwicHJldmlvdXNDaGFubmVsSWQiLCJjb3VudGVycGFydHlWZXJzaW9uIiwicHJvb2ZJbml0IiwicHJvb2ZIZWlnaHQiLCJwcmV2aW91c19jaGFubmVsX2lkIiwiY291bnRlcnBhcnR5X3ZlcnNpb24iLCJwcm9vZl9pbml0IiwicHJvb2ZfaGVpZ2h0IiwicmV2aXNpb25faGVpZ2h0IiwicmV2aXNpb25IZWlnaHQiLCJ0b1N0cmluZyIsInJldmlzaW9uX251bWJlciIsInJldmlzaW9uTnVtYmVyIiwiZnJvbVN0cmluZyIsInVuZGVmaW5lZCIsImNvdW50ZXJwYXJ0eUNoYW5uZWxJZCIsInByb29mVHJ5IiwiY291bnRlcnBhcnR5X2NoYW5uZWxfaWQiLCJwcm9vZl90cnkiLCJwcm9vZkFjayIsInByb29mX2FjayIsInBhY2tldCIsInByb29mQ29tbWl0bWVudCIsInNlcXVlbmNlIiwic291cmNlX3BvcnQiLCJzb3VyY2VQb3J0Iiwic291cmNlX2NoYW5uZWwiLCJzb3VyY2VDaGFubmVsIiwiZGVzdGluYXRpb25fcG9ydCIsImRlc3RpbmF0aW9uUG9ydCIsImRlc3RpbmF0aW9uX2NoYW5uZWwiLCJkZXN0aW5hdGlvbkNoYW5uZWwiLCJkYXRhIiwidGltZW91dF9oZWlnaHQiLCJ0aW1lb3V0SGVpZ2h0IiwidGltZW91dF90aW1lc3RhbXAiLCJ0aW1lb3V0VGltZXN0YW1wIiwicHJvb2ZfY29tbWl0bWVudCIsInByb29mVW5yZWNlaXZlZCIsIm5leHRTZXF1ZW5jZVJlY3YiLCJwcm9vZl91bnJlY2VpdmVkIiwibmV4dF9zZXF1ZW5jZV9yZWN2IiwicHJvb2ZDbG9zZSIsInByb29mX2Nsb3NlIiwiYWNrbm93bGVkZ2VtZW50IiwicHJvb2ZBY2tlZCIsInByb29mX2Fja2VkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/channel/v1/tx.amino.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/channel/v1/tx.registry.ts":
/*!********************************************************!*\
  !*** ./src/codegen/ibc/core/channel/v1/tx.registry.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MessageComposer\": () => (/* binding */ MessageComposer),\n/* harmony export */   \"load\": () => (/* binding */ load),\n/* harmony export */   \"registry\": () => (/* binding */ registry)\n/* harmony export */ });\n/* harmony import */ var _tx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tx */ \"./src/codegen/ibc/core/channel/v1/tx.ts\");\n\nconst registry = [\n    [\n        \"/ibc.core.channel.v1.MsgChannelOpenInit\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenInit\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgChannelOpenTry\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenTry\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgChannelOpenAck\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenAck\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgChannelOpenConfirm\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenConfirm\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgChannelCloseInit\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelCloseInit\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgChannelCloseConfirm\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelCloseConfirm\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgRecvPacket\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgRecvPacket\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgTimeout\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTimeout\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgTimeoutOnClose\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTimeoutOnClose\n    ],\n    [\n        \"/ibc.core.channel.v1.MsgAcknowledgement\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgAcknowledgement\n    ]\n];\nconst load = (protoRegistry)=>{\n    registry.forEach(([typeUrl, mod])=>{\n        protoRegistry.register(typeUrl, mod);\n    });\n};\nconst MessageComposer = {\n    encoded: {\n        channelOpenInit (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenInit\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenInit.encode(value).finish()\n            };\n        },\n        channelOpenTry (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenTry\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenTry.encode(value).finish()\n            };\n        },\n        channelOpenAck (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenAck\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenAck.encode(value).finish()\n            };\n        },\n        channelOpenConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenConfirm\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenConfirm.encode(value).finish()\n            };\n        },\n        channelCloseInit (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelCloseInit\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelCloseInit.encode(value).finish()\n            };\n        },\n        channelCloseConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelCloseConfirm\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelCloseConfirm.encode(value).finish()\n            };\n        },\n        recvPacket (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgRecvPacket\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgRecvPacket.encode(value).finish()\n            };\n        },\n        timeout (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgTimeout\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTimeout.encode(value).finish()\n            };\n        },\n        timeoutOnClose (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgTimeoutOnClose\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTimeoutOnClose.encode(value).finish()\n            };\n        },\n        acknowledgement (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgAcknowledgement\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgAcknowledgement.encode(value).finish()\n            };\n        }\n    },\n    withTypeUrl: {\n        channelOpenInit (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenInit\",\n                value\n            };\n        },\n        channelOpenTry (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenTry\",\n                value\n            };\n        },\n        channelOpenAck (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenAck\",\n                value\n            };\n        },\n        channelOpenConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenConfirm\",\n                value\n            };\n        },\n        channelCloseInit (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelCloseInit\",\n                value\n            };\n        },\n        channelCloseConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelCloseConfirm\",\n                value\n            };\n        },\n        recvPacket (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgRecvPacket\",\n                value\n            };\n        },\n        timeout (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgTimeout\",\n                value\n            };\n        },\n        timeoutOnClose (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgTimeoutOnClose\",\n                value\n            };\n        },\n        acknowledgement (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgAcknowledgement\",\n                value\n            };\n        }\n    },\n    fromPartial: {\n        channelOpenInit (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenInit\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenInit.fromPartial(value)\n            };\n        },\n        channelOpenTry (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenTry\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenTry.fromPartial(value)\n            };\n        },\n        channelOpenAck (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenAck\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenAck.fromPartial(value)\n            };\n        },\n        channelOpenConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelOpenConfirm\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelOpenConfirm.fromPartial(value)\n            };\n        },\n        channelCloseInit (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelCloseInit\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelCloseInit.fromPartial(value)\n            };\n        },\n        channelCloseConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgChannelCloseConfirm\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgChannelCloseConfirm.fromPartial(value)\n            };\n        },\n        recvPacket (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgRecvPacket\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgRecvPacket.fromPartial(value)\n            };\n        },\n        timeout (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgTimeout\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTimeout.fromPartial(value)\n            };\n        },\n        timeoutOnClose (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgTimeoutOnClose\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgTimeoutOnClose.fromPartial(value)\n            };\n        },\n        acknowledgement (value) {\n            return {\n                typeUrl: \"/ibc.core.channel.v1.MsgAcknowledgement\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgAcknowledgement.fromPartial(value)\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/channel/v1/tx.registry.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/channel/v1/tx.ts":
/*!***********************************************!*\
  !*** ./src/codegen/ibc/core/channel/v1/tx.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MsgAcknowledgement\": () => (/* binding */ MsgAcknowledgement),\n/* harmony export */   \"MsgAcknowledgementResponse\": () => (/* binding */ MsgAcknowledgementResponse),\n/* harmony export */   \"MsgChannelCloseConfirm\": () => (/* binding */ MsgChannelCloseConfirm),\n/* harmony export */   \"MsgChannelCloseConfirmResponse\": () => (/* binding */ MsgChannelCloseConfirmResponse),\n/* harmony export */   \"MsgChannelCloseInit\": () => (/* binding */ MsgChannelCloseInit),\n/* harmony export */   \"MsgChannelCloseInitResponse\": () => (/* binding */ MsgChannelCloseInitResponse),\n/* harmony export */   \"MsgChannelOpenAck\": () => (/* binding */ MsgChannelOpenAck),\n/* harmony export */   \"MsgChannelOpenAckResponse\": () => (/* binding */ MsgChannelOpenAckResponse),\n/* harmony export */   \"MsgChannelOpenConfirm\": () => (/* binding */ MsgChannelOpenConfirm),\n/* harmony export */   \"MsgChannelOpenConfirmResponse\": () => (/* binding */ MsgChannelOpenConfirmResponse),\n/* harmony export */   \"MsgChannelOpenInit\": () => (/* binding */ MsgChannelOpenInit),\n/* harmony export */   \"MsgChannelOpenInitResponse\": () => (/* binding */ MsgChannelOpenInitResponse),\n/* harmony export */   \"MsgChannelOpenTry\": () => (/* binding */ MsgChannelOpenTry),\n/* harmony export */   \"MsgChannelOpenTryResponse\": () => (/* binding */ MsgChannelOpenTryResponse),\n/* harmony export */   \"MsgRecvPacket\": () => (/* binding */ MsgRecvPacket),\n/* harmony export */   \"MsgRecvPacketResponse\": () => (/* binding */ MsgRecvPacketResponse),\n/* harmony export */   \"MsgTimeout\": () => (/* binding */ MsgTimeout),\n/* harmony export */   \"MsgTimeoutOnClose\": () => (/* binding */ MsgTimeoutOnClose),\n/* harmony export */   \"MsgTimeoutOnCloseResponse\": () => (/* binding */ MsgTimeoutOnCloseResponse),\n/* harmony export */   \"MsgTimeoutResponse\": () => (/* binding */ MsgTimeoutResponse)\n/* harmony export */ });\n/* harmony import */ var _channel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./channel */ \"./src/codegen/ibc/core/channel/v1/channel.ts\");\n/* harmony import */ var _client_v1_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../client/v1/client */ \"./src/codegen/ibc/core/client/v1/client.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction createBaseMsgChannelOpenInit() {\n    return {\n        portId: \"\",\n        channel: undefined,\n        signer: \"\"\n    };\n}\nconst MsgChannelOpenInit = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channel !== undefined) {\n            _channel__WEBPACK_IMPORTED_MODULE_0__.Channel.encode(message.channel, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(26).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenInit();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channel = _channel__WEBPACK_IMPORTED_MODULE_0__.Channel.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgChannelOpenInit();\n        message.portId = object.portId ?? \"\";\n        message.channel = object.channel !== undefined && object.channel !== null ? _channel__WEBPACK_IMPORTED_MODULE_0__.Channel.fromPartial(object.channel) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgChannelOpenInitResponse() {\n    return {};\n}\nconst MsgChannelOpenInitResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenInitResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgChannelOpenInitResponse();\n        return message;\n    }\n};\nfunction createBaseMsgChannelOpenTry() {\n    return {\n        portId: \"\",\n        previousChannelId: \"\",\n        channel: undefined,\n        counterpartyVersion: \"\",\n        proofInit: new Uint8Array(),\n        proofHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgChannelOpenTry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.previousChannelId !== \"\") {\n            writer.uint32(18).string(message.previousChannelId);\n        }\n        if (message.channel !== undefined) {\n            _channel__WEBPACK_IMPORTED_MODULE_0__.Channel.encode(message.channel, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.counterpartyVersion !== \"\") {\n            writer.uint32(34).string(message.counterpartyVersion);\n        }\n        if (message.proofInit.length !== 0) {\n            writer.uint32(42).bytes(message.proofInit);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(58).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenTry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.previousChannelId = reader.string();\n                    break;\n                case 3:\n                    message.channel = _channel__WEBPACK_IMPORTED_MODULE_0__.Channel.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.counterpartyVersion = reader.string();\n                    break;\n                case 5:\n                    message.proofInit = reader.bytes();\n                    break;\n                case 6:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgChannelOpenTry();\n        message.portId = object.portId ?? \"\";\n        message.previousChannelId = object.previousChannelId ?? \"\";\n        message.channel = object.channel !== undefined && object.channel !== null ? _channel__WEBPACK_IMPORTED_MODULE_0__.Channel.fromPartial(object.channel) : undefined;\n        message.counterpartyVersion = object.counterpartyVersion ?? \"\";\n        message.proofInit = object.proofInit ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgChannelOpenTryResponse() {\n    return {};\n}\nconst MsgChannelOpenTryResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenTryResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgChannelOpenTryResponse();\n        return message;\n    }\n};\nfunction createBaseMsgChannelOpenAck() {\n    return {\n        portId: \"\",\n        channelId: \"\",\n        counterpartyChannelId: \"\",\n        counterpartyVersion: \"\",\n        proofTry: new Uint8Array(),\n        proofHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgChannelOpenAck = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.counterpartyChannelId !== \"\") {\n            writer.uint32(26).string(message.counterpartyChannelId);\n        }\n        if (message.counterpartyVersion !== \"\") {\n            writer.uint32(34).string(message.counterpartyVersion);\n        }\n        if (message.proofTry.length !== 0) {\n            writer.uint32(42).bytes(message.proofTry);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(58).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenAck();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.counterpartyChannelId = reader.string();\n                    break;\n                case 4:\n                    message.counterpartyVersion = reader.string();\n                    break;\n                case 5:\n                    message.proofTry = reader.bytes();\n                    break;\n                case 6:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgChannelOpenAck();\n        message.portId = object.portId ?? \"\";\n        message.channelId = object.channelId ?? \"\";\n        message.counterpartyChannelId = object.counterpartyChannelId ?? \"\";\n        message.counterpartyVersion = object.counterpartyVersion ?? \"\";\n        message.proofTry = object.proofTry ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgChannelOpenAckResponse() {\n    return {};\n}\nconst MsgChannelOpenAckResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenAckResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgChannelOpenAckResponse();\n        return message;\n    }\n};\nfunction createBaseMsgChannelOpenConfirm() {\n    return {\n        portId: \"\",\n        channelId: \"\",\n        proofAck: new Uint8Array(),\n        proofHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgChannelOpenConfirm = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.proofAck.length !== 0) {\n            writer.uint32(26).bytes(message.proofAck);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenConfirm();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.proofAck = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgChannelOpenConfirm();\n        message.portId = object.portId ?? \"\";\n        message.channelId = object.channelId ?? \"\";\n        message.proofAck = object.proofAck ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgChannelOpenConfirmResponse() {\n    return {};\n}\nconst MsgChannelOpenConfirmResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelOpenConfirmResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgChannelOpenConfirmResponse();\n        return message;\n    }\n};\nfunction createBaseMsgChannelCloseInit() {\n    return {\n        portId: \"\",\n        channelId: \"\",\n        signer: \"\"\n    };\n}\nconst MsgChannelCloseInit = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(26).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelCloseInit();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgChannelCloseInit();\n        message.portId = object.portId ?? \"\";\n        message.channelId = object.channelId ?? \"\";\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgChannelCloseInitResponse() {\n    return {};\n}\nconst MsgChannelCloseInitResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelCloseInitResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgChannelCloseInitResponse();\n        return message;\n    }\n};\nfunction createBaseMsgChannelCloseConfirm() {\n    return {\n        portId: \"\",\n        channelId: \"\",\n        proofInit: new Uint8Array(),\n        proofHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgChannelCloseConfirm = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.portId !== \"\") {\n            writer.uint32(10).string(message.portId);\n        }\n        if (message.channelId !== \"\") {\n            writer.uint32(18).string(message.channelId);\n        }\n        if (message.proofInit.length !== 0) {\n            writer.uint32(26).bytes(message.proofInit);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelCloseConfirm();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.portId = reader.string();\n                    break;\n                case 2:\n                    message.channelId = reader.string();\n                    break;\n                case 3:\n                    message.proofInit = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgChannelCloseConfirm();\n        message.portId = object.portId ?? \"\";\n        message.channelId = object.channelId ?? \"\";\n        message.proofInit = object.proofInit ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgChannelCloseConfirmResponse() {\n    return {};\n}\nconst MsgChannelCloseConfirmResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgChannelCloseConfirmResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgChannelCloseConfirmResponse();\n        return message;\n    }\n};\nfunction createBaseMsgRecvPacket() {\n    return {\n        packet: undefined,\n        proofCommitment: new Uint8Array(),\n        proofHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgRecvPacket = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.packet !== undefined) {\n            _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proofCommitment.length !== 0) {\n            writer.uint32(18).bytes(message.proofCommitment);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(34).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgRecvPacket();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.packet = _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proofCommitment = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgRecvPacket();\n        message.packet = object.packet !== undefined && object.packet !== null ? _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.fromPartial(object.packet) : undefined;\n        message.proofCommitment = object.proofCommitment ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgRecvPacketResponse() {\n    return {};\n}\nconst MsgRecvPacketResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgRecvPacketResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgRecvPacketResponse();\n        return message;\n    }\n};\nfunction createBaseMsgTimeout() {\n    return {\n        packet: undefined,\n        proofUnreceived: new Uint8Array(),\n        proofHeight: undefined,\n        nextSequenceRecv: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO,\n        signer: \"\"\n    };\n}\nconst MsgTimeout = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.packet !== undefined) {\n            _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proofUnreceived.length !== 0) {\n            writer.uint32(18).bytes(message.proofUnreceived);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        if (!message.nextSequenceRecv.isZero()) {\n            writer.uint32(32).uint64(message.nextSequenceRecv);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTimeout();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.packet = _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proofUnreceived = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.nextSequenceRecv = reader.uint64();\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgTimeout();\n        message.packet = object.packet !== undefined && object.packet !== null ? _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.fromPartial(object.packet) : undefined;\n        message.proofUnreceived = object.proofUnreceived ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.nextSequenceRecv) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgTimeoutResponse() {\n    return {};\n}\nconst MsgTimeoutResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTimeoutResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgTimeoutResponse();\n        return message;\n    }\n};\nfunction createBaseMsgTimeoutOnClose() {\n    return {\n        packet: undefined,\n        proofUnreceived: new Uint8Array(),\n        proofClose: new Uint8Array(),\n        proofHeight: undefined,\n        nextSequenceRecv: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO,\n        signer: \"\"\n    };\n}\nconst MsgTimeoutOnClose = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.packet !== undefined) {\n            _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.proofUnreceived.length !== 0) {\n            writer.uint32(18).bytes(message.proofUnreceived);\n        }\n        if (message.proofClose.length !== 0) {\n            writer.uint32(26).bytes(message.proofClose);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (!message.nextSequenceRecv.isZero()) {\n            writer.uint32(40).uint64(message.nextSequenceRecv);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(50).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTimeoutOnClose();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.packet = _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.proofUnreceived = reader.bytes();\n                    break;\n                case 3:\n                    message.proofClose = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.nextSequenceRecv = reader.uint64();\n                    break;\n                case 6:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgTimeoutOnClose();\n        message.packet = object.packet !== undefined && object.packet !== null ? _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.fromPartial(object.packet) : undefined;\n        message.proofUnreceived = object.proofUnreceived ?? new Uint8Array();\n        message.proofClose = object.proofClose ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.nextSequenceRecv = object.nextSequenceRecv !== undefined && object.nextSequenceRecv !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.nextSequenceRecv) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgTimeoutOnCloseResponse() {\n    return {};\n}\nconst MsgTimeoutOnCloseResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgTimeoutOnCloseResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgTimeoutOnCloseResponse();\n        return message;\n    }\n};\nfunction createBaseMsgAcknowledgement() {\n    return {\n        packet: undefined,\n        acknowledgement: new Uint8Array(),\n        proofAcked: new Uint8Array(),\n        proofHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgAcknowledgement = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.packet !== undefined) {\n            _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.encode(message.packet, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.acknowledgement.length !== 0) {\n            writer.uint32(18).bytes(message.acknowledgement);\n        }\n        if (message.proofAcked.length !== 0) {\n            writer.uint32(26).bytes(message.proofAcked);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.encode(message.proofHeight, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgAcknowledgement();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.packet = _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.acknowledgement = reader.bytes();\n                    break;\n                case 3:\n                    message.proofAcked = reader.bytes();\n                    break;\n                case 4:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgAcknowledgement();\n        message.packet = object.packet !== undefined && object.packet !== null ? _channel__WEBPACK_IMPORTED_MODULE_0__.Packet.fromPartial(object.packet) : undefined;\n        message.acknowledgement = object.acknowledgement ?? new Uint8Array();\n        message.proofAcked = object.proofAcked ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_1__.Height.fromPartial(object.proofHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgAcknowledgementResponse() {\n    return {};\n}\nconst MsgAcknowledgementResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgAcknowledgementResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgAcknowledgementResponse();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/channel/v1/tx.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/client/v1/client.ts":
/*!**************************************************!*\
  !*** ./src/codegen/ibc/core/client/v1/client.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientConsensusStates\": () => (/* binding */ ClientConsensusStates),\n/* harmony export */   \"ClientUpdateProposal\": () => (/* binding */ ClientUpdateProposal),\n/* harmony export */   \"ConsensusStateWithHeight\": () => (/* binding */ ConsensusStateWithHeight),\n/* harmony export */   \"Height\": () => (/* binding */ Height),\n/* harmony export */   \"IdentifiedClientState\": () => (/* binding */ IdentifiedClientState),\n/* harmony export */   \"Params\": () => (/* binding */ Params),\n/* harmony export */   \"UpgradeProposal\": () => (/* binding */ UpgradeProposal)\n/* harmony export */ });\n/* harmony import */ var _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../google/protobuf/any */ \"./src/codegen/google/protobuf/any.ts\");\n/* harmony import */ var _cosmos_upgrade_v1beta1_upgrade__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../cosmos/upgrade/v1beta1/upgrade */ \"./src/codegen/cosmos/upgrade/v1beta1/upgrade.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nfunction createBaseIdentifiedClientState() {\n    return {\n        clientId: \"\",\n        clientState: undefined\n    };\n}\nconst IdentifiedClientState = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.clientState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.clientState, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIdentifiedClientState();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.clientState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseIdentifiedClientState();\n        message.clientId = object.clientId ?? \"\";\n        message.clientState = object.clientState !== undefined && object.clientState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.clientState) : undefined;\n        return message;\n    }\n};\nfunction createBaseConsensusStateWithHeight() {\n    return {\n        height: undefined,\n        consensusState: undefined\n    };\n}\nconst ConsensusStateWithHeight = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.height !== undefined) {\n            Height.encode(message.height, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.consensusState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.consensusState, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConsensusStateWithHeight();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.height = Height.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.consensusState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseConsensusStateWithHeight();\n        message.height = object.height !== undefined && object.height !== null ? Height.fromPartial(object.height) : undefined;\n        message.consensusState = object.consensusState !== undefined && object.consensusState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.consensusState) : undefined;\n        return message;\n    }\n};\nfunction createBaseClientConsensusStates() {\n    return {\n        clientId: \"\",\n        consensusStates: []\n    };\n}\nconst ClientConsensusStates = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        for (const v of message.consensusStates){\n            ConsensusStateWithHeight.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientConsensusStates();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.consensusStates.push(ConsensusStateWithHeight.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseClientConsensusStates();\n        message.clientId = object.clientId ?? \"\";\n        message.consensusStates = object.consensusStates?.map((e)=>ConsensusStateWithHeight.fromPartial(e)) || [];\n        return message;\n    }\n};\nfunction createBaseClientUpdateProposal() {\n    return {\n        title: \"\",\n        description: \"\",\n        subjectClientId: \"\",\n        substituteClientId: \"\"\n    };\n}\nconst ClientUpdateProposal = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        if (message.subjectClientId !== \"\") {\n            writer.uint32(26).string(message.subjectClientId);\n        }\n        if (message.substituteClientId !== \"\") {\n            writer.uint32(34).string(message.substituteClientId);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientUpdateProposal();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.subjectClientId = reader.string();\n                    break;\n                case 4:\n                    message.substituteClientId = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseClientUpdateProposal();\n        message.title = object.title ?? \"\";\n        message.description = object.description ?? \"\";\n        message.subjectClientId = object.subjectClientId ?? \"\";\n        message.substituteClientId = object.substituteClientId ?? \"\";\n        return message;\n    }\n};\nfunction createBaseUpgradeProposal() {\n    return {\n        title: \"\",\n        description: \"\",\n        plan: undefined,\n        upgradedClientState: undefined\n    };\n}\nconst UpgradeProposal = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (message.title !== \"\") {\n            writer.uint32(10).string(message.title);\n        }\n        if (message.description !== \"\") {\n            writer.uint32(18).string(message.description);\n        }\n        if (message.plan !== undefined) {\n            _cosmos_upgrade_v1beta1_upgrade__WEBPACK_IMPORTED_MODULE_1__.Plan.encode(message.plan, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.upgradedClientState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.upgradedClientState, writer.uint32(34).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseUpgradeProposal();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.title = reader.string();\n                    break;\n                case 2:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.plan = _cosmos_upgrade_v1beta1_upgrade__WEBPACK_IMPORTED_MODULE_1__.Plan.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.upgradedClientState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseUpgradeProposal();\n        message.title = object.title ?? \"\";\n        message.description = object.description ?? \"\";\n        message.plan = object.plan !== undefined && object.plan !== null ? _cosmos_upgrade_v1beta1_upgrade__WEBPACK_IMPORTED_MODULE_1__.Plan.fromPartial(object.plan) : undefined;\n        message.upgradedClientState = object.upgradedClientState !== undefined && object.upgradedClientState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.upgradedClientState) : undefined;\n        return message;\n    }\n};\nfunction createBaseHeight() {\n    return {\n        revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO,\n        revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO\n    };\n}\nconst Height = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        if (!message.revisionNumber.isZero()) {\n            writer.uint32(8).uint64(message.revisionNumber);\n        }\n        if (!message.revisionHeight.isZero()) {\n            writer.uint32(16).uint64(message.revisionHeight);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseHeight();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.revisionNumber = reader.uint64();\n                    break;\n                case 2:\n                    message.revisionHeight = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseHeight();\n        message.revisionNumber = object.revisionNumber !== undefined && object.revisionNumber !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.revisionNumber) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        message.revisionHeight = object.revisionHeight !== undefined && object.revisionHeight !== null ? _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.fromValue(object.revisionHeight) : _helpers__WEBPACK_IMPORTED_MODULE_2__.Long.UZERO;\n        return message;\n    }\n};\nfunction createBaseParams() {\n    return {\n        allowedClients: []\n    };\n}\nconst Params = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Writer.create()) {\n        for (const v of message.allowedClients){\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_3__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.allowedClients.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseParams();\n        message.allowedClients = object.allowedClients?.map((e)=>e) || [];\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/client/v1/client.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/client/v1/tx.amino.ts":
/*!****************************************************!*\
  !*** ./src/codegen/ibc/core/client/v1/tx.amino.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AminoConverter\": () => (/* binding */ AminoConverter)\n/* harmony export */ });\nconst AminoConverter = {\n    \"/ibc.core.client.v1.MsgCreateClient\": {\n        aminoType: \"cosmos-sdk/MsgCreateClient\",\n        toAmino: ({ clientState , consensusState , signer  })=>{\n            return {\n                client_state: {\n                    type_url: clientState.typeUrl,\n                    value: clientState.value\n                },\n                consensus_state: {\n                    type_url: consensusState.typeUrl,\n                    value: consensusState.value\n                },\n                signer\n            };\n        },\n        fromAmino: ({ client_state , consensus_state , signer  })=>{\n            return {\n                clientState: {\n                    typeUrl: client_state.type_url,\n                    value: client_state.value\n                },\n                consensusState: {\n                    typeUrl: consensus_state.type_url,\n                    value: consensus_state.value\n                },\n                signer\n            };\n        }\n    },\n    \"/ibc.core.client.v1.MsgUpdateClient\": {\n        aminoType: \"cosmos-sdk/MsgUpdateClient\",\n        toAmino: ({ clientId , header , signer  })=>{\n            return {\n                client_id: clientId,\n                header: {\n                    type_url: header.typeUrl,\n                    value: header.value\n                },\n                signer\n            };\n        },\n        fromAmino: ({ client_id , header , signer  })=>{\n            return {\n                clientId: client_id,\n                header: {\n                    typeUrl: header.type_url,\n                    value: header.value\n                },\n                signer\n            };\n        }\n    },\n    \"/ibc.core.client.v1.MsgUpgradeClient\": {\n        aminoType: \"cosmos-sdk/MsgUpgradeClient\",\n        toAmino: ({ clientId , clientState , consensusState , proofUpgradeClient , proofUpgradeConsensusState , signer  })=>{\n            return {\n                client_id: clientId,\n                client_state: {\n                    type_url: clientState.typeUrl,\n                    value: clientState.value\n                },\n                consensus_state: {\n                    type_url: consensusState.typeUrl,\n                    value: consensusState.value\n                },\n                proof_upgrade_client: proofUpgradeClient,\n                proof_upgrade_consensus_state: proofUpgradeConsensusState,\n                signer\n            };\n        },\n        fromAmino: ({ client_id , client_state , consensus_state , proof_upgrade_client , proof_upgrade_consensus_state , signer  })=>{\n            return {\n                clientId: client_id,\n                clientState: {\n                    typeUrl: client_state.type_url,\n                    value: client_state.value\n                },\n                consensusState: {\n                    typeUrl: consensus_state.type_url,\n                    value: consensus_state.value\n                },\n                proofUpgradeClient: proof_upgrade_client,\n                proofUpgradeConsensusState: proof_upgrade_consensus_state,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.client.v1.MsgSubmitMisbehaviour\": {\n        aminoType: \"cosmos-sdk/MsgSubmitMisbehaviour\",\n        toAmino: ({ clientId , misbehaviour , signer  })=>{\n            return {\n                client_id: clientId,\n                misbehaviour: {\n                    type_url: misbehaviour.typeUrl,\n                    value: misbehaviour.value\n                },\n                signer\n            };\n        },\n        fromAmino: ({ client_id , misbehaviour , signer  })=>{\n            return {\n                clientId: client_id,\n                misbehaviour: {\n                    typeUrl: misbehaviour.type_url,\n                    value: misbehaviour.value\n                },\n                signer\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/client/v1/tx.amino.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/client/v1/tx.registry.ts":
/*!*******************************************************!*\
  !*** ./src/codegen/ibc/core/client/v1/tx.registry.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MessageComposer\": () => (/* binding */ MessageComposer),\n/* harmony export */   \"load\": () => (/* binding */ load),\n/* harmony export */   \"registry\": () => (/* binding */ registry)\n/* harmony export */ });\n/* harmony import */ var _tx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tx */ \"./src/codegen/ibc/core/client/v1/tx.ts\");\n\nconst registry = [\n    [\n        \"/ibc.core.client.v1.MsgCreateClient\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgCreateClient\n    ],\n    [\n        \"/ibc.core.client.v1.MsgUpdateClient\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpdateClient\n    ],\n    [\n        \"/ibc.core.client.v1.MsgUpgradeClient\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpgradeClient\n    ],\n    [\n        \"/ibc.core.client.v1.MsgSubmitMisbehaviour\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgSubmitMisbehaviour\n    ]\n];\nconst load = (protoRegistry)=>{\n    registry.forEach(([typeUrl, mod])=>{\n        protoRegistry.register(typeUrl, mod);\n    });\n};\nconst MessageComposer = {\n    encoded: {\n        createClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgCreateClient\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgCreateClient.encode(value).finish()\n            };\n        },\n        updateClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgUpdateClient\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpdateClient.encode(value).finish()\n            };\n        },\n        upgradeClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgUpgradeClient\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpgradeClient.encode(value).finish()\n            };\n        },\n        submitMisbehaviour (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgSubmitMisbehaviour\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgSubmitMisbehaviour.encode(value).finish()\n            };\n        }\n    },\n    withTypeUrl: {\n        createClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgCreateClient\",\n                value\n            };\n        },\n        updateClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgUpdateClient\",\n                value\n            };\n        },\n        upgradeClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgUpgradeClient\",\n                value\n            };\n        },\n        submitMisbehaviour (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgSubmitMisbehaviour\",\n                value\n            };\n        }\n    },\n    fromPartial: {\n        createClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgCreateClient\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgCreateClient.fromPartial(value)\n            };\n        },\n        updateClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgUpdateClient\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpdateClient.fromPartial(value)\n            };\n        },\n        upgradeClient (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgUpgradeClient\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgUpgradeClient.fromPartial(value)\n            };\n        },\n        submitMisbehaviour (value) {\n            return {\n                typeUrl: \"/ibc.core.client.v1.MsgSubmitMisbehaviour\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgSubmitMisbehaviour.fromPartial(value)\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29kZWdlbi9pYmMvY29yZS9jbGllbnQvdjEvdHgucmVnaXN0cnkudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNpRztBQUMxRixNQUFNSSxXQUFtRDtJQUFDO1FBQUM7UUFBdUNKLGdEQUFlQTtLQUFDO0lBQUU7UUFBQztRQUF1Q0MsZ0RBQWVBO0tBQUM7SUFBRTtRQUFDO1FBQXdDQyxpREFBZ0JBO0tBQUM7SUFBRTtRQUFDO1FBQTZDQyxzREFBcUJBO0tBQUM7Q0FBQyxDQUFDO0FBQ2hULE1BQU1FLE9BQU8sQ0FBQ0MsZ0JBQTRCO0lBQy9DRixTQUFTRyxPQUFPLENBQUMsQ0FBQyxDQUFDQyxTQUFTQyxJQUFJLEdBQUs7UUFDbkNILGNBQWNJLFFBQVEsQ0FBQ0YsU0FBU0M7SUFDbEM7QUFDRixFQUFFO0FBQ0ssTUFBTUUsa0JBQWtCO0lBQzdCQyxTQUFTO1FBQ1BDLGNBQWFDLEtBQXNCLEVBQUU7WUFDbkMsT0FBTztnQkFDTE4sU0FBUztnQkFDVE0sT0FBT2QsdURBQXNCLENBQUNjLE9BQU9FLE1BQU07WUFDN0M7UUFDRjtRQUNBQyxjQUFhSCxLQUFzQixFQUFFO1lBQ25DLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNLE9BQU9iLHVEQUFzQixDQUFDYSxPQUFPRSxNQUFNO1lBQzdDO1FBQ0Y7UUFDQUUsZUFBY0osS0FBdUIsRUFBRTtZQUNyQyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWix3REFBdUIsQ0FBQ1ksT0FBT0UsTUFBTTtZQUM5QztRQUNGO1FBQ0FHLG9CQUFtQkwsS0FBNEIsRUFBRTtZQUMvQyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWCw2REFBNEIsQ0FBQ1csT0FBT0UsTUFBTTtZQUNuRDtRQUNGO0lBQ0Y7SUFDQUksYUFBYTtRQUNYUCxjQUFhQyxLQUFzQixFQUFFO1lBQ25DLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNO1lBQ0Y7UUFDRjtRQUNBRyxjQUFhSCxLQUFzQixFQUFFO1lBQ25DLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNO1lBQ0Y7UUFDRjtRQUNBSSxlQUFjSixLQUF1QixFQUFFO1lBQ3JDLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNO1lBQ0Y7UUFDRjtRQUNBSyxvQkFBbUJMLEtBQTRCLEVBQUU7WUFDL0MsT0FBTztnQkFDTE4sU0FBUztnQkFDVE07WUFDRjtRQUNGO0lBQ0Y7SUFDQU8sYUFBYTtRQUNYUixjQUFhQyxLQUFzQixFQUFFO1lBQ25DLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNLE9BQU9kLDREQUEyQixDQUFDYztZQUNyQztRQUNGO1FBQ0FHLGNBQWFILEtBQXNCLEVBQUU7WUFDbkMsT0FBTztnQkFDTE4sU0FBUztnQkFDVE0sT0FBT2IsNERBQTJCLENBQUNhO1lBQ3JDO1FBQ0Y7UUFDQUksZUFBY0osS0FBdUIsRUFBRTtZQUNyQyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWiw2REFBNEIsQ0FBQ1k7WUFDdEM7UUFDRjtRQUNBSyxvQkFBbUJMLEtBQTRCLEVBQUU7WUFDL0MsT0FBTztnQkFDTE4sU0FBUztnQkFDVE0sT0FBT1gsa0VBQWlDLENBQUNXO1lBQzNDO1FBQ0Y7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL3NyYy9jb2RlZ2VuL2liYy9jb3JlL2NsaWVudC92MS90eC5yZWdpc3RyeS50cz8yYjc5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdlbmVyYXRlZFR5cGUsIFJlZ2lzdHJ5IH0gZnJvbSBcIkBjb3NtanMvcHJvdG8tc2lnbmluZ1wiO1xuaW1wb3J0IHsgTXNnQ3JlYXRlQ2xpZW50LCBNc2dVcGRhdGVDbGllbnQsIE1zZ1VwZ3JhZGVDbGllbnQsIE1zZ1N1Ym1pdE1pc2JlaGF2aW91ciB9IGZyb20gXCIuL3R4XCI7XG5leHBvcnQgY29uc3QgcmVnaXN0cnk6IFJlYWRvbmx5QXJyYXk8W3N0cmluZywgR2VuZXJhdGVkVHlwZV0+ID0gW1tcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnQ3JlYXRlQ2xpZW50XCIsIE1zZ0NyZWF0ZUNsaWVudF0sIFtcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnVXBkYXRlQ2xpZW50XCIsIE1zZ1VwZGF0ZUNsaWVudF0sIFtcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnVXBncmFkZUNsaWVudFwiLCBNc2dVcGdyYWRlQ2xpZW50XSwgW1wiL2liYy5jb3JlLmNsaWVudC52MS5Nc2dTdWJtaXRNaXNiZWhhdmlvdXJcIiwgTXNnU3VibWl0TWlzYmVoYXZpb3VyXV07XG5leHBvcnQgY29uc3QgbG9hZCA9IChwcm90b1JlZ2lzdHJ5OiBSZWdpc3RyeSkgPT4ge1xuICByZWdpc3RyeS5mb3JFYWNoKChbdHlwZVVybCwgbW9kXSkgPT4ge1xuICAgIHByb3RvUmVnaXN0cnkucmVnaXN0ZXIodHlwZVVybCwgbW9kKTtcbiAgfSk7XG59O1xuZXhwb3J0IGNvbnN0IE1lc3NhZ2VDb21wb3NlciA9IHtcbiAgZW5jb2RlZDoge1xuICAgIGNyZWF0ZUNsaWVudCh2YWx1ZTogTXNnQ3JlYXRlQ2xpZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnQ3JlYXRlQ2xpZW50XCIsXG4gICAgICAgIHZhbHVlOiBNc2dDcmVhdGVDbGllbnQuZW5jb2RlKHZhbHVlKS5maW5pc2goKVxuICAgICAgfTtcbiAgICB9LFxuICAgIHVwZGF0ZUNsaWVudCh2YWx1ZTogTXNnVXBkYXRlQ2xpZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnVXBkYXRlQ2xpZW50XCIsXG4gICAgICAgIHZhbHVlOiBNc2dVcGRhdGVDbGllbnQuZW5jb2RlKHZhbHVlKS5maW5pc2goKVxuICAgICAgfTtcbiAgICB9LFxuICAgIHVwZ3JhZGVDbGllbnQodmFsdWU6IE1zZ1VwZ3JhZGVDbGllbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVVcmw6IFwiL2liYy5jb3JlLmNsaWVudC52MS5Nc2dVcGdyYWRlQ2xpZW50XCIsXG4gICAgICAgIHZhbHVlOiBNc2dVcGdyYWRlQ2xpZW50LmVuY29kZSh2YWx1ZSkuZmluaXNoKClcbiAgICAgIH07XG4gICAgfSxcbiAgICBzdWJtaXRNaXNiZWhhdmlvdXIodmFsdWU6IE1zZ1N1Ym1pdE1pc2JlaGF2aW91cikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmNvcmUuY2xpZW50LnYxLk1zZ1N1Ym1pdE1pc2JlaGF2aW91clwiLFxuICAgICAgICB2YWx1ZTogTXNnU3VibWl0TWlzYmVoYXZpb3VyLmVuY29kZSh2YWx1ZSkuZmluaXNoKClcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICB3aXRoVHlwZVVybDoge1xuICAgIGNyZWF0ZUNsaWVudCh2YWx1ZTogTXNnQ3JlYXRlQ2xpZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnQ3JlYXRlQ2xpZW50XCIsXG4gICAgICAgIHZhbHVlXG4gICAgICB9O1xuICAgIH0sXG4gICAgdXBkYXRlQ2xpZW50KHZhbHVlOiBNc2dVcGRhdGVDbGllbnQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVVcmw6IFwiL2liYy5jb3JlLmNsaWVudC52MS5Nc2dVcGRhdGVDbGllbnRcIixcbiAgICAgICAgdmFsdWVcbiAgICAgIH07XG4gICAgfSxcbiAgICB1cGdyYWRlQ2xpZW50KHZhbHVlOiBNc2dVcGdyYWRlQ2xpZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnVXBncmFkZUNsaWVudFwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIHN1Ym1pdE1pc2JlaGF2aW91cih2YWx1ZTogTXNnU3VibWl0TWlzYmVoYXZpb3VyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnU3VibWl0TWlzYmVoYXZpb3VyXCIsXG4gICAgICAgIHZhbHVlXG4gICAgICB9O1xuICAgIH1cbiAgfSxcbiAgZnJvbVBhcnRpYWw6IHtcbiAgICBjcmVhdGVDbGllbnQodmFsdWU6IE1zZ0NyZWF0ZUNsaWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmNvcmUuY2xpZW50LnYxLk1zZ0NyZWF0ZUNsaWVudFwiLFxuICAgICAgICB2YWx1ZTogTXNnQ3JlYXRlQ2xpZW50LmZyb21QYXJ0aWFsKHZhbHVlKVxuICAgICAgfTtcbiAgICB9LFxuICAgIHVwZGF0ZUNsaWVudCh2YWx1ZTogTXNnVXBkYXRlQ2xpZW50KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jbGllbnQudjEuTXNnVXBkYXRlQ2xpZW50XCIsXG4gICAgICAgIHZhbHVlOiBNc2dVcGRhdGVDbGllbnQuZnJvbVBhcnRpYWwodmFsdWUpXG4gICAgICB9O1xuICAgIH0sXG4gICAgdXBncmFkZUNsaWVudCh2YWx1ZTogTXNnVXBncmFkZUNsaWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmNvcmUuY2xpZW50LnYxLk1zZ1VwZ3JhZGVDbGllbnRcIixcbiAgICAgICAgdmFsdWU6IE1zZ1VwZ3JhZGVDbGllbnQuZnJvbVBhcnRpYWwodmFsdWUpXG4gICAgICB9O1xuICAgIH0sXG4gICAgc3VibWl0TWlzYmVoYXZpb3VyKHZhbHVlOiBNc2dTdWJtaXRNaXNiZWhhdmlvdXIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVVcmw6IFwiL2liYy5jb3JlLmNsaWVudC52MS5Nc2dTdWJtaXRNaXNiZWhhdmlvdXJcIixcbiAgICAgICAgdmFsdWU6IE1zZ1N1Ym1pdE1pc2JlaGF2aW91ci5mcm9tUGFydGlhbCh2YWx1ZSlcbiAgICAgIH07XG4gICAgfVxuICB9XG59OyJdLCJuYW1lcyI6WyJNc2dDcmVhdGVDbGllbnQiLCJNc2dVcGRhdGVDbGllbnQiLCJNc2dVcGdyYWRlQ2xpZW50IiwiTXNnU3VibWl0TWlzYmVoYXZpb3VyIiwicmVnaXN0cnkiLCJsb2FkIiwicHJvdG9SZWdpc3RyeSIsImZvckVhY2giLCJ0eXBlVXJsIiwibW9kIiwicmVnaXN0ZXIiLCJNZXNzYWdlQ29tcG9zZXIiLCJlbmNvZGVkIiwiY3JlYXRlQ2xpZW50IiwidmFsdWUiLCJlbmNvZGUiLCJmaW5pc2giLCJ1cGRhdGVDbGllbnQiLCJ1cGdyYWRlQ2xpZW50Iiwic3VibWl0TWlzYmVoYXZpb3VyIiwid2l0aFR5cGVVcmwiLCJmcm9tUGFydGlhbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/client/v1/tx.registry.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/client/v1/tx.ts":
/*!**********************************************!*\
  !*** ./src/codegen/ibc/core/client/v1/tx.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MsgCreateClient\": () => (/* binding */ MsgCreateClient),\n/* harmony export */   \"MsgCreateClientResponse\": () => (/* binding */ MsgCreateClientResponse),\n/* harmony export */   \"MsgSubmitMisbehaviour\": () => (/* binding */ MsgSubmitMisbehaviour),\n/* harmony export */   \"MsgSubmitMisbehaviourResponse\": () => (/* binding */ MsgSubmitMisbehaviourResponse),\n/* harmony export */   \"MsgUpdateClient\": () => (/* binding */ MsgUpdateClient),\n/* harmony export */   \"MsgUpdateClientResponse\": () => (/* binding */ MsgUpdateClientResponse),\n/* harmony export */   \"MsgUpgradeClient\": () => (/* binding */ MsgUpgradeClient),\n/* harmony export */   \"MsgUpgradeClientResponse\": () => (/* binding */ MsgUpgradeClientResponse)\n/* harmony export */ });\n/* harmony import */ var _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../google/protobuf/any */ \"./src/codegen/google/protobuf/any.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction createBaseMsgCreateClient() {\n    return {\n        clientState: undefined,\n        consensusState: undefined,\n        signer: \"\"\n    };\n}\nconst MsgCreateClient = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.clientState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.clientState, writer.uint32(10).fork()).ldelim();\n        }\n        if (message.consensusState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.consensusState, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(26).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgCreateClient();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.consensusState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgCreateClient();\n        message.clientState = object.clientState !== undefined && object.clientState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.clientState) : undefined;\n        message.consensusState = object.consensusState !== undefined && object.consensusState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.consensusState) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgCreateClientResponse() {\n    return {};\n}\nconst MsgCreateClientResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgCreateClientResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgCreateClientResponse();\n        return message;\n    }\n};\nfunction createBaseMsgUpdateClient() {\n    return {\n        clientId: \"\",\n        header: undefined,\n        signer: \"\"\n    };\n}\nconst MsgUpdateClient = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.header !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.header, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(26).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateClient();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.header = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgUpdateClient();\n        message.clientId = object.clientId ?? \"\";\n        message.header = object.header !== undefined && object.header !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.header) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgUpdateClientResponse() {\n    return {};\n}\nconst MsgUpdateClientResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpdateClientResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgUpdateClientResponse();\n        return message;\n    }\n};\nfunction createBaseMsgUpgradeClient() {\n    return {\n        clientId: \"\",\n        clientState: undefined,\n        consensusState: undefined,\n        proofUpgradeClient: new Uint8Array(),\n        proofUpgradeConsensusState: new Uint8Array(),\n        signer: \"\"\n    };\n}\nconst MsgUpgradeClient = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.clientState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.clientState, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.consensusState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.consensusState, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.proofUpgradeClient.length !== 0) {\n            writer.uint32(34).bytes(message.proofUpgradeClient);\n        }\n        if (message.proofUpgradeConsensusState.length !== 0) {\n            writer.uint32(42).bytes(message.proofUpgradeConsensusState);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(50).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpgradeClient();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.clientState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.consensusState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.proofUpgradeClient = reader.bytes();\n                    break;\n                case 5:\n                    message.proofUpgradeConsensusState = reader.bytes();\n                    break;\n                case 6:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgUpgradeClient();\n        message.clientId = object.clientId ?? \"\";\n        message.clientState = object.clientState !== undefined && object.clientState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.clientState) : undefined;\n        message.consensusState = object.consensusState !== undefined && object.consensusState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.consensusState) : undefined;\n        message.proofUpgradeClient = object.proofUpgradeClient ?? new Uint8Array();\n        message.proofUpgradeConsensusState = object.proofUpgradeConsensusState ?? new Uint8Array();\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgUpgradeClientResponse() {\n    return {};\n}\nconst MsgUpgradeClientResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgUpgradeClientResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgUpgradeClientResponse();\n        return message;\n    }\n};\nfunction createBaseMsgSubmitMisbehaviour() {\n    return {\n        clientId: \"\",\n        misbehaviour: undefined,\n        signer: \"\"\n    };\n}\nconst MsgSubmitMisbehaviour = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.misbehaviour !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.encode(message.misbehaviour, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(26).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSubmitMisbehaviour();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.misbehaviour = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgSubmitMisbehaviour();\n        message.clientId = object.clientId ?? \"\";\n        message.misbehaviour = object.misbehaviour !== undefined && object.misbehaviour !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_0__.Any.fromPartial(object.misbehaviour) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgSubmitMisbehaviourResponse() {\n    return {};\n}\nconst MsgSubmitMisbehaviourResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgSubmitMisbehaviourResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgSubmitMisbehaviourResponse();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/client/v1/tx.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/commitment/v1/commitment.ts":
/*!**********************************************************!*\
  !*** ./src/codegen/ibc/core/commitment/v1/commitment.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MerklePath\": () => (/* binding */ MerklePath),\n/* harmony export */   \"MerklePrefix\": () => (/* binding */ MerklePrefix),\n/* harmony export */   \"MerkleProof\": () => (/* binding */ MerkleProof),\n/* harmony export */   \"MerkleRoot\": () => (/* binding */ MerkleRoot)\n/* harmony export */ });\n/* harmony import */ var _confio_proofs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../confio/proofs */ \"./src/codegen/confio/proofs.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__);\n\n\nfunction createBaseMerkleRoot() {\n    return {\n        hash: new Uint8Array()\n    };\n}\nconst MerkleRoot = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.hash.length !== 0) {\n            writer.uint32(10).bytes(message.hash);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMerkleRoot();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.hash = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMerkleRoot();\n        message.hash = object.hash ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMerklePrefix() {\n    return {\n        keyPrefix: new Uint8Array()\n    };\n}\nconst MerklePrefix = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        if (message.keyPrefix.length !== 0) {\n            writer.uint32(10).bytes(message.keyPrefix);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMerklePrefix();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.keyPrefix = reader.bytes();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMerklePrefix();\n        message.keyPrefix = object.keyPrefix ?? new Uint8Array();\n        return message;\n    }\n};\nfunction createBaseMerklePath() {\n    return {\n        keyPath: []\n    };\n}\nconst MerklePath = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.keyPath){\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMerklePath();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.keyPath.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMerklePath();\n        message.keyPath = object.keyPath?.map((e)=>e) || [];\n        return message;\n    }\n};\nfunction createBaseMerkleProof() {\n    return {\n        proofs: []\n    };\n}\nconst MerkleProof = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Writer.create()) {\n        for (const v of message.proofs){\n            _confio_proofs__WEBPACK_IMPORTED_MODULE_0__.CommitmentProof.encode(v, writer.uint32(10).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_1__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMerkleProof();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.proofs.push(_confio_proofs__WEBPACK_IMPORTED_MODULE_0__.CommitmentProof.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMerkleProof();\n        message.proofs = object.proofs?.map((e)=>_confio_proofs__WEBPACK_IMPORTED_MODULE_0__.CommitmentProof.fromPartial(e)) || [];\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/commitment/v1/commitment.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/connection/v1/connection.ts":
/*!**********************************************************!*\
  !*** ./src/codegen/ibc/core/connection/v1/connection.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ClientPaths\": () => (/* binding */ ClientPaths),\n/* harmony export */   \"ConnectionEnd\": () => (/* binding */ ConnectionEnd),\n/* harmony export */   \"ConnectionPaths\": () => (/* binding */ ConnectionPaths),\n/* harmony export */   \"Counterparty\": () => (/* binding */ Counterparty),\n/* harmony export */   \"IdentifiedConnection\": () => (/* binding */ IdentifiedConnection),\n/* harmony export */   \"Params\": () => (/* binding */ Params),\n/* harmony export */   \"State\": () => (/* binding */ State),\n/* harmony export */   \"StateSDKType\": () => (/* binding */ StateSDKType),\n/* harmony export */   \"Version\": () => (/* binding */ Version),\n/* harmony export */   \"stateFromJSON\": () => (/* binding */ stateFromJSON),\n/* harmony export */   \"stateToJSON\": () => (/* binding */ stateToJSON)\n/* harmony export */ });\n/* harmony import */ var _commitment_v1_commitment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../commitment/v1/commitment */ \"./src/codegen/ibc/core/commitment/v1/commitment.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nvar State;\n(function(State) {\n    State[State[/** STATE_UNINITIALIZED_UNSPECIFIED - Default State */ \"STATE_UNINITIALIZED_UNSPECIFIED\"] = 0] = \"STATE_UNINITIALIZED_UNSPECIFIED\";\n    State[State[/** STATE_INIT - A connection end has just started the opening handshake. */ \"STATE_INIT\"] = 1] = \"STATE_INIT\";\n    State[State[/**\n   * STATE_TRYOPEN - A connection end has acknowledged the handshake step on the counterparty\n   * chain.\n   */ \"STATE_TRYOPEN\"] = 2] = \"STATE_TRYOPEN\";\n    State[State[/** STATE_OPEN - A connection end has completed the handshake. */ \"STATE_OPEN\"] = 3] = \"STATE_OPEN\";\n    State[State[\"UNRECOGNIZED\"] = -1] = \"UNRECOGNIZED\";\n})(State || (State = {}));\nconst StateSDKType = State;\nfunction stateFromJSON(object) {\n    switch(object){\n        case 0:\n        case \"STATE_UNINITIALIZED_UNSPECIFIED\":\n            return State.STATE_UNINITIALIZED_UNSPECIFIED;\n        case 1:\n        case \"STATE_INIT\":\n            return State.STATE_INIT;\n        case 2:\n        case \"STATE_TRYOPEN\":\n            return State.STATE_TRYOPEN;\n        case 3:\n        case \"STATE_OPEN\":\n            return State.STATE_OPEN;\n        case -1:\n        case \"UNRECOGNIZED\":\n        default:\n            return State.UNRECOGNIZED;\n    }\n}\nfunction stateToJSON(object) {\n    switch(object){\n        case State.STATE_UNINITIALIZED_UNSPECIFIED:\n            return \"STATE_UNINITIALIZED_UNSPECIFIED\";\n        case State.STATE_INIT:\n            return \"STATE_INIT\";\n        case State.STATE_TRYOPEN:\n            return \"STATE_TRYOPEN\";\n        case State.STATE_OPEN:\n            return \"STATE_OPEN\";\n        case State.UNRECOGNIZED:\n        default:\n            return \"UNRECOGNIZED\";\n    }\n}\nfunction createBaseConnectionEnd() {\n    return {\n        clientId: \"\",\n        versions: [],\n        state: 0,\n        counterparty: undefined,\n        delayPeriod: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO\n    };\n}\nconst ConnectionEnd = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        for (const v of message.versions){\n            Version.encode(v, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.state !== 0) {\n            writer.uint32(24).int32(message.state);\n        }\n        if (message.counterparty !== undefined) {\n            Counterparty.encode(message.counterparty, writer.uint32(34).fork()).ldelim();\n        }\n        if (!message.delayPeriod.isZero()) {\n            writer.uint32(40).uint64(message.delayPeriod);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConnectionEnd();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.versions.push(Version.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.state = reader.int32();\n                    break;\n                case 4:\n                    message.counterparty = Counterparty.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.delayPeriod = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseConnectionEnd();\n        message.clientId = object.clientId ?? \"\";\n        message.versions = object.versions?.map((e)=>Version.fromPartial(e)) || [];\n        message.state = object.state ?? 0;\n        message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? Counterparty.fromPartial(object.counterparty) : undefined;\n        message.delayPeriod = object.delayPeriod !== undefined && object.delayPeriod !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.delayPeriod) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        return message;\n    }\n};\nfunction createBaseIdentifiedConnection() {\n    return {\n        id: \"\",\n        clientId: \"\",\n        versions: [],\n        state: 0,\n        counterparty: undefined,\n        delayPeriod: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO\n    };\n}\nconst IdentifiedConnection = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.id !== \"\") {\n            writer.uint32(10).string(message.id);\n        }\n        if (message.clientId !== \"\") {\n            writer.uint32(18).string(message.clientId);\n        }\n        for (const v of message.versions){\n            Version.encode(v, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.state !== 0) {\n            writer.uint32(32).int32(message.state);\n        }\n        if (message.counterparty !== undefined) {\n            Counterparty.encode(message.counterparty, writer.uint32(42).fork()).ldelim();\n        }\n        if (!message.delayPeriod.isZero()) {\n            writer.uint32(48).uint64(message.delayPeriod);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseIdentifiedConnection();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.clientId = reader.string();\n                    break;\n                case 3:\n                    message.versions.push(Version.decode(reader, reader.uint32()));\n                    break;\n                case 4:\n                    message.state = reader.int32();\n                    break;\n                case 5:\n                    message.counterparty = Counterparty.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.delayPeriod = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseIdentifiedConnection();\n        message.id = object.id ?? \"\";\n        message.clientId = object.clientId ?? \"\";\n        message.versions = object.versions?.map((e)=>Version.fromPartial(e)) || [];\n        message.state = object.state ?? 0;\n        message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? Counterparty.fromPartial(object.counterparty) : undefined;\n        message.delayPeriod = object.delayPeriod !== undefined && object.delayPeriod !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.delayPeriod) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        return message;\n    }\n};\nfunction createBaseCounterparty() {\n    return {\n        clientId: \"\",\n        connectionId: \"\",\n        prefix: undefined\n    };\n}\nconst Counterparty = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.connectionId !== \"\") {\n            writer.uint32(18).string(message.connectionId);\n        }\n        if (message.prefix !== undefined) {\n            _commitment_v1_commitment__WEBPACK_IMPORTED_MODULE_0__.MerklePrefix.encode(message.prefix, writer.uint32(26).fork()).ldelim();\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseCounterparty();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.connectionId = reader.string();\n                    break;\n                case 3:\n                    message.prefix = _commitment_v1_commitment__WEBPACK_IMPORTED_MODULE_0__.MerklePrefix.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseCounterparty();\n        message.clientId = object.clientId ?? \"\";\n        message.connectionId = object.connectionId ?? \"\";\n        message.prefix = object.prefix !== undefined && object.prefix !== null ? _commitment_v1_commitment__WEBPACK_IMPORTED_MODULE_0__.MerklePrefix.fromPartial(object.prefix) : undefined;\n        return message;\n    }\n};\nfunction createBaseClientPaths() {\n    return {\n        paths: []\n    };\n}\nconst ClientPaths = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        for (const v of message.paths){\n            writer.uint32(10).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseClientPaths();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.paths.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseClientPaths();\n        message.paths = object.paths?.map((e)=>e) || [];\n        return message;\n    }\n};\nfunction createBaseConnectionPaths() {\n    return {\n        clientId: \"\",\n        paths: []\n    };\n}\nconst ConnectionPaths = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        for (const v of message.paths){\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseConnectionPaths();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.paths.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseConnectionPaths();\n        message.clientId = object.clientId ?? \"\";\n        message.paths = object.paths?.map((e)=>e) || [];\n        return message;\n    }\n};\nfunction createBaseVersion() {\n    return {\n        identifier: \"\",\n        features: []\n    };\n}\nconst Version = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (message.identifier !== \"\") {\n            writer.uint32(10).string(message.identifier);\n        }\n        for (const v of message.features){\n            writer.uint32(18).string(v);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseVersion();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.identifier = reader.string();\n                    break;\n                case 2:\n                    message.features.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseVersion();\n        message.identifier = object.identifier ?? \"\";\n        message.features = object.features?.map((e)=>e) || [];\n        return message;\n    }\n};\nfunction createBaseParams() {\n    return {\n        maxExpectedTimePerBlock: _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO\n    };\n}\nconst Params = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Writer.create()) {\n        if (!message.maxExpectedTimePerBlock.isZero()) {\n            writer.uint32(8).uint64(message.maxExpectedTimePerBlock);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_2__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseParams();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.maxExpectedTimePerBlock = reader.uint64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseParams();\n        message.maxExpectedTimePerBlock = object.maxExpectedTimePerBlock !== undefined && object.maxExpectedTimePerBlock !== null ? _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.fromValue(object.maxExpectedTimePerBlock) : _helpers__WEBPACK_IMPORTED_MODULE_1__.Long.UZERO;\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/connection/v1/connection.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/connection/v1/tx.amino.ts":
/*!********************************************************!*\
  !*** ./src/codegen/ibc/core/connection/v1/tx.amino.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AminoConverter\": () => (/* binding */ AminoConverter)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n\nconst AminoConverter = {\n    \"/ibc.core.connection.v1.MsgConnectionOpenInit\": {\n        aminoType: \"cosmos-sdk/MsgConnectionOpenInit\",\n        toAmino: ({ clientId , counterparty , version , delayPeriod , signer  })=>{\n            return {\n                client_id: clientId,\n                counterparty: {\n                    client_id: counterparty.clientId,\n                    connection_id: counterparty.connectionId,\n                    prefix: {\n                        key_prefix: counterparty.prefix.keyPrefix\n                    }\n                },\n                version: {\n                    identifier: version.identifier,\n                    features: version.features\n                },\n                delay_period: delayPeriod.toString(),\n                signer\n            };\n        },\n        fromAmino: ({ client_id , counterparty , version , delay_period , signer  })=>{\n            return {\n                clientId: client_id,\n                counterparty: {\n                    clientId: counterparty.client_id,\n                    connectionId: counterparty.connection_id,\n                    prefix: {\n                        keyPrefix: counterparty.prefix.key_prefix\n                    }\n                },\n                version: {\n                    identifier: version.identifier,\n                    features: version.features\n                },\n                delayPeriod: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(delay_period),\n                signer\n            };\n        }\n    },\n    \"/ibc.core.connection.v1.MsgConnectionOpenTry\": {\n        aminoType: \"cosmos-sdk/MsgConnectionOpenTry\",\n        toAmino: ({ clientId , previousConnectionId , clientState , counterparty , delayPeriod , counterpartyVersions , proofHeight , proofInit , proofClient , proofConsensus , consensusHeight , signer  })=>{\n            return {\n                client_id: clientId,\n                previous_connection_id: previousConnectionId,\n                client_state: {\n                    type_url: clientState.typeUrl,\n                    value: clientState.value\n                },\n                counterparty: {\n                    client_id: counterparty.clientId,\n                    connection_id: counterparty.connectionId,\n                    prefix: {\n                        key_prefix: counterparty.prefix.keyPrefix\n                    }\n                },\n                delay_period: delayPeriod.toString(),\n                counterparty_versions: counterpartyVersions.map((el0)=>({\n                        identifier: el0.identifier,\n                        features: el0.features\n                    })),\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                proof_init: proofInit,\n                proof_client: proofClient,\n                proof_consensus: proofConsensus,\n                consensus_height: consensusHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(consensusHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(consensusHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ client_id , previous_connection_id , client_state , counterparty , delay_period , counterparty_versions , proof_height , proof_init , proof_client , proof_consensus , consensus_height , signer  })=>{\n            return {\n                clientId: client_id,\n                previousConnectionId: previous_connection_id,\n                clientState: {\n                    typeUrl: client_state.type_url,\n                    value: client_state.value\n                },\n                counterparty: {\n                    clientId: counterparty.client_id,\n                    connectionId: counterparty.connection_id,\n                    prefix: {\n                        keyPrefix: counterparty.prefix.key_prefix\n                    }\n                },\n                delayPeriod: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(delay_period),\n                counterpartyVersions: counterparty_versions.map((el0)=>({\n                        identifier: el0.identifier,\n                        features: el0.features\n                    })),\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                proofInit: proof_init,\n                proofClient: proof_client,\n                proofConsensus: proof_consensus,\n                consensusHeight: consensus_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(consensus_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(consensus_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.connection.v1.MsgConnectionOpenAck\": {\n        aminoType: \"cosmos-sdk/MsgConnectionOpenAck\",\n        toAmino: ({ connectionId , counterpartyConnectionId , version , clientState , proofHeight , proofTry , proofClient , proofConsensus , consensusHeight , signer  })=>{\n            return {\n                connection_id: connectionId,\n                counterparty_connection_id: counterpartyConnectionId,\n                version: {\n                    identifier: version.identifier,\n                    features: version.features\n                },\n                client_state: {\n                    type_url: clientState.typeUrl,\n                    value: clientState.value\n                },\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                proof_try: proofTry,\n                proof_client: proofClient,\n                proof_consensus: proofConsensus,\n                consensus_height: consensusHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(consensusHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(consensusHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ connection_id , counterparty_connection_id , version , client_state , proof_height , proof_try , proof_client , proof_consensus , consensus_height , signer  })=>{\n            return {\n                connectionId: connection_id,\n                counterpartyConnectionId: counterparty_connection_id,\n                version: {\n                    identifier: version.identifier,\n                    features: version.features\n                },\n                clientState: {\n                    typeUrl: client_state.type_url,\n                    value: client_state.value\n                },\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                proofTry: proof_try,\n                proofClient: proof_client,\n                proofConsensus: proof_consensus,\n                consensusHeight: consensus_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(consensus_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(consensus_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    },\n    \"/ibc.core.connection.v1.MsgConnectionOpenConfirm\": {\n        aminoType: \"cosmos-sdk/MsgConnectionOpenConfirm\",\n        toAmino: ({ connectionId , proofAck , proofHeight , signer  })=>{\n            return {\n                connection_id: connectionId,\n                proof_ack: proofAck,\n                proof_height: proofHeight ? {\n                    revision_height: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(proofHeight.revisionHeight)?.toString(),\n                    revision_number: (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.omitDefault)(proofHeight.revisionNumber)?.toString()\n                } : {},\n                signer\n            };\n        },\n        fromAmino: ({ connection_id , proof_ack , proof_height , signer  })=>{\n            return {\n                connectionId: connection_id,\n                proofAck: proof_ack,\n                proofHeight: proof_height ? {\n                    revisionHeight: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(proof_height.revision_height || \"0\", true),\n                    revisionNumber: _helpers__WEBPACK_IMPORTED_MODULE_0__.Long.fromString(proof_height.revision_number || \"0\", true)\n                } : undefined,\n                signer\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/connection/v1/tx.amino.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/connection/v1/tx.registry.ts":
/*!***********************************************************!*\
  !*** ./src/codegen/ibc/core/connection/v1/tx.registry.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MessageComposer\": () => (/* binding */ MessageComposer),\n/* harmony export */   \"load\": () => (/* binding */ load),\n/* harmony export */   \"registry\": () => (/* binding */ registry)\n/* harmony export */ });\n/* harmony import */ var _tx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tx */ \"./src/codegen/ibc/core/connection/v1/tx.ts\");\n\nconst registry = [\n    [\n        \"/ibc.core.connection.v1.MsgConnectionOpenInit\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenInit\n    ],\n    [\n        \"/ibc.core.connection.v1.MsgConnectionOpenTry\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenTry\n    ],\n    [\n        \"/ibc.core.connection.v1.MsgConnectionOpenAck\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenAck\n    ],\n    [\n        \"/ibc.core.connection.v1.MsgConnectionOpenConfirm\",\n        _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenConfirm\n    ]\n];\nconst load = (protoRegistry)=>{\n    registry.forEach(([typeUrl, mod])=>{\n        protoRegistry.register(typeUrl, mod);\n    });\n};\nconst MessageComposer = {\n    encoded: {\n        connectionOpenInit (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenInit\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenInit.encode(value).finish()\n            };\n        },\n        connectionOpenTry (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenTry\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenTry.encode(value).finish()\n            };\n        },\n        connectionOpenAck (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenAck\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenAck.encode(value).finish()\n            };\n        },\n        connectionOpenConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenConfirm\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenConfirm.encode(value).finish()\n            };\n        }\n    },\n    withTypeUrl: {\n        connectionOpenInit (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenInit\",\n                value\n            };\n        },\n        connectionOpenTry (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenTry\",\n                value\n            };\n        },\n        connectionOpenAck (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenAck\",\n                value\n            };\n        },\n        connectionOpenConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenConfirm\",\n                value\n            };\n        }\n    },\n    fromPartial: {\n        connectionOpenInit (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenInit\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenInit.fromPartial(value)\n            };\n        },\n        connectionOpenTry (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenTry\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenTry.fromPartial(value)\n            };\n        },\n        connectionOpenAck (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenAck\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenAck.fromPartial(value)\n            };\n        },\n        connectionOpenConfirm (value) {\n            return {\n                typeUrl: \"/ibc.core.connection.v1.MsgConnectionOpenConfirm\",\n                value: _tx__WEBPACK_IMPORTED_MODULE_0__.MsgConnectionOpenConfirm.fromPartial(value)\n            };\n        }\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29kZWdlbi9pYmMvY29yZS9jb25uZWN0aW9uL3YxL3R4LnJlZ2lzdHJ5LnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFDbUg7QUFDNUcsTUFBTUksV0FBbUQ7SUFBQztRQUFDO1FBQWlESixzREFBcUJBO0tBQUM7SUFBRTtRQUFDO1FBQWdEQyxxREFBb0JBO0tBQUM7SUFBRTtRQUFDO1FBQWdEQyxxREFBb0JBO0tBQUM7SUFBRTtRQUFDO1FBQW9EQyx5REFBd0JBO0tBQUM7Q0FBQyxDQUFDO0FBQ3BXLE1BQU1FLE9BQU8sQ0FBQ0MsZ0JBQTRCO0lBQy9DRixTQUFTRyxPQUFPLENBQUMsQ0FBQyxDQUFDQyxTQUFTQyxJQUFJLEdBQUs7UUFDbkNILGNBQWNJLFFBQVEsQ0FBQ0YsU0FBU0M7SUFDbEM7QUFDRixFQUFFO0FBQ0ssTUFBTUUsa0JBQWtCO0lBQzdCQyxTQUFTO1FBQ1BDLG9CQUFtQkMsS0FBNEIsRUFBRTtZQUMvQyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPZCw2REFBNEIsQ0FBQ2MsT0FBT0UsTUFBTTtZQUNuRDtRQUNGO1FBQ0FDLG1CQUFrQkgsS0FBMkIsRUFBRTtZQUM3QyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPYiw0REFBMkIsQ0FBQ2EsT0FBT0UsTUFBTTtZQUNsRDtRQUNGO1FBQ0FFLG1CQUFrQkosS0FBMkIsRUFBRTtZQUM3QyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWiw0REFBMkIsQ0FBQ1ksT0FBT0UsTUFBTTtZQUNsRDtRQUNGO1FBQ0FHLHVCQUFzQkwsS0FBK0IsRUFBRTtZQUNyRCxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWCxnRUFBK0IsQ0FBQ1csT0FBT0UsTUFBTTtZQUN0RDtRQUNGO0lBQ0Y7SUFDQUksYUFBYTtRQUNYUCxvQkFBbUJDLEtBQTRCLEVBQUU7WUFDL0MsT0FBTztnQkFDTE4sU0FBUztnQkFDVE07WUFDRjtRQUNGO1FBQ0FHLG1CQUFrQkgsS0FBMkIsRUFBRTtZQUM3QyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTTtZQUNGO1FBQ0Y7UUFDQUksbUJBQWtCSixLQUEyQixFQUFFO1lBQzdDLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNO1lBQ0Y7UUFDRjtRQUNBSyx1QkFBc0JMLEtBQStCLEVBQUU7WUFDckQsT0FBTztnQkFDTE4sU0FBUztnQkFDVE07WUFDRjtRQUNGO0lBQ0Y7SUFDQU8sYUFBYTtRQUNYUixvQkFBbUJDLEtBQTRCLEVBQUU7WUFDL0MsT0FBTztnQkFDTE4sU0FBUztnQkFDVE0sT0FBT2Qsa0VBQWlDLENBQUNjO1lBQzNDO1FBQ0Y7UUFDQUcsbUJBQWtCSCxLQUEyQixFQUFFO1lBQzdDLE9BQU87Z0JBQ0xOLFNBQVM7Z0JBQ1RNLE9BQU9iLGlFQUFnQyxDQUFDYTtZQUMxQztRQUNGO1FBQ0FJLG1CQUFrQkosS0FBMkIsRUFBRTtZQUM3QyxPQUFPO2dCQUNMTixTQUFTO2dCQUNUTSxPQUFPWixpRUFBZ0MsQ0FBQ1k7WUFDMUM7UUFDRjtRQUNBSyx1QkFBc0JMLEtBQStCLEVBQUU7WUFDckQsT0FBTztnQkFDTE4sU0FBUztnQkFDVE0sT0FBT1gscUVBQW9DLENBQUNXO1lBQzlDO1FBQ0Y7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL3NyYy9jb2RlZ2VuL2liYy9jb3JlL2Nvbm5lY3Rpb24vdjEvdHgucmVnaXN0cnkudHM/OWI2YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHZW5lcmF0ZWRUeXBlLCBSZWdpc3RyeSB9IGZyb20gXCJAY29zbWpzL3Byb3RvLXNpZ25pbmdcIjtcbmltcG9ydCB7IE1zZ0Nvbm5lY3Rpb25PcGVuSW5pdCwgTXNnQ29ubmVjdGlvbk9wZW5UcnksIE1zZ0Nvbm5lY3Rpb25PcGVuQWNrLCBNc2dDb25uZWN0aW9uT3BlbkNvbmZpcm0gfSBmcm9tIFwiLi90eFwiO1xuZXhwb3J0IGNvbnN0IHJlZ2lzdHJ5OiBSZWFkb25seUFycmF5PFtzdHJpbmcsIEdlbmVyYXRlZFR5cGVdPiA9IFtbXCIvaWJjLmNvcmUuY29ubmVjdGlvbi52MS5Nc2dDb25uZWN0aW9uT3BlbkluaXRcIiwgTXNnQ29ubmVjdGlvbk9wZW5Jbml0XSwgW1wiL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5UcnlcIiwgTXNnQ29ubmVjdGlvbk9wZW5UcnldLCBbXCIvaWJjLmNvcmUuY29ubmVjdGlvbi52MS5Nc2dDb25uZWN0aW9uT3BlbkFja1wiLCBNc2dDb25uZWN0aW9uT3BlbkFja10sIFtcIi9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuQ29uZmlybVwiLCBNc2dDb25uZWN0aW9uT3BlbkNvbmZpcm1dXTtcbmV4cG9ydCBjb25zdCBsb2FkID0gKHByb3RvUmVnaXN0cnk6IFJlZ2lzdHJ5KSA9PiB7XG4gIHJlZ2lzdHJ5LmZvckVhY2goKFt0eXBlVXJsLCBtb2RdKSA9PiB7XG4gICAgcHJvdG9SZWdpc3RyeS5yZWdpc3Rlcih0eXBlVXJsLCBtb2QpO1xuICB9KTtcbn07XG5leHBvcnQgY29uc3QgTWVzc2FnZUNvbXBvc2VyID0ge1xuICBlbmNvZGVkOiB7XG4gICAgY29ubmVjdGlvbk9wZW5Jbml0KHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlbkluaXQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVVcmw6IFwiL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5Jbml0XCIsXG4gICAgICAgIHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlbkluaXQuZW5jb2RlKHZhbHVlKS5maW5pc2goKVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25PcGVuVHJ5KHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlblRyeSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmNvcmUuY29ubmVjdGlvbi52MS5Nc2dDb25uZWN0aW9uT3BlblRyeVwiLFxuICAgICAgICB2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5UcnkuZW5jb2RlKHZhbHVlKS5maW5pc2goKVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25PcGVuQWNrKHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlbkFjaykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmNvcmUuY29ubmVjdGlvbi52MS5Nc2dDb25uZWN0aW9uT3BlbkFja1wiLFxuICAgICAgICB2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5BY2suZW5jb2RlKHZhbHVlKS5maW5pc2goKVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25PcGVuQ29uZmlybSh2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5Db25maXJtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuQ29uZmlybVwiLFxuICAgICAgICB2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5Db25maXJtLmVuY29kZSh2YWx1ZSkuZmluaXNoKClcbiAgICAgIH07XG4gICAgfVxuICB9LFxuICB3aXRoVHlwZVVybDoge1xuICAgIGNvbm5lY3Rpb25PcGVuSW5pdCh2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5Jbml0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuSW5pdFwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25PcGVuVHJ5KHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlblRyeSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmNvcmUuY29ubmVjdGlvbi52MS5Nc2dDb25uZWN0aW9uT3BlblRyeVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25PcGVuQWNrKHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlbkFjaykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZVVybDogXCIvaWJjLmNvcmUuY29ubmVjdGlvbi52MS5Nc2dDb25uZWN0aW9uT3BlbkFja1wiLFxuICAgICAgICB2YWx1ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25PcGVuQ29uZmlybSh2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5Db25maXJtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuQ29uZmlybVwiLFxuICAgICAgICB2YWx1ZVxuICAgICAgfTtcbiAgICB9XG4gIH0sXG4gIGZyb21QYXJ0aWFsOiB7XG4gICAgY29ubmVjdGlvbk9wZW5Jbml0KHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlbkluaXQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVVcmw6IFwiL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5Jbml0XCIsXG4gICAgICAgIHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlbkluaXQuZnJvbVBhcnRpYWwodmFsdWUpXG4gICAgICB9O1xuICAgIH0sXG4gICAgY29ubmVjdGlvbk9wZW5UcnkodmFsdWU6IE1zZ0Nvbm5lY3Rpb25PcGVuVHJ5KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuVHJ5XCIsXG4gICAgICAgIHZhbHVlOiBNc2dDb25uZWN0aW9uT3BlblRyeS5mcm9tUGFydGlhbCh2YWx1ZSlcbiAgICAgIH07XG4gICAgfSxcbiAgICBjb25uZWN0aW9uT3BlbkFjayh2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5BY2spIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVVcmw6IFwiL2liYy5jb3JlLmNvbm5lY3Rpb24udjEuTXNnQ29ubmVjdGlvbk9wZW5BY2tcIixcbiAgICAgICAgdmFsdWU6IE1zZ0Nvbm5lY3Rpb25PcGVuQWNrLmZyb21QYXJ0aWFsKHZhbHVlKVxuICAgICAgfTtcbiAgICB9LFxuICAgIGNvbm5lY3Rpb25PcGVuQ29uZmlybSh2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5Db25maXJtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlVXJsOiBcIi9pYmMuY29yZS5jb25uZWN0aW9uLnYxLk1zZ0Nvbm5lY3Rpb25PcGVuQ29uZmlybVwiLFxuICAgICAgICB2YWx1ZTogTXNnQ29ubmVjdGlvbk9wZW5Db25maXJtLmZyb21QYXJ0aWFsKHZhbHVlKVxuICAgICAgfTtcbiAgICB9XG4gIH1cbn07Il0sIm5hbWVzIjpbIk1zZ0Nvbm5lY3Rpb25PcGVuSW5pdCIsIk1zZ0Nvbm5lY3Rpb25PcGVuVHJ5IiwiTXNnQ29ubmVjdGlvbk9wZW5BY2siLCJNc2dDb25uZWN0aW9uT3BlbkNvbmZpcm0iLCJyZWdpc3RyeSIsImxvYWQiLCJwcm90b1JlZ2lzdHJ5IiwiZm9yRWFjaCIsInR5cGVVcmwiLCJtb2QiLCJyZWdpc3RlciIsIk1lc3NhZ2VDb21wb3NlciIsImVuY29kZWQiLCJjb25uZWN0aW9uT3BlbkluaXQiLCJ2YWx1ZSIsImVuY29kZSIsImZpbmlzaCIsImNvbm5lY3Rpb25PcGVuVHJ5IiwiY29ubmVjdGlvbk9wZW5BY2siLCJjb25uZWN0aW9uT3BlbkNvbmZpcm0iLCJ3aXRoVHlwZVVybCIsImZyb21QYXJ0aWFsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/connection/v1/tx.registry.ts\n");

/***/ }),

/***/ "./src/codegen/ibc/core/connection/v1/tx.ts":
/*!**************************************************!*\
  !*** ./src/codegen/ibc/core/connection/v1/tx.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MsgConnectionOpenAck\": () => (/* binding */ MsgConnectionOpenAck),\n/* harmony export */   \"MsgConnectionOpenAckResponse\": () => (/* binding */ MsgConnectionOpenAckResponse),\n/* harmony export */   \"MsgConnectionOpenConfirm\": () => (/* binding */ MsgConnectionOpenConfirm),\n/* harmony export */   \"MsgConnectionOpenConfirmResponse\": () => (/* binding */ MsgConnectionOpenConfirmResponse),\n/* harmony export */   \"MsgConnectionOpenInit\": () => (/* binding */ MsgConnectionOpenInit),\n/* harmony export */   \"MsgConnectionOpenInitResponse\": () => (/* binding */ MsgConnectionOpenInitResponse),\n/* harmony export */   \"MsgConnectionOpenTry\": () => (/* binding */ MsgConnectionOpenTry),\n/* harmony export */   \"MsgConnectionOpenTryResponse\": () => (/* binding */ MsgConnectionOpenTryResponse)\n/* harmony export */ });\n/* harmony import */ var _connection__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./connection */ \"./src/codegen/ibc/core/connection/v1/connection.ts\");\n/* harmony import */ var _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../../google/protobuf/any */ \"./src/codegen/google/protobuf/any.ts\");\n/* harmony import */ var _client_v1_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../client/v1/client */ \"./src/codegen/ibc/core/client/v1/client.ts\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../helpers */ \"./src/codegen/helpers.ts\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! protobufjs/minimal */ \"protobufjs/minimal\");\n/* harmony import */ var protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__);\n\n\n\n\n\nfunction createBaseMsgConnectionOpenInit() {\n    return {\n        clientId: \"\",\n        counterparty: undefined,\n        version: undefined,\n        delayPeriod: _helpers__WEBPACK_IMPORTED_MODULE_3__.Long.UZERO,\n        signer: \"\"\n    };\n}\nconst MsgConnectionOpenInit = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.counterparty !== undefined) {\n            _connection__WEBPACK_IMPORTED_MODULE_0__.Counterparty.encode(message.counterparty, writer.uint32(18).fork()).ldelim();\n        }\n        if (message.version !== undefined) {\n            _connection__WEBPACK_IMPORTED_MODULE_0__.Version.encode(message.version, writer.uint32(26).fork()).ldelim();\n        }\n        if (!message.delayPeriod.isZero()) {\n            writer.uint32(32).uint64(message.delayPeriod);\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(42).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenInit();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.counterparty = _connection__WEBPACK_IMPORTED_MODULE_0__.Counterparty.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.version = _connection__WEBPACK_IMPORTED_MODULE_0__.Version.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.delayPeriod = reader.uint64();\n                    break;\n                case 5:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgConnectionOpenInit();\n        message.clientId = object.clientId ?? \"\";\n        message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? _connection__WEBPACK_IMPORTED_MODULE_0__.Counterparty.fromPartial(object.counterparty) : undefined;\n        message.version = object.version !== undefined && object.version !== null ? _connection__WEBPACK_IMPORTED_MODULE_0__.Version.fromPartial(object.version) : undefined;\n        message.delayPeriod = object.delayPeriod !== undefined && object.delayPeriod !== null ? _helpers__WEBPACK_IMPORTED_MODULE_3__.Long.fromValue(object.delayPeriod) : _helpers__WEBPACK_IMPORTED_MODULE_3__.Long.UZERO;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgConnectionOpenInitResponse() {\n    return {};\n}\nconst MsgConnectionOpenInitResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenInitResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgConnectionOpenInitResponse();\n        return message;\n    }\n};\nfunction createBaseMsgConnectionOpenTry() {\n    return {\n        clientId: \"\",\n        previousConnectionId: \"\",\n        clientState: undefined,\n        counterparty: undefined,\n        delayPeriod: _helpers__WEBPACK_IMPORTED_MODULE_3__.Long.UZERO,\n        counterpartyVersions: [],\n        proofHeight: undefined,\n        proofInit: new Uint8Array(),\n        proofClient: new Uint8Array(),\n        proofConsensus: new Uint8Array(),\n        consensusHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgConnectionOpenTry = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        if (message.clientId !== \"\") {\n            writer.uint32(10).string(message.clientId);\n        }\n        if (message.previousConnectionId !== \"\") {\n            writer.uint32(18).string(message.previousConnectionId);\n        }\n        if (message.clientState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.encode(message.clientState, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.counterparty !== undefined) {\n            _connection__WEBPACK_IMPORTED_MODULE_0__.Counterparty.encode(message.counterparty, writer.uint32(34).fork()).ldelim();\n        }\n        if (!message.delayPeriod.isZero()) {\n            writer.uint32(40).uint64(message.delayPeriod);\n        }\n        for (const v of message.counterpartyVersions){\n            _connection__WEBPACK_IMPORTED_MODULE_0__.Version.encode(v, writer.uint32(50).fork()).ldelim();\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.encode(message.proofHeight, writer.uint32(58).fork()).ldelim();\n        }\n        if (message.proofInit.length !== 0) {\n            writer.uint32(66).bytes(message.proofInit);\n        }\n        if (message.proofClient.length !== 0) {\n            writer.uint32(74).bytes(message.proofClient);\n        }\n        if (message.proofConsensus.length !== 0) {\n            writer.uint32(82).bytes(message.proofConsensus);\n        }\n        if (message.consensusHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.encode(message.consensusHeight, writer.uint32(90).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(98).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenTry();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.clientId = reader.string();\n                    break;\n                case 2:\n                    message.previousConnectionId = reader.string();\n                    break;\n                case 3:\n                    message.clientState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.counterparty = _connection__WEBPACK_IMPORTED_MODULE_0__.Counterparty.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.delayPeriod = reader.uint64();\n                    break;\n                case 6:\n                    message.counterpartyVersions.push(_connection__WEBPACK_IMPORTED_MODULE_0__.Version.decode(reader, reader.uint32()));\n                    break;\n                case 7:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.proofInit = reader.bytes();\n                    break;\n                case 9:\n                    message.proofClient = reader.bytes();\n                    break;\n                case 10:\n                    message.proofConsensus = reader.bytes();\n                    break;\n                case 11:\n                    message.consensusHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.decode(reader, reader.uint32());\n                    break;\n                case 12:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgConnectionOpenTry();\n        message.clientId = object.clientId ?? \"\";\n        message.previousConnectionId = object.previousConnectionId ?? \"\";\n        message.clientState = object.clientState !== undefined && object.clientState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.fromPartial(object.clientState) : undefined;\n        message.counterparty = object.counterparty !== undefined && object.counterparty !== null ? _connection__WEBPACK_IMPORTED_MODULE_0__.Counterparty.fromPartial(object.counterparty) : undefined;\n        message.delayPeriod = object.delayPeriod !== undefined && object.delayPeriod !== null ? _helpers__WEBPACK_IMPORTED_MODULE_3__.Long.fromValue(object.delayPeriod) : _helpers__WEBPACK_IMPORTED_MODULE_3__.Long.UZERO;\n        message.counterpartyVersions = object.counterpartyVersions?.map((e)=>_connection__WEBPACK_IMPORTED_MODULE_0__.Version.fromPartial(e)) || [];\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.fromPartial(object.proofHeight) : undefined;\n        message.proofInit = object.proofInit ?? new Uint8Array();\n        message.proofClient = object.proofClient ?? new Uint8Array();\n        message.proofConsensus = object.proofConsensus ?? new Uint8Array();\n        message.consensusHeight = object.consensusHeight !== undefined && object.consensusHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.fromPartial(object.consensusHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgConnectionOpenTryResponse() {\n    return {};\n}\nconst MsgConnectionOpenTryResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenTryResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgConnectionOpenTryResponse();\n        return message;\n    }\n};\nfunction createBaseMsgConnectionOpenAck() {\n    return {\n        connectionId: \"\",\n        counterpartyConnectionId: \"\",\n        version: undefined,\n        clientState: undefined,\n        proofHeight: undefined,\n        proofTry: new Uint8Array(),\n        proofClient: new Uint8Array(),\n        proofConsensus: new Uint8Array(),\n        consensusHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgConnectionOpenAck = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        if (message.connectionId !== \"\") {\n            writer.uint32(10).string(message.connectionId);\n        }\n        if (message.counterpartyConnectionId !== \"\") {\n            writer.uint32(18).string(message.counterpartyConnectionId);\n        }\n        if (message.version !== undefined) {\n            _connection__WEBPACK_IMPORTED_MODULE_0__.Version.encode(message.version, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.clientState !== undefined) {\n            _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.encode(message.clientState, writer.uint32(34).fork()).ldelim();\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.encode(message.proofHeight, writer.uint32(42).fork()).ldelim();\n        }\n        if (message.proofTry.length !== 0) {\n            writer.uint32(50).bytes(message.proofTry);\n        }\n        if (message.proofClient.length !== 0) {\n            writer.uint32(58).bytes(message.proofClient);\n        }\n        if (message.proofConsensus.length !== 0) {\n            writer.uint32(66).bytes(message.proofConsensus);\n        }\n        if (message.consensusHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.encode(message.consensusHeight, writer.uint32(74).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(82).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenAck();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.connectionId = reader.string();\n                    break;\n                case 2:\n                    message.counterpartyConnectionId = reader.string();\n                    break;\n                case 3:\n                    message.version = _connection__WEBPACK_IMPORTED_MODULE_0__.Version.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.clientState = _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.proofTry = reader.bytes();\n                    break;\n                case 7:\n                    message.proofClient = reader.bytes();\n                    break;\n                case 8:\n                    message.proofConsensus = reader.bytes();\n                    break;\n                case 9:\n                    message.consensusHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.decode(reader, reader.uint32());\n                    break;\n                case 10:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgConnectionOpenAck();\n        message.connectionId = object.connectionId ?? \"\";\n        message.counterpartyConnectionId = object.counterpartyConnectionId ?? \"\";\n        message.version = object.version !== undefined && object.version !== null ? _connection__WEBPACK_IMPORTED_MODULE_0__.Version.fromPartial(object.version) : undefined;\n        message.clientState = object.clientState !== undefined && object.clientState !== null ? _google_protobuf_any__WEBPACK_IMPORTED_MODULE_1__.Any.fromPartial(object.clientState) : undefined;\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.fromPartial(object.proofHeight) : undefined;\n        message.proofTry = object.proofTry ?? new Uint8Array();\n        message.proofClient = object.proofClient ?? new Uint8Array();\n        message.proofConsensus = object.proofConsensus ?? new Uint8Array();\n        message.consensusHeight = object.consensusHeight !== undefined && object.consensusHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.fromPartial(object.consensusHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgConnectionOpenAckResponse() {\n    return {};\n}\nconst MsgConnectionOpenAckResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenAckResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgConnectionOpenAckResponse();\n        return message;\n    }\n};\nfunction createBaseMsgConnectionOpenConfirm() {\n    return {\n        connectionId: \"\",\n        proofAck: new Uint8Array(),\n        proofHeight: undefined,\n        signer: \"\"\n    };\n}\nconst MsgConnectionOpenConfirm = {\n    encode (message, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        if (message.connectionId !== \"\") {\n            writer.uint32(10).string(message.connectionId);\n        }\n        if (message.proofAck.length !== 0) {\n            writer.uint32(18).bytes(message.proofAck);\n        }\n        if (message.proofHeight !== undefined) {\n            _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.encode(message.proofHeight, writer.uint32(26).fork()).ldelim();\n        }\n        if (message.signer !== \"\") {\n            writer.uint32(34).string(message.signer);\n        }\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenConfirm();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                case 1:\n                    message.connectionId = reader.string();\n                    break;\n                case 2:\n                    message.proofAck = reader.bytes();\n                    break;\n                case 3:\n                    message.proofHeight = _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.signer = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (object) {\n        const message = createBaseMsgConnectionOpenConfirm();\n        message.connectionId = object.connectionId ?? \"\";\n        message.proofAck = object.proofAck ?? new Uint8Array();\n        message.proofHeight = object.proofHeight !== undefined && object.proofHeight !== null ? _client_v1_client__WEBPACK_IMPORTED_MODULE_2__.Height.fromPartial(object.proofHeight) : undefined;\n        message.signer = object.signer ?? \"\";\n        return message;\n    }\n};\nfunction createBaseMsgConnectionOpenConfirmResponse() {\n    return {};\n}\nconst MsgConnectionOpenConfirmResponse = {\n    encode (_, writer = protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Writer.create()) {\n        return writer;\n    },\n    decode (input, length) {\n        const reader = input instanceof protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader ? input : new protobufjs_minimal__WEBPACK_IMPORTED_MODULE_4__.Reader(input);\n        let end = length === undefined ? reader.len : reader.pos + length;\n        const message = createBaseMsgConnectionOpenConfirmResponse();\n        while(reader.pos < end){\n            const tag = reader.uint32();\n            switch(tag >>> 3){\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n            }\n        }\n        return message;\n    },\n    fromPartial (_) {\n        const message = createBaseMsgConnectionOpenConfirmResponse();\n        return message;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/codegen/ibc/core/connection/v1/tx.ts\n");

/***/ }),

/***/ "./src/components/Loader.tsx":
/*!***********************************!*\
  !*** ./src/components/Loader.tsx ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n// https://codepen.io/chris__sev/pen/JjRqOxa\n\nfunction Loader() {\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"bg-secondary flex space-x-3 rounded-full p-5\",\n        style: {\n            animationDuration: \"0.5s\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"h-5 w-5 animate-bounce rounded-full bg-white\",\n                style: {\n                    animationDelay: \"0.1s\"\n                }\n            }, void 0, false, {\n                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/Loader.tsx\",\n                lineNumber: 9,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"h-5 w-5 animate-bounce rounded-full bg-white\",\n                style: {\n                    animationDelay: \"0.3s\"\n                }\n            }, void 0, false, {\n                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/Loader.tsx\",\n                lineNumber: 13,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"h-5 w-5 animate-bounce rounded-full bg-white\",\n                style: {\n                    animationDelay: \"0.5s\"\n                }\n            }, void 0, false, {\n                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/Loader.tsx\",\n                lineNumber: 17,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/Loader.tsx\",\n        lineNumber: 5,\n        columnNumber: 5\n    }, this);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Loader);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9Mb2FkZXIudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDRDQUE0Qzs7QUFFNUMsU0FBU0EsU0FBUztJQUNoQixxQkFDRSw4REFBQ0M7UUFDQ0MsV0FBVTtRQUNWQyxPQUFPO1lBQUVDLG1CQUFtQjtRQUFPOzswQkFFbkMsOERBQUNIO2dCQUNDQyxXQUFVO2dCQUNWQyxPQUFPO29CQUFFRSxnQkFBZ0I7Z0JBQU87Ozs7OzswQkFFbEMsOERBQUNKO2dCQUNDQyxXQUFVO2dCQUNWQyxPQUFPO29CQUFFRSxnQkFBZ0I7Z0JBQU87Ozs7OzswQkFFbEMsOERBQUNKO2dCQUNDQyxXQUFVO2dCQUNWQyxPQUFPO29CQUFFRSxnQkFBZ0I7Z0JBQU87Ozs7Ozs7Ozs7OztBQUl4QztBQUVBLGlFQUFlTCxNQUFNQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvY29tcG9uZW50cy9Mb2FkZXIudHN4PzEzMmQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaHR0cHM6Ly9jb2RlcGVuLmlvL2NocmlzX19zZXYvcGVuL0pqUnFPeGFcblxuZnVuY3Rpb24gTG9hZGVyKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT1cImJnLXNlY29uZGFyeSBmbGV4IHNwYWNlLXgtMyByb3VuZGVkLWZ1bGwgcC01XCJcbiAgICAgIHN0eWxlPXt7IGFuaW1hdGlvbkR1cmF0aW9uOiAnMC41cycgfX1cbiAgICA+XG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT1cImgtNSB3LTUgYW5pbWF0ZS1ib3VuY2Ugcm91bmRlZC1mdWxsIGJnLXdoaXRlXCJcbiAgICAgICAgc3R5bGU9e3sgYW5pbWF0aW9uRGVsYXk6ICcwLjFzJyB9fVxuICAgICAgLz5cbiAgICAgIDxkaXZcbiAgICAgICAgY2xhc3NOYW1lPVwiaC01IHctNSBhbmltYXRlLWJvdW5jZSByb3VuZGVkLWZ1bGwgYmctd2hpdGVcIlxuICAgICAgICBzdHlsZT17eyBhbmltYXRpb25EZWxheTogJzAuM3MnIH19XG4gICAgICAvPlxuICAgICAgPGRpdlxuICAgICAgICBjbGFzc05hbWU9XCJoLTUgdy01IGFuaW1hdGUtYm91bmNlIHJvdW5kZWQtZnVsbCBiZy13aGl0ZVwiXG4gICAgICAgIHN0eWxlPXt7IGFuaW1hdGlvbkRlbGF5OiAnMC41cycgfX1cbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcbiJdLCJuYW1lcyI6WyJMb2FkZXIiLCJkaXYiLCJjbGFzc05hbWUiLCJzdHlsZSIsImFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRGVsYXkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/components/Loader.tsx\n");

/***/ }),

/***/ "./src/components/WalletLoader.tsx":
/*!*****************************************!*\
  !*** ./src/components/WalletLoader.tsx ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Loader */ \"./src/components/Loader.tsx\");\n/* harmony import */ var _store_wallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/store/wallet */ \"./src/store/wallet.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_store_wallet__WEBPACK_IMPORTED_MODULE_3__]);\n_store_wallet__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nfunction WalletLoader({ children  }) {\n    const { loading , isConnected , connectWallet  } = (0,_store_wallet__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    const [load, setLoad] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [connected, setConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setLoad(loading);\n    }, [\n        loading\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        setConnected(isConnected);\n    }, [\n        isConnected\n    ]);\n    if (load) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"flex justify-center\",\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Loader__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {}, void 0, false, {\n                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                lineNumber: 32,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n            lineNumber: 31,\n            columnNumber: 7\n        }, this);\n    }\n    if (!connected) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"max-w-full\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                    className: \"text-6xl font-bold\",\n                    children: [\n                        \"Welcome to\",\n                        \" \",\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                            className: \"link-hover link-primary link\",\n                            href: \"https://nextjs.org\",\n                            children: \"Cascadia\"\n                        }, void 0, false, {\n                            fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                            lineNumber: 42,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                    lineNumber: 40,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                    className: \"mt-3 text-2xl\",\n                    children: [\n                        \"Get started by installing\",\n                        \" \",\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"a\", {\n                            className: \"pl-1 link-hover link-primary link\",\n                            href: \"https://keplr.app/\",\n                            children: \"Keplr wallet\"\n                        }, void 0, false, {\n                            fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                            lineNumber: 49,\n                            columnNumber: 11\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                    lineNumber: 47,\n                    columnNumber: 9\n                }, this),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-wrap items-center justify-around mt-6 sm:w-full md:max-w-4xl\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"p-6 mt-6 text-left border border-secondary hover:border-primary hover:text-primary focus:text-primary-focus w-96 rounded-xl\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                className: \"text-2xl font-bold\",\n                                children: \"Connect your wallet →\"\n                            }, void 0, false, {\n                                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                                lineNumber: 62,\n                                columnNumber: 13\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"mt-4 text-xl\",\n                                children: \"Connect Wallets\"\n                            }, void 0, false, {\n                                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                                lineNumber: 63,\n                                columnNumber: 13\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                        lineNumber: 58,\n                        columnNumber: 11\n                    }, this)\n                }, void 0, false, {\n                    fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n                    lineNumber: 57,\n                    columnNumber: 9\n                }, this)\n            ]\n        }, void 0, true, {\n            fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/components/WalletLoader.tsx\",\n            lineNumber: 39,\n            columnNumber: 7\n        }, this);\n    } else {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n            children: children\n        }, void 0, false);\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WalletLoader);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tcG9uZW50cy9XYWxsZXRMb2FkZXIudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQTREO0FBSTlCO0FBRWM7QUFFNUMsU0FBU0ksYUFBYSxFQUNwQkMsU0FBUSxFQUlULEVBQUU7SUFDRCxNQUFNLEVBQUNDLFFBQU8sRUFBQ0MsWUFBVyxFQUFFQyxjQUFhLEVBQUMsR0FBR0wseURBQWNBO0lBQzNELE1BQU0sQ0FBQ00sTUFBTUMsUUFBUSxHQUFHViwrQ0FBUUEsQ0FBQyxLQUFLO0lBQ3RDLE1BQU0sQ0FBQ1csV0FBV0MsYUFBYSxHQUFHWiwrQ0FBUUEsQ0FBQyxLQUFLO0lBRWhEQyxnREFBU0EsQ0FBQyxJQUFJO1FBQ1pTLFFBQVFKO0lBQ1YsR0FBRTtRQUFDQTtLQUFRO0lBRVhMLGdEQUFTQSxDQUFDLElBQUk7UUFDWlcsYUFBYUw7SUFDZixHQUFFO1FBQUNBO0tBQVk7SUFJZixJQUFJRSxNQUFNO1FBQ1IscUJBQ0UsOERBQUNJO1lBQUlDLFdBQVU7c0JBQ2IsNEVBQUNaLCtDQUFNQTs7Ozs7Ozs7OztJQUdiLENBQUM7SUFFRCxJQUFJLENBQUNTLFdBQVc7UUFDZCxxQkFDRSw4REFBQ0U7WUFBSUMsV0FBVTs7OEJBQ2IsOERBQUNDO29CQUFHRCxXQUFVOzt3QkFBcUI7d0JBQ3RCO3NDQUNYLDhEQUFDRTs0QkFBRUYsV0FBVTs0QkFBK0JHLE1BQUs7c0NBQXFCOzs7Ozs7Ozs7Ozs7OEJBS3hFLDhEQUFDQztvQkFBRUosV0FBVTs7d0JBQWdCO3dCQUNEO3NDQUMxQiw4REFBQ0U7NEJBQ0NGLFdBQVU7NEJBQ1ZHLE1BQUs7c0NBQ047Ozs7Ozs7Ozs7Ozs4QkFLSCw4REFBQ0o7b0JBQUlDLFdBQVU7OEJBQ2IsNEVBQUNLO3dCQUNDTCxXQUFVOzswQ0FHViw4REFBQ007Z0NBQUdOLFdBQVU7MENBQXFCOzs7Ozs7MENBQ25DLDhEQUFDSTtnQ0FBRUosV0FBVTswQ0FBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFLdEMsT0FBTTtRQUNKLHFCQUFRO3NCQUFHVDs7SUFDYixDQUFDO0FBQ0g7QUFFQSxpRUFBZUQsWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vc3JjL2NvbXBvbmVudHMvV2FsbGV0TG9hZGVyLnRzeD9hMTFhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB0eXBlIFJlYWN0Tm9kZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5cblxuaW1wb3J0IExvYWRlciBmcm9tICcuL0xvYWRlcic7XG5pbXBvcnQgZXJyb3IgZnJvbSAnbmV4dC9lcnJvcic7XG5pbXBvcnQgdXNlV2FsbGV0U3RvcmUgZnJvbSAnQC9zdG9yZS93YWxsZXQnO1xuXG5mdW5jdGlvbiBXYWxsZXRMb2FkZXIoe1xuICBjaGlsZHJlblxufToge1xuICBjaGlsZHJlbjogUmVhY3ROb2RlO1xuICBsb2FkaW5nPzogYm9vbGVhbjtcbn0pIHtcbiAgY29uc3Qge2xvYWRpbmcsaXNDb25uZWN0ZWQsIGNvbm5lY3RXYWxsZXR9ID0gdXNlV2FsbGV0U3RvcmUoKTtcbiAgY29uc3QgW2xvYWQsIHNldExvYWRdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtjb25uZWN0ZWQsIHNldENvbm5lY3RlZF0gPSB1c2VTdGF0ZShmYWxzZSlcblxuICB1c2VFZmZlY3QoKCk9PntcbiAgICBzZXRMb2FkKGxvYWRpbmcpXG4gIH0sW2xvYWRpbmddKVxuXG4gIHVzZUVmZmVjdCgoKT0+e1xuICAgIHNldENvbm5lY3RlZChpc0Nvbm5lY3RlZClcbiAgfSxbaXNDb25uZWN0ZWRdKVxuXG4gIFxuXG4gIGlmIChsb2FkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8TG9hZGVyIC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbiAgaWYgKCFjb25uZWN0ZWQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJtYXgtdy1mdWxsXCI+XG4gICAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LTZ4bCBmb250LWJvbGRcIj5cbiAgICAgICAgICBXZWxjb21lIHRveycgJ31cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJsaW5rLWhvdmVyIGxpbmstcHJpbWFyeSBsaW5rXCIgaHJlZj1cImh0dHBzOi8vbmV4dGpzLm9yZ1wiPlxuICAgICAgICAgICAgQ2FzY2FkaWEgXG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2gxPlxuXG4gICAgICAgIDxwIGNsYXNzTmFtZT1cIm10LTMgdGV4dC0yeGxcIj5cbiAgICAgICAgICBHZXQgc3RhcnRlZCBieSBpbnN0YWxsaW5neycgJ31cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicGwtMSBsaW5rLWhvdmVyIGxpbmstcHJpbWFyeSBsaW5rXCJcbiAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2tlcGxyLmFwcC9cIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIEtlcGxyIHdhbGxldFxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9wPlxuXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LXdyYXAgaXRlbXMtY2VudGVyIGp1c3RpZnktYXJvdW5kIG10LTYgc206dy1mdWxsIG1kOm1heC13LTR4bFwiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInAtNiBtdC02IHRleHQtbGVmdCBib3JkZXIgYm9yZGVyLXNlY29uZGFyeSBob3Zlcjpib3JkZXItcHJpbWFyeSBob3Zlcjp0ZXh0LXByaW1hcnkgZm9jdXM6dGV4dC1wcmltYXJ5LWZvY3VzIHctOTYgcm91bmRlZC14bFwiXG4gICAgICAgICAgIC8vb25DbGljaz17Y29ubmVjdFdhbGxldH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aDMgY2xhc3NOYW1lPVwidGV4dC0yeGwgZm9udC1ib2xkXCI+Q29ubmVjdCB5b3VyIHdhbGxldCAmcmFycjs8L2gzPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibXQtNCB0ZXh0LXhsXCI+Q29ubmVjdCBXYWxsZXRzPC9wPlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1lbHNlIHtcbiAgICByZXR1cm4gKDw+e2NoaWxkcmVufTwvPilcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBXYWxsZXRMb2FkZXI7XG4iXSwibmFtZXMiOlsidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJMb2FkZXIiLCJ1c2VXYWxsZXRTdG9yZSIsIldhbGxldExvYWRlciIsImNoaWxkcmVuIiwibG9hZGluZyIsImlzQ29ubmVjdGVkIiwiY29ubmVjdFdhbGxldCIsImxvYWQiLCJzZXRMb2FkIiwiY29ubmVjdGVkIiwic2V0Q29ubmVjdGVkIiwiZGl2IiwiY2xhc3NOYW1lIiwiaDEiLCJhIiwiaHJlZiIsInAiLCJidXR0b24iLCJoMyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/components/WalletLoader.tsx\n");

/***/ }),

/***/ "./src/http/requests/get/fetchBalance.ts":
/*!***********************************************!*\
  !*** ./src/http/requests/get/fetchBalance.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst fetchBalances = async (rpc, acc)=>{\n    const { data  } = await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].get(`${rpc}/cosmos/bank/v1beta1/balances/${acc}`);\n    return data.balances;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (fetchBalances);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaHR0cC9yZXF1ZXN0cy9nZXQvZmV0Y2hCYWxhbmNlLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBCO0FBUTFCLE1BQU1DLGdCQUFnQixPQUFPQyxLQUFXQyxNQUFnQjtJQUN0RCxNQUFNLEVBQUVDLEtBQUksRUFBRSxHQUFHLE1BQU1KLGlEQUFTLENBQzlCLENBQUMsRUFBRUUsSUFBSSw4QkFBOEIsRUFBRUMsSUFBSSxDQUFDO0lBRzlDLE9BQU9DLEtBQUtFLFFBQVE7QUFDdEI7QUFDQSxpRUFBZUwsYUFBYUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vc3JjL2h0dHAvcmVxdWVzdHMvZ2V0L2ZldGNoQmFsYW5jZS50cz8yYjJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgdHlwZSBSZXNwb25zZU1lc3NhZ2UgZnJvbSAnQC9odHRwL3R5cGVzL1Jlc3BvbnNlTWVzc2FnZSc7XG5pbXBvcnQgeyBDb2luIH0gZnJvbSAnQGNvc21qcy9zdGFyZ2F0ZSc7XG5cbmludGVyZmFjZSBGZXRjaEJhbGFuY2VSZXNwb25zZSBleHRlbmRzIFJlc3BvbnNlTWVzc2FnZSB7XG4gIGJhbGFuY2VzOiBDb2luW107XG59XG5cbmNvbnN0IGZldGNoQmFsYW5jZXMgPSBhc3luYyAocnBjOnN0cmluZyxhY2M6IHN0cmluZykgPT4ge1xuICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IGF4aW9zLmdldDxGZXRjaEJhbGFuY2VSZXNwb25zZT4oXG4gICAgYCR7cnBjfS9jb3Ntb3MvYmFuay92MWJldGExL2JhbGFuY2VzLyR7YWNjfWBcbiAgKTtcbiAgXG4gIHJldHVybiBkYXRhLmJhbGFuY2VzO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZldGNoQmFsYW5jZXM7XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJmZXRjaEJhbGFuY2VzIiwicnBjIiwiYWNjIiwiZGF0YSIsImdldCIsImJhbGFuY2VzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/http/requests/get/fetchBalance.ts\n");

/***/ }),

/***/ "./src/http/requests/post/chargeCoins.ts":
/*!***********************************************!*\
  !*** ./src/http/requests/post/chargeCoins.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst chargeCoins = async (domain, denom, wallet)=>{\n    try {\n        await axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].post(`http://${domain}:4500`, {\n            address: wallet,\n            coins: [\n                `10000000000000${denom}`\n            ]\n        }, {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n    } catch (error) {\n        console.log(\"error\", error);\n    }\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (chargeCoins);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaHR0cC9yZXF1ZXN0cy9wb3N0L2NoYXJnZUNvaW5zLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQTBCO0FBRTFCLE1BQU1DLGNBQWMsT0FBT0MsUUFBZUMsT0FBY0MsU0FBa0I7SUFDeEUsSUFBSTtRQUNGLE1BQU1KLGtEQUFVLENBQUMsQ0FBQyxPQUFPLEVBQUVFLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDeENJLFNBQVNGO1lBQ1RHLE9BQU87Z0JBQUMsQ0FBQyxjQUFjLEVBQUVKLE1BQU0sQ0FBQzthQUFDO1FBQ3JDLEdBQUc7WUFDREssU0FBUztnQkFDTCxnQkFBZ0I7WUFDcEI7UUFDRjtJQUNBLEVBQUUsT0FBT0MsT0FBTztRQUNkQyxRQUFRQyxHQUFHLENBQUMsU0FBU0Y7SUFDdkI7QUFDRjtBQUVBLGlFQUFlUixXQUFXQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvaHR0cC9yZXF1ZXN0cy9wb3N0L2NoYXJnZUNvaW5zLnRzPzkwNTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuY29uc3QgY2hhcmdlQ29pbnMgPSBhc3luYyAoZG9tYWluOiBzdHJpbmcsZGVub206c3RyaW5nLCB3YWxsZXQ6c3RyaW5nKSA9PiB7XG4gIHRyeSB7XG4gICAgYXdhaXQgYXhpb3MucG9zdChgaHR0cDovLyR7ZG9tYWlufTo0NTAwYCwge1xuICAgICAgYWRkcmVzczogd2FsbGV0LFxuICAgICAgY29pbnM6IFtgMTAwMDAwMDAwMDAwMDAke2Rlbm9tfWBdXG4gIH0sIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICB9XG4gIH0pXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5sb2coXCJlcnJvclwiLCBlcnJvcilcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2hhcmdlQ29pbnM7XG4iXSwibmFtZXMiOlsiYXhpb3MiLCJjaGFyZ2VDb2lucyIsImRvbWFpbiIsImRlbm9tIiwid2FsbGV0IiwicG9zdCIsImFkZHJlc3MiLCJjb2lucyIsImhlYWRlcnMiLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/http/requests/post/chargeCoins.ts\n");

/***/ }),

/***/ "./src/pages/index.tsx":
/*!*****************************!*\
  !*** ./src/pages/index.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _components_WalletLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/components/WalletLoader */ \"./src/components/WalletLoader.tsx\");\n/* harmony import */ var _store_wallet__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/store/wallet */ \"./src/store/wallet.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/router */ \"next/router\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_5__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_components_WalletLoader__WEBPACK_IMPORTED_MODULE_2__, _store_wallet__WEBPACK_IMPORTED_MODULE_3__]);\n([_components_WalletLoader__WEBPACK_IMPORTED_MODULE_2__, _store_wallet__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n\nconst Home = ()=>{\n    const { loading , isConnected  } = (0,_store_wallet__WEBPACK_IMPORTED_MODULE_3__[\"default\"])();\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_5__.useRouter)();\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)(()=>{\n        if (isConnected) {\n            router.push(\"/deploy\");\n        }\n    }, [\n        isConnected\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_WalletLoader__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n        loading: loading,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                className: \"text-6xl font-bold\",\n                children: [\n                    \"Welcome to \",\n                    \"Sid Protocol Labs\",\n                    \" !\"\n                ]\n            }, void 0, true, {\n                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/pages/index.tsx\",\n                lineNumber: 18,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"flex flex-wrap items-center justify-around max-w-4xl max-w-full mt-6 sm:w-full\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_1___default()), {\n                    href: \"/deploy\",\n                    passHref: true,\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"p-6 mt-6 text-left border border-secondary hover:border-primary w-96 rounded-xl hover:text-primary focus:text-primary-focus\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                className: \"text-2xl font-bold\",\n                                children: \"Send to wallet →\"\n                            }, void 0, false, {\n                                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/pages/index.tsx\",\n                                lineNumber: 24,\n                                columnNumber: 13\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                className: \"mt-4 text-xl\",\n                                children: \"Execute a transaction to send funds to a wallet address.\"\n                            }, void 0, false, {\n                                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/pages/index.tsx\",\n                                lineNumber: 25,\n                                columnNumber: 13\n                            }, undefined)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/pages/index.tsx\",\n                        lineNumber: 23,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/pages/index.tsx\",\n                    lineNumber: 22,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/pages/index.tsx\",\n                lineNumber: 21,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Volumes/Data/Development/Web3/Cascadia/wasmdeploy/src/pages/index.tsx\",\n        lineNumber: 17,\n        columnNumber: 5\n    }, undefined);\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Home);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcGFnZXMvaW5kZXgudHN4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUM0QjtBQUN3QjtBQUNUO0FBQ1Y7QUFDTTtBQUV2QyxNQUFNSyxPQUFpQixJQUFNO0lBQzNCLE1BQU0sRUFBQ0MsUUFBTyxFQUFFQyxZQUFXLEVBQUMsR0FBR0wseURBQWNBO0lBQzdDLE1BQU1NLFNBQVNKLHNEQUFTQTtJQUN4QkQsZ0RBQVNBLENBQUMsSUFBSTtRQUNaLElBQUdJLGFBQVk7WUFDYkMsT0FBT0MsSUFBSSxDQUFDO1FBQ2QsQ0FBQztJQUNILEdBQUU7UUFBQ0Y7S0FBWTtJQUNmLHFCQUNFLDhEQUFDTixnRUFBWUE7UUFBQ0ssU0FBU0E7OzBCQUNyQiw4REFBQ0k7Z0JBQUdDLFdBQVU7O29CQUFxQjtvQkFDckJDLG1CQUFrQztvQkFBQzs7Ozs7OzswQkFFakQsOERBQUNHO2dCQUFJSixXQUFVOzBCQUNiLDRFQUFDWCxrREFBSUE7b0JBQUNnQixNQUFLO29CQUFVQyxRQUFROzhCQUMzQiw0RUFBQ0M7d0JBQUVQLFdBQVU7OzBDQUNYLDhEQUFDUTtnQ0FBR1IsV0FBVTswQ0FBcUI7Ozs7OzswQ0FDbkMsOERBQUNPO2dDQUFFUCxXQUFVOzBDQUFlOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBUXhDO0FBRUEsaUVBQWVOLElBQUlBLEVBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL3NyYy9wYWdlcy9pbmRleC50c3g/MTlhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IE5leHRQYWdlIH0gZnJvbSAnbmV4dCdcbmltcG9ydCBMaW5rIGZyb20gJ25leHQvbGluaydcbmltcG9ydCBXYWxsZXRMb2FkZXIgZnJvbSAnQC9jb21wb25lbnRzL1dhbGxldExvYWRlcidcbmltcG9ydCB1c2VXYWxsZXRTdG9yZSBmcm9tICdAL3N0b3JlL3dhbGxldCdcbmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgdXNlUm91dGVyIH0gZnJvbSAnbmV4dC9yb3V0ZXInXG5cbmNvbnN0IEhvbWU6IE5leHRQYWdlID0gKCkgPT4ge1xuICBjb25zdCB7bG9hZGluZywgaXNDb25uZWN0ZWR9ID0gdXNlV2FsbGV0U3RvcmUoKVxuICBjb25zdCByb3V0ZXIgPSB1c2VSb3V0ZXIoKVxuICB1c2VFZmZlY3QoKCk9PntcbiAgICBpZihpc0Nvbm5lY3RlZCl7XG4gICAgICByb3V0ZXIucHVzaChcIi9kZXBsb3lcIilcbiAgICB9XG4gIH0sW2lzQ29ubmVjdGVkXSlcbiAgcmV0dXJuIChcbiAgICA8V2FsbGV0TG9hZGVyIGxvYWRpbmc9e2xvYWRpbmd9PlxuICAgICAgPGgxIGNsYXNzTmFtZT1cInRleHQtNnhsIGZvbnQtYm9sZFwiPlxuICAgICAgICBXZWxjb21lIHRvIHtwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19DSEFJTl9OQU1FfSAhXG4gICAgICA8L2gxPlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtd3JhcCBpdGVtcy1jZW50ZXIganVzdGlmeS1hcm91bmQgbWF4LXctNHhsIG1heC13LWZ1bGwgbXQtNiBzbTp3LWZ1bGxcIj5cbiAgICAgICAgPExpbmsgaHJlZj1cIi9kZXBsb3lcIiBwYXNzSHJlZj5cbiAgICAgICAgICA8cCBjbGFzc05hbWU9XCJwLTYgbXQtNiB0ZXh0LWxlZnQgYm9yZGVyIGJvcmRlci1zZWNvbmRhcnkgaG92ZXI6Ym9yZGVyLXByaW1hcnkgdy05NiByb3VuZGVkLXhsIGhvdmVyOnRleHQtcHJpbWFyeSBmb2N1czp0ZXh0LXByaW1hcnktZm9jdXNcIj5cbiAgICAgICAgICAgIDxoMyBjbGFzc05hbWU9XCJ0ZXh0LTJ4bCBmb250LWJvbGRcIj5TZW5kIHRvIHdhbGxldCAmcmFycjs8L2gzPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPVwibXQtNCB0ZXh0LXhsXCI+XG4gICAgICAgICAgICAgIEV4ZWN1dGUgYSB0cmFuc2FjdGlvbiB0byBzZW5kIGZ1bmRzIHRvIGEgd2FsbGV0IGFkZHJlc3MuXG4gICAgICAgICAgICA8L3A+XG4gICAgICAgICAgPC9wPlxuICAgICAgICA8L0xpbms+XG4gICAgICA8L2Rpdj5cbiAgICA8L1dhbGxldExvYWRlcj5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBIb21lXG4iXSwibmFtZXMiOlsiTGluayIsIldhbGxldExvYWRlciIsInVzZVdhbGxldFN0b3JlIiwidXNlRWZmZWN0IiwidXNlUm91dGVyIiwiSG9tZSIsImxvYWRpbmciLCJpc0Nvbm5lY3RlZCIsInJvdXRlciIsInB1c2giLCJoMSIsImNsYXNzTmFtZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19DSEFJTl9OQU1FIiwiZGl2IiwiaHJlZiIsInBhc3NIcmVmIiwicCIsImgzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/pages/index.tsx\n");

/***/ }),

/***/ "./src/shared/types/chain.ts":
/*!***********************************!*\
  !*** ./src/shared/types/chain.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getSideChainInfo\": () => (/* binding */ getSideChainInfo)\n/* harmony export */ });\nconst getSideChainInfo = (chain)=>({\n        chainId: chain.chainID,\n        chainName: chain.name,\n        rpc: chain.rpcUrl,\n        rest: chain.restUrl,\n        bip44: {\n            coinType: 60\n        },\n        bech32Config: {\n            bech32PrefixAccAddr: chain.prefix,\n            bech32PrefixAccPub: `${chain.prefix}pub`,\n            bech32PrefixValAddr: `${chain.prefix}valoper`,\n            bech32PrefixValPub: `${chain.prefix}valoperpub`,\n            bech32PrefixConsAddr: `${chain.prefix}valcons`,\n            bech32PrefixConsPub: `${chain.prefix}valconspub`\n        },\n        currencies: [\n            {\n                coinDenom: chain.denom,\n                coinMinimalDenom: chain.denom,\n                coinDecimals: 18\n            }\n        ],\n        feeCurrencies: [\n            {\n                coinDenom: chain.denom,\n                coinMinimalDenom: chain.denom,\n                coinDecimals: 18\n            }\n        ],\n        stakeCurrency: {\n            coinDenom: chain.denom,\n            coinMinimalDenom: chain.denom,\n            coinDecimals: 18\n        },\n        coinType: 60,\n        features: [\n            \"stargate\",\n            \"ibc-transfer\",\n            \"eth-address-gen\",\n            \"eth-key-sign\"\n        ]\n    });\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2hhcmVkL3R5cGVzL2NoYWluLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFXTyxNQUFNQSxtQkFBbUIsQ0FBQ0MsUUFBc0M7UUFDckVDLFNBQVNELE1BQU1FLE9BQU87UUFDdEJDLFdBQVdILE1BQU1JLElBQUk7UUFDckJDLEtBQUtMLE1BQU1NLE1BQU07UUFDakJDLE1BQU1QLE1BQU1RLE9BQU87UUFDbkJDLE9BQU87WUFDTEMsVUFBVTtRQUNaO1FBQ0FDLGNBQWM7WUFDWkMscUJBQXFCWixNQUFNYSxNQUFNO1lBQ2pDQyxvQkFBb0IsQ0FBQyxFQUFFZCxNQUFNYSxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ3hDRSxxQkFBcUIsQ0FBQyxFQUFFZixNQUFNYSxNQUFNLENBQUMsT0FBTyxDQUFDO1lBQzdDRyxvQkFBb0IsQ0FBQyxFQUFFaEIsTUFBTWEsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUMvQ0ksc0JBQXNCLENBQUMsRUFBRWpCLE1BQU1hLE1BQU0sQ0FBQyxPQUFPLENBQUM7WUFDOUNLLHFCQUFxQixDQUFDLEVBQUVsQixNQUFNYSxNQUFNLENBQUMsVUFBVSxDQUFDO1FBQ2xEO1FBQ0FNLFlBQVk7WUFDVjtnQkFDRUMsV0FBV3BCLE1BQU1xQixLQUFLO2dCQUN0QkMsa0JBQWtCdEIsTUFBTXFCLEtBQUs7Z0JBQzdCRSxjQUFjO1lBQ2hCO1NBQ0Q7UUFDREMsZUFBZTtZQUNiO2dCQUNFSixXQUFXcEIsTUFBTXFCLEtBQUs7Z0JBQ3RCQyxrQkFBa0J0QixNQUFNcUIsS0FBSztnQkFDN0JFLGNBQWM7WUFDaEI7U0FDRDtRQUNERSxlQUFlO1lBQ2JMLFdBQVdwQixNQUFNcUIsS0FBSztZQUN0QkMsa0JBQWtCdEIsTUFBTXFCLEtBQUs7WUFDN0JFLGNBQWM7UUFDaEI7UUFDQWIsVUFBVTtRQUNWZ0IsVUFBVTtZQUFDO1lBQVk7WUFBZ0I7WUFBa0I7U0FBZTtJQUMxRSxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvc2hhcmVkL3R5cGVzL2NoYWluLnRzP2M4YjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGFpbkluZm8gfSBmcm9tICdAa2VwbHItd2FsbGV0L3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBCcmllZkNoYWluSW5mbyB7XG4gIGNoYWluSUQ6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICBycGNVcmw6IHN0cmluZztcbiAgcmVzdFVybDogc3RyaW5nO1xuICBwcmVmaXg6IHN0cmluZztcbiAgZGVub206IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IGdldFNpZGVDaGFpbkluZm8gPSAoY2hhaW46IEJyaWVmQ2hhaW5JbmZvKTogQ2hhaW5JbmZvID0+ICh7XG4gIGNoYWluSWQ6IGNoYWluLmNoYWluSUQsXG4gIGNoYWluTmFtZTogY2hhaW4ubmFtZSxcbiAgcnBjOiBjaGFpbi5ycGNVcmwhLFxuICByZXN0OiBjaGFpbi5yZXN0VXJsLFxuICBiaXA0NDoge1xuICAgIGNvaW5UeXBlOiA2MCxcbiAgfSxcbiAgYmVjaDMyQ29uZmlnOiB7XG4gICAgYmVjaDMyUHJlZml4QWNjQWRkcjogY2hhaW4ucHJlZml4LFxuICAgIGJlY2gzMlByZWZpeEFjY1B1YjogYCR7Y2hhaW4ucHJlZml4fXB1YmAsXG4gICAgYmVjaDMyUHJlZml4VmFsQWRkcjogYCR7Y2hhaW4ucHJlZml4fXZhbG9wZXJgLFxuICAgIGJlY2gzMlByZWZpeFZhbFB1YjogYCR7Y2hhaW4ucHJlZml4fXZhbG9wZXJwdWJgLFxuICAgIGJlY2gzMlByZWZpeENvbnNBZGRyOiBgJHtjaGFpbi5wcmVmaXh9dmFsY29uc2AsXG4gICAgYmVjaDMyUHJlZml4Q29uc1B1YjogYCR7Y2hhaW4ucHJlZml4fXZhbGNvbnNwdWJgLFxuICB9LFxuICBjdXJyZW5jaWVzOiBbXG4gICAge1xuICAgICAgY29pbkRlbm9tOiBjaGFpbi5kZW5vbSxcbiAgICAgIGNvaW5NaW5pbWFsRGVub206IGNoYWluLmRlbm9tLFxuICAgICAgY29pbkRlY2ltYWxzOiAxOCxcbiAgICB9LFxuICBdLFxuICBmZWVDdXJyZW5jaWVzOiBbXG4gICAge1xuICAgICAgY29pbkRlbm9tOiBjaGFpbi5kZW5vbSxcbiAgICAgIGNvaW5NaW5pbWFsRGVub206IGNoYWluLmRlbm9tLFxuICAgICAgY29pbkRlY2ltYWxzOiAxOCxcbiAgICB9LFxuICBdLFxuICBzdGFrZUN1cnJlbmN5OiB7XG4gICAgY29pbkRlbm9tOiBjaGFpbi5kZW5vbSxcbiAgICBjb2luTWluaW1hbERlbm9tOiBjaGFpbi5kZW5vbSxcbiAgICBjb2luRGVjaW1hbHM6IDE4LFxuICB9LFxuICBjb2luVHlwZTogNjAsXG4gIGZlYXR1cmVzOiBbJ3N0YXJnYXRlJywgJ2liYy10cmFuc2ZlcicsIFwiZXRoLWFkZHJlc3MtZ2VuXCIsXCJldGgta2V5LXNpZ25cIl0sXG59KTtcbiJdLCJuYW1lcyI6WyJnZXRTaWRlQ2hhaW5JbmZvIiwiY2hhaW4iLCJjaGFpbklkIiwiY2hhaW5JRCIsImNoYWluTmFtZSIsIm5hbWUiLCJycGMiLCJycGNVcmwiLCJyZXN0IiwicmVzdFVybCIsImJpcDQ0IiwiY29pblR5cGUiLCJiZWNoMzJDb25maWciLCJiZWNoMzJQcmVmaXhBY2NBZGRyIiwicHJlZml4IiwiYmVjaDMyUHJlZml4QWNjUHViIiwiYmVjaDMyUHJlZml4VmFsQWRkciIsImJlY2gzMlByZWZpeFZhbFB1YiIsImJlY2gzMlByZWZpeENvbnNBZGRyIiwiYmVjaDMyUHJlZml4Q29uc1B1YiIsImN1cnJlbmNpZXMiLCJjb2luRGVub20iLCJkZW5vbSIsImNvaW5NaW5pbWFsRGVub20iLCJjb2luRGVjaW1hbHMiLCJmZWVDdXJyZW5jaWVzIiwic3Rha2VDdXJyZW5jeSIsImZlYXR1cmVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/shared/types/chain.ts\n");

/***/ }),

/***/ "./src/store/wallet.ts":
/*!*****************************!*\
  !*** ./src/store/wallet.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"getSigningClientOptions\": () => (/* binding */ getSigningClientOptions)\n/* harmony export */ });\n/* harmony import */ var _cosmjs_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cosmjs/math */ \"@cosmjs/math\");\n/* harmony import */ var _cosmjs_math__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_math__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cosmjs_cosmwasm_stargate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cosmjs/cosmwasm-stargate */ \"@cosmjs/cosmwasm-stargate\");\n/* harmony import */ var _cosmjs_cosmwasm_stargate__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_cosmwasm_stargate__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! zustand */ \"zustand\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! zustand/middleware */ \"zustand/middleware\");\n/* harmony import */ var _shared_types_chain__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/shared/types/chain */ \"./src/shared/types/chain.ts\");\n/* harmony import */ var _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @cosmjs/stargate */ \"@cosmjs/stargate\");\n/* harmony import */ var _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_stargate__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _utils_SigningKeplrCosmWasmClient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/utils/SigningKeplrCosmWasmClient */ \"./src/utils/SigningKeplrCosmWasmClient.ts\");\n/* harmony import */ var _supercharge_promise_pool__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @supercharge/promise-pool */ \"@supercharge/promise-pool\");\n/* harmony import */ var _supercharge_promise_pool__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_supercharge_promise_pool__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var _utils_AppConfig__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @/utils/AppConfig */ \"./src/utils/AppConfig.ts\");\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @cosmjs/proto-signing */ \"@cosmjs/proto-signing\");\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var _codegen_cosmwasm_client__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @/codegen/cosmwasm/client */ \"./src/codegen/cosmwasm/client.ts\");\n/* harmony import */ var _codegen_ibc_client__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @/codegen/ibc/client */ \"./src/codegen/ibc/client.ts\");\n/* harmony import */ var _http_requests_post_chargeCoins__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @/http/requests/post/chargeCoins */ \"./src/http/requests/post/chargeCoins.ts\");\n/* harmony import */ var _http_requests_get_fetchBalance__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @/http/requests/get/fetchBalance */ \"./src/http/requests/get/fetchBalance.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zustand__WEBPACK_IMPORTED_MODULE_2__, zustand_middleware__WEBPACK_IMPORTED_MODULE_3__, _http_requests_post_chargeCoins__WEBPACK_IMPORTED_MODULE_12__, _http_requests_get_fetchBalance__WEBPACK_IMPORTED_MODULE_13__]);\n([zustand__WEBPACK_IMPORTED_MODULE_2__, zustand_middleware__WEBPACK_IMPORTED_MODULE_3__, _http_requests_post_chargeCoins__WEBPACK_IMPORTED_MODULE_12__, _http_requests_get_fetchBalance__WEBPACK_IMPORTED_MODULE_13__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\n//import { SideSigningStargateClient } from '@/utils/side_stargateclient';\n\n\n\n\n\n\n\n\n\nconst getSigningClientOptions = ()=>{\n    const registry = new _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_9__.Registry([\n        ..._cosmjs_stargate__WEBPACK_IMPORTED_MODULE_5__.defaultRegistryTypes,\n        ..._codegen_cosmwasm_client__WEBPACK_IMPORTED_MODULE_10__.cosmwasmProtoRegistry,\n        ..._codegen_ibc_client__WEBPACK_IMPORTED_MODULE_11__.ibcProtoRegistry\n    ]);\n    const aminoTypes = new _cosmjs_stargate__WEBPACK_IMPORTED_MODULE_5__.AminoTypes({\n        ..._codegen_cosmwasm_client__WEBPACK_IMPORTED_MODULE_10__.cosmwasmAminoConverters,\n        ..._codegen_ibc_client__WEBPACK_IMPORTED_MODULE_11__.ibcAminoConverters\n    });\n    return {\n        registry,\n        aminoTypes\n    };\n};\nconst useWalletStore = (0,zustand__WEBPACK_IMPORTED_MODULE_2__.create)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_3__.persist)((set, get)=>({\n        loading: false,\n        isConnected: false,\n        wallets: [],\n        setLoading: (isLoad)=>{\n            set((state)=>({\n                    ...state,\n                    loading: isLoad\n                }));\n        },\n        suggestChain: async (chain)=>{\n            const { keplr  } = window;\n            if (!keplr) {\n                alert(\"You need to install Keplr\");\n                throw new Error(\"You need to install Keplr\");\n            }\n            const chainInfo = (0,_shared_types_chain__WEBPACK_IMPORTED_MODULE_4__.getSideChainInfo)(chain);\n            await keplr.experimentalSuggestChain(chainInfo);\n        },\n        connectWallet: async ()=>{\n            const { setLoading , suggestChain  } = get();\n            setLoading(true);\n            const { keplr  } = window;\n            if (!keplr) {\n                alert(\"You need to install Keplr\");\n                throw new Error(\"You need to install Keplr\");\n            }\n            const newWallets = [];\n            for (const chain of _utils_AppConfig__WEBPACK_IMPORTED_MODULE_8__.AppConfig.chains){\n                try {\n                    await suggestChain(chain);\n                    // Poll until the chain is approved and the signer is available\n                    const offlineSigner = await keplr.getOfflineSigner(chain.chainID);\n                    const newCreator = (await offlineSigner.getAccounts())[0].address;\n                    const newWallet = {\n                        address: newCreator,\n                        chainInfo: chain\n                    };\n                    newWallets.push(newWallet);\n                } catch (error) {\n                    console.log(\"Connection Error\", error);\n                }\n            }\n            if (newWallets.length === _utils_AppConfig__WEBPACK_IMPORTED_MODULE_8__.AppConfig.chains.length) {\n                set((state)=>({\n                        ...state,\n                        isConnected: true,\n                        wallets: newWallets\n                    }));\n            } else {\n                console.log(\"Not all chains could be registered.\");\n            }\n            setLoading(false);\n        },\n        getClient: async (chain)=>{\n            try {\n                const { setLoading  } = get();\n                setLoading(true);\n                const { keplr  } = window;\n                if (!keplr) {\n                    alert(\"You need to install Keplr\");\n                    throw new Error(\"You need to install Keplr\");\n                }\n                const chainInfo = (0,_shared_types_chain__WEBPACK_IMPORTED_MODULE_4__.getSideChainInfo)(chain);\n                await keplr.experimentalSuggestChain(chainInfo);\n                const offlineSigner = await keplr.getOfflineSigner(chainInfo.chainId);\n                const { aminoTypes , registry  } = getSigningClientOptions();\n                const newSigningClient = await _cosmjs_cosmwasm_stargate__WEBPACK_IMPORTED_MODULE_1__.SigningCosmWasmClient.connectWithSigner(chain.rpcUrl, offlineSigner, {\n                    gasPrice: {\n                        denom: chain.denom,\n                        amount: _cosmjs_math__WEBPACK_IMPORTED_MODULE_0__.Decimal.fromUserInput(\"200000000000000000000\", 0)\n                    },\n                    registry,\n                    aminoTypes\n                });\n                console.log(\"log:\", newSigningClient);\n                const newClient = new _utils_SigningKeplrCosmWasmClient__WEBPACK_IMPORTED_MODULE_6__[\"default\"](newSigningClient, offlineSigner);\n                setLoading(false);\n                return newClient;\n            } catch (error) {\n                return undefined;\n            }\n        },\n        disconnect: ()=>{\n            set((state)=>({\n                    ...state,\n                    isConnected: false,\n                    wallets: []\n                }));\n        },\n        charge: async ()=>{\n            const { wallets , setLoading , connectWallet  } = get();\n            await connectWallet();\n            setLoading(true);\n            const res = await _supercharge_promise_pool__WEBPACK_IMPORTED_MODULE_7___default().withConcurrency(2).for(wallets).process(async (chain)=>{\n                const url = new URL(chain.chainInfo.rpcUrl);\n                await (0,_http_requests_post_chargeCoins__WEBPACK_IMPORTED_MODULE_12__[\"default\"])(url.hostname, chain.chainInfo.denom, chain.address);\n            });\n            setLoading(false);\n            console.log(res.errors);\n        },\n        getBalance: async ()=>{\n            const { wallets , setLoading , connectWallet  } = get();\n            await connectWallet();\n            setLoading(true);\n            const res = await _supercharge_promise_pool__WEBPACK_IMPORTED_MODULE_7___default().withConcurrency(2).for(wallets).process(async (chain)=>{\n                const url = new URL(chain.chainInfo.rpcUrl);\n                const balances = await (0,_http_requests_get_fetchBalance__WEBPACK_IMPORTED_MODULE_13__[\"default\"])(url.hostname, chain.address);\n                return {\n                    address: chain.address,\n                    balances: balances\n                };\n            });\n            setLoading(false);\n            return res.results;\n        }\n    }), {\n    name: \"wallet-store\",\n    storage: (0,zustand_middleware__WEBPACK_IMPORTED_MODULE_3__.createJSONStorage)(()=>sessionStorage)\n}));\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (useWalletStore);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/store/wallet.ts\n");

/***/ }),

/***/ "./src/utils/AppConfig.ts":
/*!********************************!*\
  !*** ./src/utils/AppConfig.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AppConfig\": () => (/* binding */ AppConfig)\n/* harmony export */ });\nconst AppConfig = {\n    site_name: \"Sidchain\",\n    title: \"IBCSWAP\",\n    description: \"Implement inter-chain swap functionality\",\n    locale: \"en\",\n    chains: [\n        {\n            chainID: \"cascadia_6102-1\",\n            name: \"cascadia\",\n            prefix: \"cascadia\",\n            rpcUrl: \"http://localhost:26657\",\n            restUrl: \"http://localhost:1317\",\n            denom: \"aCC\"\n        }\n    ]\n}; //'http://54.146.100.240:26657',\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvQXBwQ29uZmlnLnRzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxZQUFZO0lBQ3ZCQyxXQUFXO0lBQ1hDLE9BQU87SUFDUEMsYUFBYTtJQUNiQyxRQUFRO0lBQ1JDLFFBQVE7UUFDTjtZQUNFQyxTQUFTO1lBQ1RDLE1BQU07WUFDTkMsUUFBUTtZQUNSQyxRQUFRO1lBQ1JDLFNBQVM7WUFDVEMsT0FBTztRQUNUO0tBQ0Q7QUFDSCxFQUFFLENBRUYsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvdXRpbHMvQXBwQ29uZmlnLnRzPzhhOWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEFwcENvbmZpZyA9IHtcbiAgc2l0ZV9uYW1lOiAnU2lkY2hhaW4nLFxuICB0aXRsZTogJ0lCQ1NXQVAnLFxuICBkZXNjcmlwdGlvbjogJ0ltcGxlbWVudCBpbnRlci1jaGFpbiBzd2FwIGZ1bmN0aW9uYWxpdHknLFxuICBsb2NhbGU6ICdlbicsXG4gIGNoYWluczogW1xuICAgIHtcbiAgICAgIGNoYWluSUQ6ICdjYXNjYWRpYV82MTAyLTEnLFxuICAgICAgbmFtZTogJ2Nhc2NhZGlhJyxcbiAgICAgIHByZWZpeDogJ2Nhc2NhZGlhJyxcbiAgICAgIHJwY1VybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MjY2NTcnLFxuICAgICAgcmVzdFVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MTMxNycsXG4gICAgICBkZW5vbTogJ2FDQycsXG4gICAgfSxcbiAgXSxcbn07XG5cbi8vJ2h0dHA6Ly81NC4xNDYuMTAwLjI0MDoyNjY1NycsIl0sIm5hbWVzIjpbIkFwcENvbmZpZyIsInNpdGVfbmFtZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJsb2NhbGUiLCJjaGFpbnMiLCJjaGFpbklEIiwibmFtZSIsInByZWZpeCIsInJwY1VybCIsInJlc3RVcmwiLCJkZW5vbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/AppConfig.ts\n");

/***/ }),

/***/ "./src/utils/SigningKeplrCosmWasmClient.ts":
/*!*************************************************!*\
  !*** ./src/utils/SigningKeplrCosmWasmClient.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SigningKeplrCosmWasmClient)\n/* harmony export */ });\n/* harmony import */ var _cosmjs_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @cosmjs/encoding */ \"@cosmjs/encoding\");\n/* harmony import */ var _cosmjs_encoding__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _cosmjs_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @cosmjs/math */ \"@cosmjs/math\");\n/* harmony import */ var _cosmjs_math__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_math__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @cosmjs/proto-signing */ \"@cosmjs/proto-signing\");\n/* harmony import */ var _cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var cosmjs_types_cosmos_crypto_secp256k1_keys__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cosmjs-types/cosmos/crypto/secp256k1/keys */ \"cosmjs-types/cosmos/crypto/secp256k1/keys\");\n/* harmony import */ var cosmjs_types_cosmos_crypto_secp256k1_keys__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cosmjs_types_cosmos_crypto_secp256k1_keys__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var cosmjs_types_cosmos_tx_v1beta1_tx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! cosmjs-types/cosmos/tx/v1beta1/tx */ \"cosmjs-types/cosmos/tx/v1beta1/tx\");\n/* harmony import */ var cosmjs_types_cosmos_tx_v1beta1_tx__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(cosmjs_types_cosmos_tx_v1beta1_tx__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var cosmjs_types_google_protobuf_any__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cosmjs-types/google/protobuf/any */ \"cosmjs-types/google/protobuf/any\");\n/* harmony import */ var cosmjs_types_google_protobuf_any__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(cosmjs_types_google_protobuf_any__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\nclass SigningKeplrCosmWasmClient {\n    constructor(client, offlineSigner){\n        this.client = client;\n        this.offlineSigner = offlineSigner;\n    }\n    async signWithEthermint(signerAddress, messages, chainId, accountSequence, accountNumber, fee, memo) {\n        try {\n            const account = await this.offlineSigner.getAccounts();\n            const acc = account.find((x)=>x.address === signerAddress);\n            // Custom typeUrl for EVMOS\n            const pubkey = cosmjs_types_google_protobuf_any__WEBPACK_IMPORTED_MODULE_5__.Any.fromPartial({\n                typeUrl: \"/ethermint.crypto.v1.ethsecp256k1.PubKey\",\n                value: cosmjs_types_cosmos_crypto_secp256k1_keys__WEBPACK_IMPORTED_MODULE_3__.PubKey.encode({\n                    key: acc.pubkey\n                }).finish()\n            });\n            console.log(\"PubKey:\", pubkey);\n            const txBodyEncodeObject = {\n                typeUrl: \"/cosmos.tx.v1beta1.TxBody\",\n                value: {\n                    messages,\n                    memo\n                }\n            };\n            const txBodyBytes = this.client.registry.encode(txBodyEncodeObject);\n            const gasLimit = _cosmjs_math__WEBPACK_IMPORTED_MODULE_1__.Int53.fromString(fee.gas).toNumber();\n            const authInfoBytes = (0,_cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_2__.makeAuthInfoBytes)([\n                {\n                    pubkey: pubkey,\n                    sequence: accountSequence\n                }\n            ], fee.amount, gasLimit);\n            const signDoc = (0,_cosmjs_proto_signing__WEBPACK_IMPORTED_MODULE_2__.makeSignDoc)(txBodyBytes, authInfoBytes, chainId, accountNumber);\n            const { signature , signed  } = await this.offlineSigner.signDirect(signerAddress, signDoc);\n            // returns txBytes for broadcast\n            return Promise.resolve(cosmjs_types_cosmos_tx_v1beta1_tx__WEBPACK_IMPORTED_MODULE_4__.TxRaw.encode({\n                bodyBytes: signed.bodyBytes,\n                authInfoBytes: signed.authInfoBytes,\n                signatures: [\n                    (0,_cosmjs_encoding__WEBPACK_IMPORTED_MODULE_0__.fromBase64)(signature.signature)\n                ]\n            }).finish());\n        } catch (error) {\n            console.log(\"error\", error);\n            return undefined;\n        }\n    }\n    async broadCastTx(tx) {\n        try {\n            const txData = await this.client.broadcastTx(tx);\n            console.log(txData);\n            return txData.transactionHash;\n        } catch (error) {\n            console.log(error);\n            return \"\";\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvU2lnbmluZ0tlcGxyQ29zbVdhc21DbGllbnQudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUM4QztBQUNUO0FBS047QUFHb0M7QUFDVDtBQUNIO0FBS3hDLE1BQU1PO0lBSW5CQyxZQUNFQyxNQUE2QixFQUM3QkMsYUFBa0MsQ0FDbEM7UUFDQSxJQUFJLENBQUNELE1BQU0sR0FBR0E7UUFDZCxJQUFJLENBQUNDLGFBQWEsR0FBR0E7SUFDdkI7SUFDQSxNQUFNQyxrQkFDSkMsYUFBb0IsRUFDcEJDLFFBQWlDLEVBQ2pDQyxPQUFlLEVBQ2ZDLGVBQXVCLEVBQ3ZCQyxhQUFxQixFQUNyQkMsR0FBVyxFQUNYQyxJQUFZLEVBQ3FCO1FBQ2pDLElBQUk7WUFDRixNQUFNQyxVQUFVLE1BQU0sSUFBSSxDQUFDVCxhQUFhLENBQUNVLFdBQVc7WUFDcEQsTUFBTUMsTUFBTUYsUUFBUUcsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxPQUFPLEtBQUtaO1lBQzVDLDJCQUEyQjtZQUMzQixNQUFNYSxTQUFTbkIsNkVBQWUsQ0FBQztnQkFDN0JxQixTQUFTO2dCQUNUQyxPQUFPeEIsb0ZBQWEsQ0FBQztvQkFDbkIwQixLQUFLVCxJQUFLSSxNQUFNO2dCQUNsQixHQUFHTSxNQUFNO1lBQ1g7WUFFQUMsUUFBUUMsR0FBRyxDQUFDLFdBQVdSO1lBRXZCLE1BQU1TLHFCQUFxQjtnQkFDekJQLFNBQVM7Z0JBQ1RDLE9BQU87b0JBQ0xmO29CQUNBSztnQkFDRjtZQUNGO1lBRUEsTUFBTWlCLGNBQWMsSUFBSSxDQUFDMUIsTUFBTSxDQUFDMkIsUUFBUSxDQUFDUCxNQUFNLENBQUNLO1lBQ2hELE1BQU1HLFdBQVdwQywwREFBZ0IsQ0FBQ2dCLElBQUlzQixHQUFHLEVBQUVDLFFBQVE7WUFDbkQsTUFBTUMsZ0JBQWdCdkMsd0VBQWlCQSxDQUNyQztnQkFBQztvQkFBRXVCLFFBQVFBO29CQUFRaUIsVUFBVTNCO2dCQUFnQjthQUFFLEVBQy9DRSxJQUFJMEIsTUFBTSxFQUNWTjtZQUVGLE1BQU1PLFVBQVV6QyxrRUFBV0EsQ0FDekJnQyxhQUNBTSxlQUNBM0IsU0FDQUU7WUFFRixNQUFNLEVBQUU2QixVQUFTLEVBQUVDLE9BQU0sRUFBRSxHQUFHLE1BQU0sSUFBSSxDQUFDcEMsYUFBYSxDQUFDcUMsVUFBVSxDQUMvRG5DLGVBQ0FnQztZQUdGLGdDQUFnQztZQUNoQyxPQUFPSSxRQUFRQyxPQUFPLENBQ3BCNUMsMkVBQVksQ0FBQztnQkFDWDZDLFdBQVdKLE9BQU9JLFNBQVM7Z0JBQzNCVCxlQUFlSyxPQUFPTCxhQUFhO2dCQUNuQ1UsWUFBWTtvQkFBQ25ELDREQUFVQSxDQUFDNkMsVUFBVUEsU0FBUztpQkFBRTtZQUMvQyxHQUFHZCxNQUFNO1FBRWIsRUFBRSxPQUFPcUIsT0FBTztZQUNkcEIsUUFBUUMsR0FBRyxDQUFDLFNBQVNtQjtZQUNyQixPQUFPQztRQUNUO0lBQ0Y7SUFDQSxNQUFNQyxZQUFZQyxFQUFjLEVBQW1CO1FBQ2pELElBQUk7WUFDRixNQUFNQyxTQUFTLE1BQU0sSUFBSSxDQUFDL0MsTUFBTSxDQUFDZ0QsV0FBVyxDQUFDRjtZQUM3Q3ZCLFFBQVFDLEdBQUcsQ0FBQ3VCO1lBQ1osT0FBT0EsT0FBT0UsZUFBZTtRQUMvQixFQUFFLE9BQU9OLE9BQU87WUFDZHBCLFFBQVFDLEdBQUcsQ0FBQ21CO1lBQ1osT0FBTztRQUNUO0lBQ0Y7QUFDRixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FzbV9kZXBsb3kvLi9zcmMvdXRpbHMvU2lnbmluZ0tlcGxyQ29zbVdhc21DbGllbnQudHM/NGQzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduaW5nQ29zbVdhc21DbGllbnQgfSBmcm9tICdAY29zbWpzL2Nvc213YXNtLXN0YXJnYXRlJztcbmltcG9ydCB7IGZyb21CYXNlNjQgfSBmcm9tICdAY29zbWpzL2VuY29kaW5nJztcbmltcG9ydCB7IEludDUzIH0gZnJvbSAnQGNvc21qcy9tYXRoJztcbmltcG9ydCB7XG4gIEVuY29kZU9iamVjdCxcbiAgbWFrZUF1dGhJbmZvQnl0ZXMsXG4gIG1ha2VTaWduRG9jLFxufSBmcm9tICdAY29zbWpzL3Byb3RvLXNpZ25pbmcnO1xuaW1wb3J0IHsgU3RkRmVlIH0gZnJvbSAnQGNvc21qcy9zdGFyZ2F0ZSc7XG5cbmltcG9ydCB7IFB1YktleSB9IGZyb20gJ2Nvc21qcy10eXBlcy9jb3Ntb3MvY3J5cHRvL3NlY3AyNTZrMS9rZXlzJztcbmltcG9ydCB7IFR4UmF3IH0gZnJvbSAnY29zbWpzLXR5cGVzL2Nvc21vcy90eC92MWJldGExL3R4JztcbmltcG9ydCB7IEFueSB9IGZyb20gJ2Nvc21qcy10eXBlcy9nb29nbGUvcHJvdG9idWYvYW55JztcbmltcG9ydCB7IE9mZmxpbmVEaXJlY3RTaWduZXIsIFN0ZFNpZ25hdHVyZSB9IGZyb20gJ0BrZXBsci13YWxsZXQvdHlwZXMnO1xuXG5pbXBvcnQgeyBBY2NvdW50RGF0YSB9IGZyb20gJ0Bjb3NtanMvYW1pbm8nO1xuaW1wb3J0IHsgSUFjY291bnQgfSBmcm9tICdAL3NoYXJlZC90eXBlcy9hY2NvdW50JztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNpZ25pbmdLZXBsckNvc21XYXNtQ2xpZW50IHtcbiAgcHJpdmF0ZSBjbGllbnQ6IFNpZ25pbmdDb3NtV2FzbUNsaWVudDtcbiAgcHJpdmF0ZSBvZmZsaW5lU2lnbmVyOiBPZmZsaW5lRGlyZWN0U2lnbmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNsaWVudDogU2lnbmluZ0Nvc21XYXNtQ2xpZW50LFxuICAgIG9mZmxpbmVTaWduZXI6IE9mZmxpbmVEaXJlY3RTaWduZXJcbiAgKSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy5vZmZsaW5lU2lnbmVyID0gb2ZmbGluZVNpZ25lcjtcbiAgfVxuICBhc3luYyBzaWduV2l0aEV0aGVybWludChcbiAgICBzaWduZXJBZGRyZXNzOnN0cmluZyxcbiAgICBtZXNzYWdlczogcmVhZG9ubHkgRW5jb2RlT2JqZWN0W10sXG4gICAgY2hhaW5JZDogc3RyaW5nLFxuICAgIGFjY291bnRTZXF1ZW5jZTogbnVtYmVyLFxuICAgIGFjY291bnROdW1iZXI6IG51bWJlcixcbiAgICBmZWU6IFN0ZEZlZSxcbiAgICBtZW1vOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxVaW50OEFycmF5IHwgdW5kZWZpbmVkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFjY291bnQgPSBhd2FpdCB0aGlzLm9mZmxpbmVTaWduZXIuZ2V0QWNjb3VudHMoKVxuICAgICAgY29uc3QgYWNjID0gYWNjb3VudC5maW5kKHggPT4geC5hZGRyZXNzID09PSBzaWduZXJBZGRyZXNzKVxuICAgICAgLy8gQ3VzdG9tIHR5cGVVcmwgZm9yIEVWTU9TXG4gICAgICBjb25zdCBwdWJrZXkgPSBBbnkuZnJvbVBhcnRpYWwoe1xuICAgICAgICB0eXBlVXJsOiAnL2V0aGVybWludC5jcnlwdG8udjEuZXRoc2VjcDI1NmsxLlB1YktleScsXG4gICAgICAgIHZhbHVlOiBQdWJLZXkuZW5jb2RlKHtcbiAgICAgICAgICBrZXk6IGFjYyEucHVia2V5LFxuICAgICAgICB9KS5maW5pc2goKSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zb2xlLmxvZygnUHViS2V5OicsIHB1YmtleSk7XG5cbiAgICAgIGNvbnN0IHR4Qm9keUVuY29kZU9iamVjdCA9IHtcbiAgICAgICAgdHlwZVVybDogJy9jb3Ntb3MudHgudjFiZXRhMS5UeEJvZHknLFxuICAgICAgICB2YWx1ZToge1xuICAgICAgICAgIG1lc3NhZ2VzLFxuICAgICAgICAgIG1lbW8sXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB0eEJvZHlCeXRlcyA9IHRoaXMuY2xpZW50LnJlZ2lzdHJ5LmVuY29kZSh0eEJvZHlFbmNvZGVPYmplY3QpO1xuICAgICAgY29uc3QgZ2FzTGltaXQgPSBJbnQ1My5mcm9tU3RyaW5nKGZlZS5nYXMpLnRvTnVtYmVyKCk7XG4gICAgICBjb25zdCBhdXRoSW5mb0J5dGVzID0gbWFrZUF1dGhJbmZvQnl0ZXMoXG4gICAgICAgIFt7IHB1YmtleTogcHVia2V5LCBzZXF1ZW5jZTogYWNjb3VudFNlcXVlbmNlIH1dLFxuICAgICAgICBmZWUuYW1vdW50LFxuICAgICAgICBnYXNMaW1pdFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNpZ25Eb2MgPSBtYWtlU2lnbkRvYyhcbiAgICAgICAgdHhCb2R5Qnl0ZXMsXG4gICAgICAgIGF1dGhJbmZvQnl0ZXMsXG4gICAgICAgIGNoYWluSWQsXG4gICAgICAgIGFjY291bnROdW1iZXJcbiAgICAgICk7XG4gICAgICBjb25zdCB7IHNpZ25hdHVyZSwgc2lnbmVkIH0gPSBhd2FpdCB0aGlzLm9mZmxpbmVTaWduZXIuc2lnbkRpcmVjdChcbiAgICAgICAgc2lnbmVyQWRkcmVzcyxcbiAgICAgICAgc2lnbkRvY1xuICAgICAgKTtcblxuICAgICAgLy8gcmV0dXJucyB0eEJ5dGVzIGZvciBicm9hZGNhc3RcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoXG4gICAgICAgIFR4UmF3LmVuY29kZSh7XG4gICAgICAgICAgYm9keUJ5dGVzOiBzaWduZWQuYm9keUJ5dGVzLFxuICAgICAgICAgIGF1dGhJbmZvQnl0ZXM6IHNpZ25lZC5hdXRoSW5mb0J5dGVzLFxuICAgICAgICAgIHNpZ25hdHVyZXM6IFtmcm9tQmFzZTY0KHNpZ25hdHVyZS5zaWduYXR1cmUpXSxcbiAgICAgICAgfSkuZmluaXNoKClcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdlcnJvcicsIGVycm9yKTtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG4gIGFzeW5jIGJyb2FkQ2FzdFR4KHR4OiBVaW50OEFycmF5KTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdHhEYXRhID0gYXdhaXQgdGhpcy5jbGllbnQuYnJvYWRjYXN0VHgodHgpO1xuICAgICAgY29uc29sZS5sb2codHhEYXRhKTtcbiAgICAgIHJldHVybiB0eERhdGEudHJhbnNhY3Rpb25IYXNoO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiZnJvbUJhc2U2NCIsIkludDUzIiwibWFrZUF1dGhJbmZvQnl0ZXMiLCJtYWtlU2lnbkRvYyIsIlB1YktleSIsIlR4UmF3IiwiQW55IiwiU2lnbmluZ0tlcGxyQ29zbVdhc21DbGllbnQiLCJjb25zdHJ1Y3RvciIsImNsaWVudCIsIm9mZmxpbmVTaWduZXIiLCJzaWduV2l0aEV0aGVybWludCIsInNpZ25lckFkZHJlc3MiLCJtZXNzYWdlcyIsImNoYWluSWQiLCJhY2NvdW50U2VxdWVuY2UiLCJhY2NvdW50TnVtYmVyIiwiZmVlIiwibWVtbyIsImFjY291bnQiLCJnZXRBY2NvdW50cyIsImFjYyIsImZpbmQiLCJ4IiwiYWRkcmVzcyIsInB1YmtleSIsImZyb21QYXJ0aWFsIiwidHlwZVVybCIsInZhbHVlIiwiZW5jb2RlIiwia2V5IiwiZmluaXNoIiwiY29uc29sZSIsImxvZyIsInR4Qm9keUVuY29kZU9iamVjdCIsInR4Qm9keUJ5dGVzIiwicmVnaXN0cnkiLCJnYXNMaW1pdCIsImZyb21TdHJpbmciLCJnYXMiLCJ0b051bWJlciIsImF1dGhJbmZvQnl0ZXMiLCJzZXF1ZW5jZSIsImFtb3VudCIsInNpZ25Eb2MiLCJzaWduYXR1cmUiLCJzaWduZWQiLCJzaWduRGlyZWN0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJib2R5Qnl0ZXMiLCJzaWduYXR1cmVzIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJicm9hZENhc3RUeCIsInR4IiwidHhEYXRhIiwiYnJvYWRjYXN0VHgiLCJ0cmFuc2FjdGlvbkhhc2giXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utils/SigningKeplrCosmWasmClient.ts\n");

/***/ }),

/***/ "./node_modules/next/link.js":
/*!***********************************!*\
  !*** ./node_modules/next/link.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./dist/client/link */ \"./node_modules/next/dist/client/link.js\")\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9saW5rLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBLHlHQUE4QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dhc21fZGVwbG95Ly4vbm9kZV9tb2R1bGVzL25leHQvbGluay5qcz83NWIzIl0sInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9kaXN0L2NsaWVudC9saW5rJylcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/link.js\n");

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function() {\n'use strict';\n\nvar React = __webpack_require__(/*! react */ \"react\");\n\n// ATTENTION\n// When adding new symbols to this file,\n// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n// The Symbol used to tag the ReactElement-like types.\nvar REACT_ELEMENT_TYPE = Symbol.for('react.element');\nvar REACT_PORTAL_TYPE = Symbol.for('react.portal');\nvar REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');\nvar REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');\nvar REACT_PROFILER_TYPE = Symbol.for('react.profiler');\nvar REACT_PROVIDER_TYPE = Symbol.for('react.provider');\nvar REACT_CONTEXT_TYPE = Symbol.for('react.context');\nvar REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');\nvar REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');\nvar REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');\nvar REACT_MEMO_TYPE = Symbol.for('react.memo');\nvar REACT_LAZY_TYPE = Symbol.for('react.lazy');\nvar REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');\nvar MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable !== 'object') {\n    return null;\n  }\n\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n\n  return null;\n}\n\nvar ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\nfunction error(format) {\n  {\n    {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      printWarning('error', format, args);\n    }\n  }\n}\n\nfunction printWarning(level, format, args) {\n  // When changing this logic, you might want to also\n  // update consoleWithStackDev.www.js as well.\n  {\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n    if (stack !== '') {\n      format += '%s';\n      args = args.concat([stack]);\n    } // eslint-disable-next-line react-internal/safe-string-coercion\n\n\n    var argsWithFormat = args.map(function (item) {\n      return String(item);\n    }); // Careful: RN currently depends on this prefix\n\n    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it\n    // breaks IE9: https://github.com/facebook/react/issues/13610\n    // eslint-disable-next-line react-internal/no-production-logging\n\n    Function.prototype.apply.call(console[level], console, argsWithFormat);\n  }\n}\n\n// -----------------------------------------------------------------------------\n\nvar enableScopeAPI = false; // Experimental Create Event Handle API.\nvar enableCacheElement = false;\nvar enableTransitionTracing = false; // No known bugs, but needs performance testing\n\nvar enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n// stuff. Intended to enable React core members to more easily debug scheduling\n// issues in DEV builds.\n\nvar enableDebugTracing = false; // Track which Fiber(s) schedule render work.\n\nvar REACT_MODULE_REFERENCE;\n\n{\n  REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');\n}\n\nfunction isValidElementType(type) {\n  if (typeof type === 'string' || typeof type === 'function') {\n    return true;\n  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n\n\n  if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing  || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden  || type === REACT_OFFSCREEN_TYPE || enableScopeAPI  || enableCacheElement  || enableTransitionTracing ) {\n    return true;\n  }\n\n  if (typeof type === 'object' && type !== null) {\n    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n    // types supported by any Flight configuration anywhere since\n    // we don't know which Flight build this will end up being used\n    // with.\n    type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getWrappedName(outerType, innerType, wrapperName) {\n  var displayName = outerType.displayName;\n\n  if (displayName) {\n    return displayName;\n  }\n\n  var functionName = innerType.displayName || innerType.name || '';\n  return functionName !== '' ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n} // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n\nfunction getContextName(type) {\n  return type.displayName || 'Context';\n} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n\nfunction getComponentNameFromType(type) {\n  if (type == null) {\n    // Host root, text node or just invalid type.\n    return null;\n  }\n\n  {\n    if (typeof type.tag === 'number') {\n      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');\n    }\n  }\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name || null;\n  }\n\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  switch (type) {\n    case REACT_FRAGMENT_TYPE:\n      return 'Fragment';\n\n    case REACT_PORTAL_TYPE:\n      return 'Portal';\n\n    case REACT_PROFILER_TYPE:\n      return 'Profiler';\n\n    case REACT_STRICT_MODE_TYPE:\n      return 'StrictMode';\n\n    case REACT_SUSPENSE_TYPE:\n      return 'Suspense';\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return 'SuspenseList';\n\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_CONTEXT_TYPE:\n        var context = type;\n        return getContextName(context) + '.Consumer';\n\n      case REACT_PROVIDER_TYPE:\n        var provider = type;\n        return getContextName(provider._context) + '.Provider';\n\n      case REACT_FORWARD_REF_TYPE:\n        return getWrappedName(type, type.render, 'ForwardRef');\n\n      case REACT_MEMO_TYPE:\n        var outerName = type.displayName || null;\n\n        if (outerName !== null) {\n          return outerName;\n        }\n\n        return getComponentNameFromType(type.type) || 'Memo';\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            return getComponentNameFromType(init(payload));\n          } catch (x) {\n            return null;\n          }\n        }\n\n      // eslint-disable-next-line no-fallthrough\n    }\n  }\n\n  return null;\n}\n\nvar assign = Object.assign;\n\n// Helpers to patch console.logs to avoid logging during side-effect free\n// replaying on render function. This currently only patches the object\n// lazily which won't cover if the log function was extracted eagerly.\n// We could also eagerly patch the method.\nvar disabledDepth = 0;\nvar prevLog;\nvar prevInfo;\nvar prevWarn;\nvar prevError;\nvar prevGroup;\nvar prevGroupCollapsed;\nvar prevGroupEnd;\n\nfunction disabledLog() {}\n\ndisabledLog.__reactDisabledLog = true;\nfunction disableLogs() {\n  {\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      prevLog = console.log;\n      prevInfo = console.info;\n      prevWarn = console.warn;\n      prevError = console.error;\n      prevGroup = console.group;\n      prevGroupCollapsed = console.groupCollapsed;\n      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n      var props = {\n        configurable: true,\n        enumerable: true,\n        value: disabledLog,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        info: props,\n        log: props,\n        warn: props,\n        error: props,\n        group: props,\n        groupCollapsed: props,\n        groupEnd: props\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    disabledDepth++;\n  }\n}\nfunction reenableLogs() {\n  {\n    disabledDepth--;\n\n    if (disabledDepth === 0) {\n      /* eslint-disable react-internal/no-production-logging */\n      var props = {\n        configurable: true,\n        enumerable: true,\n        writable: true\n      }; // $FlowFixMe Flow thinks console is immutable.\n\n      Object.defineProperties(console, {\n        log: assign({}, props, {\n          value: prevLog\n        }),\n        info: assign({}, props, {\n          value: prevInfo\n        }),\n        warn: assign({}, props, {\n          value: prevWarn\n        }),\n        error: assign({}, props, {\n          value: prevError\n        }),\n        group: assign({}, props, {\n          value: prevGroup\n        }),\n        groupCollapsed: assign({}, props, {\n          value: prevGroupCollapsed\n        }),\n        groupEnd: assign({}, props, {\n          value: prevGroupEnd\n        })\n      });\n      /* eslint-enable react-internal/no-production-logging */\n    }\n\n    if (disabledDepth < 0) {\n      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');\n    }\n  }\n}\n\nvar ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\nvar prefix;\nfunction describeBuiltInComponentFrame(name, source, ownerFn) {\n  {\n    if (prefix === undefined) {\n      // Extract the VM specific prefix used by each line.\n      try {\n        throw Error();\n      } catch (x) {\n        var match = x.stack.trim().match(/\\n( *(at )?)/);\n        prefix = match && match[1] || '';\n      }\n    } // We use the prefix to ensure our stacks line up with native stack frames.\n\n\n    return '\\n' + prefix + name;\n  }\n}\nvar reentry = false;\nvar componentFrameCache;\n\n{\n  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;\n  componentFrameCache = new PossiblyWeakMap();\n}\n\nfunction describeNativeComponentFrame(fn, construct) {\n  // If something asked for a stack inside a fake render, it should get ignored.\n  if ( !fn || reentry) {\n    return '';\n  }\n\n  {\n    var frame = componentFrameCache.get(fn);\n\n    if (frame !== undefined) {\n      return frame;\n    }\n  }\n\n  var control;\n  reentry = true;\n  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.\n\n  Error.prepareStackTrace = undefined;\n  var previousDispatcher;\n\n  {\n    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n    // for warnings.\n\n    ReactCurrentDispatcher.current = null;\n    disableLogs();\n  }\n\n  try {\n    // This should throw.\n    if (construct) {\n      // Something should be setting the props in the constructor.\n      var Fake = function () {\n        throw Error();\n      }; // $FlowFixMe\n\n\n      Object.defineProperty(Fake.prototype, 'props', {\n        set: function () {\n          // We use a throwing setter instead of frozen or non-writable props\n          // because that won't throw in a non-strict mode function.\n          throw Error();\n        }\n      });\n\n      if (typeof Reflect === 'object' && Reflect.construct) {\n        // We construct a different control for this case to include any extra\n        // frames added by the construct call.\n        try {\n          Reflect.construct(Fake, []);\n        } catch (x) {\n          control = x;\n        }\n\n        Reflect.construct(fn, [], Fake);\n      } else {\n        try {\n          Fake.call();\n        } catch (x) {\n          control = x;\n        }\n\n        fn.call(Fake.prototype);\n      }\n    } else {\n      try {\n        throw Error();\n      } catch (x) {\n        control = x;\n      }\n\n      fn();\n    }\n  } catch (sample) {\n    // This is inlined manually because closure doesn't do it for us.\n    if (sample && control && typeof sample.stack === 'string') {\n      // This extracts the first frame from the sample that isn't also in the control.\n      // Skipping one frame that we assume is the frame that calls the two.\n      var sampleLines = sample.stack.split('\\n');\n      var controlLines = control.stack.split('\\n');\n      var s = sampleLines.length - 1;\n      var c = controlLines.length - 1;\n\n      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {\n        // We expect at least one stack frame to be shared.\n        // Typically this will be the root most one. However, stack frames may be\n        // cut off due to maximum stack limits. In this case, one maybe cut off\n        // earlier than the other. We assume that the sample is longer or the same\n        // and there for cut off earlier. So we should find the root most frame in\n        // the sample somewhere in the control.\n        c--;\n      }\n\n      for (; s >= 1 && c >= 0; s--, c--) {\n        // Next we find the first one that isn't the same which should be the\n        // frame that called our sample function and the control.\n        if (sampleLines[s] !== controlLines[c]) {\n          // In V8, the first line is describing the message but other VMs don't.\n          // If we're about to return the first line, and the control is also on the same\n          // line, that's a pretty good indicator that our sample threw at same line as\n          // the control. I.e. before we entered the sample frame. So we ignore this result.\n          // This can happen if you passed a class to function component, or non-function.\n          if (s !== 1 || c !== 1) {\n            do {\n              s--;\n              c--; // We may still have similar intermediate frames from the construct call.\n              // The next one that isn't the same should be our match though.\n\n              if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                var _frame = '\\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled \"<anonymous>\"\n                // but we have a user-provided \"displayName\"\n                // splice it in to make the stack more readable.\n\n\n                if (fn.displayName && _frame.includes('<anonymous>')) {\n                  _frame = _frame.replace('<anonymous>', fn.displayName);\n                }\n\n                {\n                  if (typeof fn === 'function') {\n                    componentFrameCache.set(fn, _frame);\n                  }\n                } // Return the line we found.\n\n\n                return _frame;\n              }\n            } while (s >= 1 && c >= 0);\n          }\n\n          break;\n        }\n      }\n    }\n  } finally {\n    reentry = false;\n\n    {\n      ReactCurrentDispatcher.current = previousDispatcher;\n      reenableLogs();\n    }\n\n    Error.prepareStackTrace = previousPrepareStackTrace;\n  } // Fallback to just using the name if we couldn't make it throw.\n\n\n  var name = fn ? fn.displayName || fn.name : '';\n  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';\n\n  {\n    if (typeof fn === 'function') {\n      componentFrameCache.set(fn, syntheticFrame);\n    }\n  }\n\n  return syntheticFrame;\n}\nfunction describeFunctionComponentFrame(fn, source, ownerFn) {\n  {\n    return describeNativeComponentFrame(fn, false);\n  }\n}\n\nfunction shouldConstruct(Component) {\n  var prototype = Component.prototype;\n  return !!(prototype && prototype.isReactComponent);\n}\n\nfunction describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n\n  if (type == null) {\n    return '';\n  }\n\n  if (typeof type === 'function') {\n    {\n      return describeNativeComponentFrame(type, shouldConstruct(type));\n    }\n  }\n\n  if (typeof type === 'string') {\n    return describeBuiltInComponentFrame(type);\n  }\n\n  switch (type) {\n    case REACT_SUSPENSE_TYPE:\n      return describeBuiltInComponentFrame('Suspense');\n\n    case REACT_SUSPENSE_LIST_TYPE:\n      return describeBuiltInComponentFrame('SuspenseList');\n  }\n\n  if (typeof type === 'object') {\n    switch (type.$$typeof) {\n      case REACT_FORWARD_REF_TYPE:\n        return describeFunctionComponentFrame(type.render);\n\n      case REACT_MEMO_TYPE:\n        // Memo may contain any component type so we recursively resolve it.\n        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n\n      case REACT_LAZY_TYPE:\n        {\n          var lazyComponent = type;\n          var payload = lazyComponent._payload;\n          var init = lazyComponent._init;\n\n          try {\n            // Lazy may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n          } catch (x) {}\n        }\n    }\n  }\n\n  return '';\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar loggedTypeFailures = {};\nvar ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame.setExtraStackFrame(null);\n    }\n  }\n}\n\nfunction checkPropTypes(typeSpecs, values, location, componentName, element) {\n  {\n    // $FlowFixMe This is okay but Flow doesn't know it.\n    var has = Function.call.bind(hasOwnProperty);\n\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n\n          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');\n        } catch (ex) {\n          error$1 = ex;\n        }\n\n        if (error$1 && !(error$1 instanceof Error)) {\n          setCurrentlyValidatingElement(element);\n\n          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);\n\n          setCurrentlyValidatingElement(null);\n        }\n\n        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error$1.message] = true;\n          setCurrentlyValidatingElement(element);\n\n          error('Failed %s type: %s', location, error$1.message);\n\n          setCurrentlyValidatingElement(null);\n        }\n      }\n    }\n  }\n}\n\nvar isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\nfunction isArray(a) {\n  return isArrayImpl(a);\n}\n\n/*\n * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */\n// $FlowFixMe only called in DEV, so void return is not possible.\nfunction typeName(value) {\n  {\n    // toStringTag is needed for namespaced types like Temporal.Instant\n    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;\n    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';\n    return type;\n  }\n} // $FlowFixMe only called in DEV, so void return is not possible.\n\n\nfunction willCoercionThrow(value) {\n  {\n    try {\n      testStringCoercion(value);\n      return false;\n    } catch (e) {\n      return true;\n    }\n  }\n}\n\nfunction testStringCoercion(value) {\n  // If you ended up here by following an exception call stack, here's what's\n  // happened: you supplied an object or symbol value to React (as a prop, key,\n  // DOM attribute, CSS property, string ref, etc.) and when React tried to\n  // coerce it to a string using `'' + value`, an exception was thrown.\n  //\n  // The most common types that will cause this exception are `Symbol` instances\n  // and Temporal objects like `Temporal.Instant`. But any object that has a\n  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n  // exception. (Library authors do this to prevent users from using built-in\n  // numeric operators like `+` or comparison operators like `>=` because custom\n  // methods are needed to perform accurate arithmetic or comparison.)\n  //\n  // To fix the problem, coerce this object or symbol value to a string before\n  // passing it to React. The most reliable way is usually `String(value)`.\n  //\n  // To find which value is throwing, check the browser or debugger console.\n  // Before this exception was thrown, there should be `console.error` output\n  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n  // problem and how that type was used: key, atrribute, input value prop, etc.\n  // In most cases, this console output also shows the component and its\n  // ancestor components where the exception happened.\n  //\n  // eslint-disable-next-line react-internal/safe-string-coercion\n  return '' + value;\n}\nfunction checkKeyStringCoercion(value) {\n  {\n    if (willCoercionThrow(value)) {\n      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));\n\n      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n    }\n  }\n}\n\nvar ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\nvar specialPropKeyWarningShown;\nvar specialPropRefWarningShown;\nvar didWarnAboutStringRefs;\n\n{\n  didWarnAboutStringRefs = {};\n}\n\nfunction hasValidRef(config) {\n  {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n\n  return config.key !== undefined;\n}\n\nfunction warnIfStringRefCannotBeAutoConverted(config, self) {\n  {\n    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {\n      var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);\n\n      if (!didWarnAboutStringRefs[componentName]) {\n        error('Component \"%s\" contains the string ref \"%s\". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);\n\n        didWarnAboutStringRefs[componentName] = true;\n      }\n    }\n  }\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingKey = function () {\n      if (!specialPropKeyWarningShown) {\n        specialPropKeyWarningShown = true;\n\n        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingKey.isReactWarning = true;\n    Object.defineProperty(props, 'key', {\n      get: warnAboutAccessingKey,\n      configurable: true\n    });\n  }\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  {\n    var warnAboutAccessingRef = function () {\n      if (!specialPropRefWarningShown) {\n        specialPropRefWarningShown = true;\n\n        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);\n      }\n    };\n\n    warnAboutAccessingRef.isReactWarning = true;\n    Object.defineProperty(props, 'ref', {\n      get: warnAboutAccessingRef,\n      configurable: true\n    });\n  }\n}\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */\n\n\nvar ReactElement = function (type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: REACT_ELEMENT_TYPE,\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    }); // self and source are DEV only properties.\n\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    }); // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n/**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */\n\nfunction jsxDEV(type, config, maybeKey, source, self) {\n  {\n    var propName; // Reserved names are extracted\n\n    var props = {};\n    var key = null;\n    var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n    // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n    // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n    // but as an intermediary step, we will use jsxDEV for everything except\n    // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n    // key is explicitly declared to be undefined or not.\n\n    if (maybeKey !== undefined) {\n      {\n        checkKeyStringCoercion(maybeKey);\n      }\n\n      key = '' + maybeKey;\n    }\n\n    if (hasValidKey(config)) {\n      {\n        checkKeyStringCoercion(config.key);\n      }\n\n      key = '' + config.key;\n    }\n\n    if (hasValidRef(config)) {\n      ref = config.ref;\n      warnIfStringRefCannotBeAutoConverted(config, self);\n    } // Remaining properties are added to a new props object\n\n\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    } // Resolve default props\n\n\n    if (type && type.defaultProps) {\n      var defaultProps = type.defaultProps;\n\n      for (propName in defaultProps) {\n        if (props[propName] === undefined) {\n          props[propName] = defaultProps[propName];\n        }\n      }\n    }\n\n    if (key || ref) {\n      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n\n      if (key) {\n        defineKeyPropWarningGetter(props, displayName);\n      }\n\n      if (ref) {\n        defineRefPropWarningGetter(props, displayName);\n      }\n    }\n\n    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);\n  }\n}\n\nvar ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\nfunction setCurrentlyValidatingElement$1(element) {\n  {\n    if (element) {\n      var owner = element._owner;\n      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n    } else {\n      ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n    }\n  }\n}\n\nvar propTypesMisspellWarningShown;\n\n{\n  propTypesMisspellWarningShown = false;\n}\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */\n\n\nfunction isValidElement(object) {\n  {\n    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n  }\n}\n\nfunction getDeclarationErrorAddendum() {\n  {\n    if (ReactCurrentOwner$1.current) {\n      var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n\n      if (name) {\n        return '\\n\\nCheck the render method of `' + name + '`.';\n      }\n    }\n\n    return '';\n  }\n}\n\nfunction getSourceInfoErrorAddendum(source) {\n  {\n    if (source !== undefined) {\n      var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n      var lineNumber = source.lineNumber;\n      return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n    }\n\n    return '';\n  }\n}\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\n\n\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  {\n    var info = getDeclarationErrorAddendum();\n\n    if (!info) {\n      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n\n      if (parentName) {\n        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n      }\n    }\n\n    return info;\n  }\n}\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\n\n\nfunction validateExplicitKey(element, parentType) {\n  {\n    if (!element._store || element._store.validated || element.key != null) {\n      return;\n    }\n\n    element._store.validated = true;\n    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n    // property, it may be the creator of the child that's responsible for\n    // assigning it a key.\n\n    var childOwner = '';\n\n    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {\n      // Give the component that originally created this child.\n      childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n    }\n\n    setCurrentlyValidatingElement$1(element);\n\n    error('Each child in a list should have a unique \"key\" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);\n\n    setCurrentlyValidatingElement$1(null);\n  }\n}\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\n\n\nfunction validateChildKeys(node, parentType) {\n  {\n    if (typeof node !== 'object') {\n      return;\n    }\n\n    if (isArray(node)) {\n      for (var i = 0; i < node.length; i++) {\n        var child = node[i];\n\n        if (isValidElement(child)) {\n          validateExplicitKey(child, parentType);\n        }\n      }\n    } else if (isValidElement(node)) {\n      // This element was passed in a valid location.\n      if (node._store) {\n        node._store.validated = true;\n      }\n    } else if (node) {\n      var iteratorFn = getIteratorFn(node);\n\n      if (typeof iteratorFn === 'function') {\n        // Entry iterators used to provide implicit keys,\n        // but now we print a separate warning for them later.\n        if (iteratorFn !== node.entries) {\n          var iterator = iteratorFn.call(node);\n          var step;\n\n          while (!(step = iterator.next()).done) {\n            if (isValidElement(step.value)) {\n              validateExplicitKey(step.value, parentType);\n            }\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\n\n\nfunction validatePropTypes(element) {\n  {\n    var type = element.type;\n\n    if (type === null || type === undefined || typeof type === 'string') {\n      return;\n    }\n\n    var propTypes;\n\n    if (typeof type === 'function') {\n      propTypes = type.propTypes;\n    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n    // Inner props are checked in the reconciler.\n    type.$$typeof === REACT_MEMO_TYPE)) {\n      propTypes = type.propTypes;\n    } else {\n      return;\n    }\n\n    if (propTypes) {\n      // Intentionally inside to avoid triggering lazy initializers:\n      var name = getComponentNameFromType(type);\n      checkPropTypes(propTypes, element.props, 'prop', name, element);\n    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n\n      var _name = getComponentNameFromType(type);\n\n      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');\n    }\n\n    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {\n      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n    }\n  }\n}\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\n\n\nfunction validateFragmentProps(fragment) {\n  {\n    var keys = Object.keys(fragment.props);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n\n      if (key !== 'children' && key !== 'key') {\n        setCurrentlyValidatingElement$1(fragment);\n\n        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);\n\n        setCurrentlyValidatingElement$1(null);\n        break;\n      }\n    }\n\n    if (fragment.ref !== null) {\n      setCurrentlyValidatingElement$1(fragment);\n\n      error('Invalid attribute `ref` supplied to `React.Fragment`.');\n\n      setCurrentlyValidatingElement$1(null);\n    }\n  }\n}\n\nfunction jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n  {\n    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n    // succeed and there will likely be errors in render.\n\n    if (!validType) {\n      var info = '';\n\n      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {\n        info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n      }\n\n      var sourceInfo = getSourceInfoErrorAddendum(source);\n\n      if (sourceInfo) {\n        info += sourceInfo;\n      } else {\n        info += getDeclarationErrorAddendum();\n      }\n\n      var typeString;\n\n      if (type === null) {\n        typeString = 'null';\n      } else if (isArray(type)) {\n        typeString = 'array';\n      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n        typeString = \"<\" + (getComponentNameFromType(type.type) || 'Unknown') + \" />\";\n        info = ' Did you accidentally export a JSX literal instead of a component?';\n      } else {\n        typeString = typeof type;\n      }\n\n      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n    }\n\n    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n    // TODO: Drop this when these are no longer allowed as the type argument.\n\n    if (element == null) {\n      return element;\n    } // Skip key warning if the type isn't valid since our key validation logic\n    // doesn't expect a non-string/function type and can throw confusing errors.\n    // We don't want exception behavior to differ between dev and prod.\n    // (Rendering will throw with a helpful message and as soon as the type is\n    // fixed, the key warnings will appear.)\n\n\n    if (validType) {\n      var children = props.children;\n\n      if (children !== undefined) {\n        if (isStaticChildren) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              validateChildKeys(children[i], type);\n            }\n\n            if (Object.freeze) {\n              Object.freeze(children);\n            }\n          } else {\n            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');\n          }\n        } else {\n          validateChildKeys(children, type);\n        }\n      }\n    }\n\n    if (type === REACT_FRAGMENT_TYPE) {\n      validateFragmentProps(element);\n    } else {\n      validatePropTypes(element);\n    }\n\n    return element;\n  }\n} // These two functions exist to still get child warnings in dev\n\nvar jsxDEV$1 =  jsxWithValidation ;\n\nexports.Fragment = REACT_FRAGMENT_TYPE;\nexports.jsxDEV = jsxDEV$1;\n  })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react/cjs/react-jsx-dev-runtime.development.js\n");

/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"./node_modules/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUksS0FBcUMsRUFBRSxFQUUxQyxDQUFDO0FBQ0YsRUFBRSx1SkFBc0U7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtZGV2LXJ1bnRpbWUuanM/NTc3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1kZXYtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react/jsx-dev-runtime.js\n");

/***/ }),

/***/ "@cosmjs/cosmwasm-stargate":
/*!********************************************!*\
  !*** external "@cosmjs/cosmwasm-stargate" ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@cosmjs/cosmwasm-stargate");

/***/ }),

/***/ "@cosmjs/encoding":
/*!***********************************!*\
  !*** external "@cosmjs/encoding" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@cosmjs/encoding");

/***/ }),

/***/ "@cosmjs/math":
/*!*******************************!*\
  !*** external "@cosmjs/math" ***!
  \*******************************/
/***/ ((module) => {

"use strict";
module.exports = require("@cosmjs/math");

/***/ }),

/***/ "@cosmjs/proto-signing":
/*!****************************************!*\
  !*** external "@cosmjs/proto-signing" ***!
  \****************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@cosmjs/proto-signing");

/***/ }),

/***/ "@cosmjs/stargate":
/*!***********************************!*\
  !*** external "@cosmjs/stargate" ***!
  \***********************************/
/***/ ((module) => {

"use strict";
module.exports = require("@cosmjs/stargate");

/***/ }),

/***/ "@supercharge/promise-pool":
/*!********************************************!*\
  !*** external "@supercharge/promise-pool" ***!
  \********************************************/
/***/ ((module) => {

"use strict";
module.exports = require("@supercharge/promise-pool");

/***/ }),

/***/ "cosmjs-types/cosmos/crypto/secp256k1/keys":
/*!************************************************************!*\
  !*** external "cosmjs-types/cosmos/crypto/secp256k1/keys" ***!
  \************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("cosmjs-types/cosmos/crypto/secp256k1/keys");

/***/ }),

/***/ "cosmjs-types/cosmos/tx/v1beta1/tx":
/*!****************************************************!*\
  !*** external "cosmjs-types/cosmos/tx/v1beta1/tx" ***!
  \****************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("cosmjs-types/cosmos/tx/v1beta1/tx");

/***/ }),

/***/ "cosmjs-types/google/protobuf/any":
/*!***************************************************!*\
  !*** external "cosmjs-types/google/protobuf/any" ***!
  \***************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("cosmjs-types/google/protobuf/any");

/***/ }),

/***/ "long":
/*!***********************!*\
  !*** external "long" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("long");

/***/ }),

/***/ "../shared/lib/app-router-context":
/*!*************************************************************!*\
  !*** external "next/dist/shared/lib/app-router-context.js" ***!
  \*************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/app-router-context.js");

/***/ }),

/***/ "../shared/lib/router-context":
/*!*********************************************************!*\
  !*** external "next/dist/shared/lib/router-context.js" ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router-context.js");

/***/ }),

/***/ "../shared/lib/router/utils/add-path-prefix":
/*!***********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/add-path-prefix.js" ***!
  \***********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/add-path-prefix.js");

/***/ }),

/***/ "../shared/lib/router/utils/format-url":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/format-url.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/format-url.js");

/***/ }),

/***/ "../shared/lib/router/utils/is-local-url":
/*!********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/is-local-url.js" ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/is-local-url.js");

/***/ }),

/***/ "../shared/lib/router/utils/parse-path":
/*!******************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/parse-path.js" ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/parse-path.js");

/***/ }),

/***/ "../shared/lib/router/utils/remove-trailing-slash":
/*!*****************************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/remove-trailing-slash.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/remove-trailing-slash.js");

/***/ }),

/***/ "../shared/lib/router/utils/resolve-href":
/*!********************************************************************!*\
  !*** external "next/dist/shared/lib/router/utils/resolve-href.js" ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/router/utils/resolve-href.js");

/***/ }),

/***/ "../shared/lib/utils":
/*!************************************************!*\
  !*** external "next/dist/shared/lib/utils.js" ***!
  \************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/shared/lib/utils.js");

/***/ }),

/***/ "next/router":
/*!******************************!*\
  !*** external "next/router" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/router");

/***/ }),

/***/ "protobufjs/minimal":
/*!*************************************!*\
  !*** external "protobufjs/minimal" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("protobufjs/minimal");

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("react");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = import("axios");;

/***/ }),

/***/ "zustand":
/*!**************************!*\
  !*** external "zustand" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = import("zustand");;

/***/ }),

/***/ "zustand/middleware":
/*!*************************************!*\
  !*** external "zustand/middleware" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = import("zustand/middleware");;

/***/ }),

/***/ "./node_modules/@swc/helpers/cjs/_interop_require_default.cjs":
/*!********************************************************************!*\
  !*** ./node_modules/@swc/helpers/cjs/_interop_require_default.cjs ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports._ = exports._interop_require_default = _interop_require_default;\nfunction _interop_require_default(obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHN3Yy9oZWxwZXJzL2Nqcy9faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQuY2pzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLFNBQVMsR0FBRyxnQ0FBZ0M7QUFDNUM7QUFDQSwyQ0FBMkM7QUFDM0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXNtX2RlcGxveS8uL25vZGVfbW9kdWxlcy9Ac3djL2hlbHBlcnMvY2pzL19pbnRlcm9wX3JlcXVpcmVfZGVmYXVsdC5janM/ZjgwZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fID0gZXhwb3J0cy5faW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQgPSBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQ7XG5mdW5jdGlvbiBfaW50ZXJvcF9yZXF1aXJlX2RlZmF1bHQob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@swc/helpers/cjs/_interop_require_default.cjs\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./src/pages/index.tsx"));
module.exports = __webpack_exports__;

})();